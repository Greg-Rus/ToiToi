// Compiled shader for all platforms

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Shader Graphs/UnlitTimeVortex" {
Properties {
 Vector2_5E0C2698 ("Vector2", Vector) = (0.000000,1.000000,0.000000,0.000000)
 Vector1_E94C06A8 ("OffsetX", Float) = 0.000000
[NoScaleOffset] [NonModifiableTextureData]  _Texture2DAsset_938D465B_Out ("Texture2D", 2D) = "white" { }
}
SubShader { 
 Tags { "QUEUE"="Transparent+0" "RenderType"="Transparent" "RenderPipeline"="LightweightPipeline" }


 // Stats for Vertex shader:
 //        d3d11: 34 avg math (33..35)
 // Stats for Fragment shader:
 //        d3d11: 4 math, 1 texture
 Pass {
  Name "StandardUnlit"
  Tags { "LIGHTMODE"="LightweightForward" "QUEUE"="Transparent+0" "RenderType"="Transparent" "RenderPipeline"="LightweightPipeline" }
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 33 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerDraw" (368 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 304
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 1   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 3   xyz         1     NONE   float   xyz 
// TEXCOORD                 4   xyz         2     NONE   float   xyz 
// TEXCOORD                 5   xyz         3     NONE   float   xyz 
// TEXCOORD                 6   xyz         4     NONE   float   xyz 
// TEXCOORD                 7   xyz         5     NONE   float   xyz 
// TEXCOORD                 8   xyzw        6     NONE   float   xyzw
// TEXCOORD                 9   xyzw        7     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[8], immediateIndexed
      dcl_constantbuffer CB2[23], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xyzw
      dcl_input v4.xyzw
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyz
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_output o5.xyz
      dcl_output o6.xyzw
      dcl_output o7.xyzw
      dcl_temps 3
   0: mul r0.xyz, v0.yyyy, cb1[1].xyzx
   1: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
   2: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
   3: mad r1.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   4: add r0.xyz, r0.xyzx, cb1[3].xyzx
   5: add o5.xyz, -r0.xyzx, cb0[4].xyzx
   6: mul r0.xyz, r1.yyyy, cb1[5].xyzx
   7: mad r0.xyz, cb1[4].xyzx, r1.xxxx, r0.xyzx
   8: mad r0.xyz, cb1[6].xyzx, r1.zzzz, r0.xyzx
   9: mov o1.xyz, r1.xyzx
  10: add r0.xyz, r0.xyzx, cb1[7].xyzx
  11: mul r1.xyzw, r0.yyyy, cb1[1].xyzw
  12: mad r1.xyzw, cb1[0].xyzw, r0.xxxx, r1.xyzw
  13: mad r0.xyzw, cb1[2].xyzw, r0.zzzz, r1.xyzw
  14: add r0.xyzw, r0.xyzw, cb1[3].xyzw
  15: mul r1.xyzw, r0.yyyy, cb2[20].xyzw
  16: mad r1.xyzw, cb2[19].xyzw, r0.xxxx, r1.xyzw
  17: mad r1.xyzw, cb2[21].xyzw, r0.zzzz, r1.xyzw
  18: mad o0.xyzw, cb2[22].xyzw, r0.wwww, r1.xyzw
  19: dp3 r0.x, v1.xyzx, cb1[4].xyzx
  20: dp3 r0.y, v1.xyzx, cb1[5].xyzx
  21: dp3 r0.z, v1.xyzx, cb1[6].xyzx
  22: dp3 r0.w, r0.xyzx, r0.xyzx
  23: rsq r0.w, r0.w
  24: mul r0.xyz, r0.wwww, r0.xyzx
  25: mov o2.xyz, r0.xyzx
  26: mul r1.xyz, v2.yyyy, cb1[1].xyzx
  27: mad r1.xyz, cb1[0].xyzx, v2.xxxx, r1.xyzx
  28: mad r1.xyz, cb1[2].xyzx, v2.zzzz, r1.xyzx
  29: dp3 r0.w, r1.xyzx, r1.xyzx
  30: rsq r0.w, r0.w
  31: mul r1.xyz, r0.wwww, r1.xyzx
  32: mov o3.xyz, r1.xyzx
  33: mul r2.xyz, r0.zxyz, r1.yzxy
  34: mad r0.xyz, r0.yzxy, r1.zxyz, -r2.xyzx
  35: mul o4.xyz, r0.xyzx, v2.wwww
  36: mov o6.xyzw, v3.xyzw
  37: mov o7.xyzw, v4.xyzw
  38: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 4 math, 2 temp registers, 1 textures
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector4 _Time at 0
}
Constant Buffer "UnityPerMaterial" (16 bytes) on slot 1 {
  Vector2 Vector2_5E0C2698 at 0
  Float Vector1_E94C06A8 at 8
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 3   xyz         1     NONE   float       
// TEXCOORD                 4   xyz         2     NONE   float       
// TEXCOORD                 5   xyz         3     NONE   float       
// TEXCOORD                 6   xyz         4     NONE   float       
// TEXCOORD                 7   xyz         5     NONE   float       
// TEXCOORD                 8   xyzw        6     NONE   float   xy  
// TEXCOORD                 9   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[1], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v6.xy
      dcl_output o0.xyzw
      dcl_temps 2
   0: mul r0.x, cb0[0].y, l(0.500000)
   1: mul r1.y, r0.x, cb1[0].y
   2: mad r1.x, cb1[0].x, r0.x, cb1[0].z
   3: add r0.xy, r1.xyxx, v6.xyxx
   4: sample r0.xyzw, r0.xyxx, t0.xyzw, s0
   5: mov o0.xyz, r0.xyzx
   6: mov o0.w, l(0.500000)
   7: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD0;
    vs_TEXCOORD9 = in_TEXCOORD1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec2 Vector2_5E0C2698;
uniform 	float Vector1_E94C06A8;
uniform lowp sampler2D _Texture2DAsset_938D465B_Out;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec2 u_xlat1;
void main()
{
    u_xlat0.x = _Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * Vector2_5E0C2698.y;
    u_xlat1.x = Vector2_5E0C2698.x * u_xlat0.x + Vector1_E94C06A8;
    u_xlat0.xy = u_xlat1.xy + vs_TEXCOORD8.xy;
    u_xlat10_0.xyz = texture2D(_Texture2DAsset_938D465B_Out, u_xlat0.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz;
    SV_Target0.w = 0.5;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD0;
    vs_TEXCOORD9 = in_TEXCOORD1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec2 Vector2_5E0C2698;
uniform 	float Vector1_E94C06A8;
UNITY_LOCATION(0) uniform mediump sampler2D _Texture2DAsset_938D465B_Out;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
void main()
{
    u_xlat0.x = _Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * Vector2_5E0C2698.y;
    u_xlat1.x = Vector2_5E0C2698.x * u_xlat0.x + Vector1_E94C06A8;
    u_xlat0.xy = u_xlat1.xy + vs_TEXCOORD8.xy;
    u_xlat16_0.xyz = texture(_Texture2DAsset_938D465B_Out, u_xlat0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target0.w = 0.5;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerDraw" (368 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};

struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_LightData;
    float4 unity_LightIndices[2];
    float4 unity_SpecCube0_HDR;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
};

struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 unity_FogParams;
    float4 unity_FogColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_StereoScaleOffset;
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD1 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]];
    float4 TEXCOORD9 [[ user(TEXCOORD9) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(2) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.TEXCOORD7.xyz = (-u_xlat0.xyz) + UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat0.xyz = u_xlat1.yyy * UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz, u_xlat1.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz, u_xlat1.zzz, u_xlat0.xyz);
    output.TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat1.xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    output.TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat0.yzx, u_xlat1.zxy, (-u_xlat2.xyz));
    output.TEXCOORD6.xyz = u_xlat0.xyz * input.TANGENT0.www;
    output.TEXCOORD8 = input.TEXCOORD0;
    output.TEXCOORD9 = input.TEXCOORD1;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector4 _Time at 0
}
Constant Buffer "UnityPerMaterial" (12 bytes) on slot 1 {
  Vector2 Vector2_5E0C2698 at 0
  Float Vector1_E94C06A8 at 8
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};

struct UnityPerMaterial_Type
{
    float2 Vector2_5E0C2698;
    float Vector1_E94C06A8;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    sampler sampler_Texture2DAsset_938D465B_Out [[ sampler (0) ]],
    texture2d<float, access::sample > _Texture2DAsset_938D465B_Out [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float2 u_xlat1;
    u_xlat0.x = UnityPerCamera._Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * UnityPerMaterial.Vector2_5E0C2698.xyxx.y;
    u_xlat1.x = fma(UnityPerMaterial.Vector2_5E0C2698.xyxx.x, u_xlat0.x, UnityPerMaterial.Vector1_E94C06A8);
    u_xlat0.xy = u_xlat1.xy + input.TEXCOORD8.xy;
    u_xlat0.xyz = _Texture2DAsset_938D465B_Out.sample(sampler_Texture2DAsset_938D465B_Out, u_xlat0.xy).xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 0.5;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec3 vs_TEXCOORD7;
out vec4 vs_TEXCOORD8;
out vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD0;
    vs_TEXCOORD9 = in_TEXCOORD1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec2 Vector2_5E0C2698;
uniform 	float Vector1_E94C06A8;
UNITY_LOCATION(0) uniform  sampler2D _Texture2DAsset_938D465B_Out;
in  vec4 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec4 u_xlat10_0;
vec2 u_xlat1;
void main()
{
    u_xlat0.x = _Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * Vector2_5E0C2698.y;
    u_xlat1.x = Vector2_5E0C2698.x * u_xlat0.x + Vector1_E94C06A8;
    u_xlat0.xy = u_xlat1.xy + vs_TEXCOORD8.xy;
    u_xlat10_0 = texture(_Texture2DAsset_938D465B_Out, u_xlat0.xy);
    SV_Target0.xyz = u_xlat10_0.xyz;
    SV_Target0.w = 0.5;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_Texture2DAsset_938D465B_Out" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "UnityPerCamera" (144 bytes) on set: 1, binding: 0, used in: Vertex Fragment  {
  Vector4 _Time at 0
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerDraw" (368 bytes) on set: 1, binding: 2, used in: Vertex  {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on set: 1, binding: 3, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "UnityPerMaterial" (12 bytes) on set: 1, binding: 1, used in: Fragment  {
  Float Vector1_E94C06A8 at 8
  Vector2 Vector2_5E0C2698 at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 319

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 79 121 186 197 233 236 281 301 307 308 310 311
                              Name 79  "vs_TEXCOORD7"
                              Name 121  "vs_TEXCOORD3"
                              Name 233  "vs_TEXCOORD4"
                              Name 281  "vs_TEXCOORD5"
                              Name 301  "vs_TEXCOORD6"
                              Name 307  "vs_TEXCOORD8"
                              Name 310  "vs_TEXCOORD9"
                              Decorate 11 Location 0
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              Decorate 20 ArrayStride 16
                              MemberDecorate 21 0 Offset 0
                              MemberDecorate 21 1 Offset 64
                              MemberDecorate 21 2 Offset 128
                              MemberDecorate 21 3 Offset 144
                              MemberDecorate 21 4 Offset 160
                              MemberDecorate 21 5 Offset 176
                              MemberDecorate 21 6 Offset 208
                              MemberDecorate 21 7 Offset 224
                              MemberDecorate 21 8 Offset 240
                              MemberDecorate 21 9 Offset 256
                              MemberDecorate 21 10 Offset 272
                              MemberDecorate 21 11 Offset 288
                              MemberDecorate 21 12 Offset 304
                              MemberDecorate 21 13 Offset 320
                              MemberDecorate 21 14 Offset 336
                              MemberDecorate 21 15 Offset 352
                              Decorate 21 Block
                              Decorate 23 DescriptorSet 1
                              Decorate 23 Binding 2
                              Decorate 79(vs_TEXCOORD7) Location 5
                              MemberDecorate 83 0 Offset 0
                              MemberDecorate 83 1 Offset 16
                              MemberDecorate 83 2 Offset 32
                              MemberDecorate 83 3 Offset 48
                              MemberDecorate 83 4 Offset 64
                              MemberDecorate 83 5 Offset 80
                              MemberDecorate 83 6 Offset 96
                              MemberDecorate 83 7 Offset 112
                              MemberDecorate 83 8 Offset 128
                              Decorate 83 Block
                              Decorate 85 DescriptorSet 1
                              Decorate 85 Binding 0
                              Decorate 121(vs_TEXCOORD3) Location 1
                              Decorate 157 ArrayStride 16
                              Decorate 158 ArrayStride 16
                              Decorate 159 ArrayStride 16
                              Decorate 160 ArrayStride 16
                              MemberDecorate 161 0 Offset 0
                              MemberDecorate 161 1 Offset 16
                              MemberDecorate 161 2 Offset 32
                              MemberDecorate 161 3 Offset 48
                              MemberDecorate 161 4 Offset 64
                              MemberDecorate 161 5 Offset 80
                              MemberDecorate 161 6 Offset 96
                              MemberDecorate 161 7 Offset 112
                              MemberDecorate 161 8 Offset 176
                              MemberDecorate 161 9 Offset 240
                              MemberDecorate 161 10 Offset 304
                              MemberDecorate 161 11 Offset 368
                              MemberDecorate 161 12 Offset 384
                              MemberDecorate 161 13 Offset 400
                              Decorate 161 Block
                              Decorate 163 DescriptorSet 1
                              Decorate 163 Binding 3
                              MemberDecorate 184 0 BuiltIn Position
                              MemberDecorate 184 1 BuiltIn PointSize
                              MemberDecorate 184 2 BuiltIn ClipDistance
                              Decorate 184 Block
                              Decorate 197 Location 1
                              Decorate 233(vs_TEXCOORD4) Location 2
                              Decorate 236 Location 2
                              Decorate 281(vs_TEXCOORD5) Location 3
                              Decorate 301(vs_TEXCOORD6) Location 4
                              Decorate 307(vs_TEXCOORD8) Location 0
                              Decorate 308 Location 3
                              Decorate 310(vs_TEXCOORD9) Location 6
                              Decorate 311 Location 4
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              15:             TypeInt 32 0
              16:     15(int) Constant 4
              17:             TypeArray 7(fvec4) 16
              18:             TypeArray 7(fvec4) 16
              19:     15(int) Constant 2
              20:             TypeArray 7(fvec4) 19
              21:             TypeStruct 17 18 7(fvec4) 7(fvec4) 7(fvec4) 20 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4)
              22:             TypePointer Uniform 21(struct)
              23:     22(ptr) Variable Uniform
              24:             TypeInt 32 1
              25:     24(int) Constant 0
              26:     24(int) Constant 1
              27:             TypePointer Uniform 7(fvec4)
              45:     24(int) Constant 2
              57:      8(ptr) Variable Private
              58:     24(int) Constant 3
              78:             TypePointer Output 12(fvec3)
79(vs_TEXCOORD7):     78(ptr) Variable Output
              83:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 12(fvec3) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4)
              84:             TypePointer Uniform 83(struct)
              85:     84(ptr) Variable Uniform
              86:     24(int) Constant 4
              87:             TypePointer Uniform 12(fvec3)
121(vs_TEXCOORD3):     78(ptr) Variable Output
             157:             TypeArray 7(fvec4) 16
             158:             TypeArray 7(fvec4) 16
             159:             TypeArray 7(fvec4) 16
             160:             TypeArray 7(fvec4) 16
             161:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 157 158 159 160 7(fvec4) 24(int) 7(fvec4)
             162:             TypePointer Uniform 161(struct)
             163:    162(ptr) Variable Uniform
             164:     24(int) Constant 10
             182:     15(int) Constant 1
             183:             TypeArray 6(float) 182
             184:             TypeStruct 7(fvec4) 6(float) 183
             185:             TypePointer Output 184(struct)
             186:    185(ptr) Variable Output
             194:             TypePointer Output 7(fvec4)
             196:             TypePointer Input 12(fvec3)
             197:    196(ptr) Variable Input
             203:     15(int) Constant 0
             204:             TypePointer Private 6(float)
             218:    204(ptr) Variable Private
233(vs_TEXCOORD4):     78(ptr) Variable Output
             236:     10(ptr) Variable Input
281(vs_TEXCOORD5):     78(ptr) Variable Output
             284:             TypePointer Private 12(fvec3)
             285:    284(ptr) Variable Private
301(vs_TEXCOORD6):     78(ptr) Variable Output
307(vs_TEXCOORD8):    194(ptr) Variable Output
             308:     10(ptr) Variable Input
310(vs_TEXCOORD9):    194(ptr) Variable Output
             311:     10(ptr) Variable Input
             313:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 1 1 1
              28:     27(ptr) AccessChain 23 25 26
              29:    7(fvec4) Load 28
              30:   12(fvec3) VectorShuffle 29 29 0 1 2
              31:   12(fvec3) FMul 14 30
              32:    7(fvec4) Load 9
              33:    7(fvec4) VectorShuffle 32 31 4 5 6 3
                              Store 9 33
              34:     27(ptr) AccessChain 23 25 25
              35:    7(fvec4) Load 34
              36:   12(fvec3) VectorShuffle 35 35 0 1 2
              37:    7(fvec4) Load 11
              38:   12(fvec3) VectorShuffle 37 37 0 0 0
              39:   12(fvec3) FMul 36 38
              40:    7(fvec4) Load 9
              41:   12(fvec3) VectorShuffle 40 40 0 1 2
              42:   12(fvec3) FAdd 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) VectorShuffle 43 42 4 5 6 3
                              Store 9 44
              46:     27(ptr) AccessChain 23 25 45
              47:    7(fvec4) Load 46
              48:   12(fvec3) VectorShuffle 47 47 0 1 2
              49:    7(fvec4) Load 11
              50:   12(fvec3) VectorShuffle 49 49 2 2 2
              51:   12(fvec3) FMul 48 50
              52:    7(fvec4) Load 9
              53:   12(fvec3) VectorShuffle 52 52 0 1 2
              54:   12(fvec3) FAdd 51 53
              55:    7(fvec4) Load 9
              56:    7(fvec4) VectorShuffle 55 54 4 5 6 3
                              Store 9 56
              59:     27(ptr) AccessChain 23 25 58
              60:    7(fvec4) Load 59
              61:   12(fvec3) VectorShuffle 60 60 0 1 2
              62:    7(fvec4) Load 11
              63:   12(fvec3) VectorShuffle 62 62 3 3 3
              64:   12(fvec3) FMul 61 63
              65:    7(fvec4) Load 9
              66:   12(fvec3) VectorShuffle 65 65 0 1 2
              67:   12(fvec3) FAdd 64 66
              68:    7(fvec4) Load 57
              69:    7(fvec4) VectorShuffle 68 67 4 5 6 3
                              Store 57 69
              70:    7(fvec4) Load 9
              71:   12(fvec3) VectorShuffle 70 70 0 1 2
              72:     27(ptr) AccessChain 23 25 58
              73:    7(fvec4) Load 72
              74:   12(fvec3) VectorShuffle 73 73 0 1 2
              75:   12(fvec3) FAdd 71 74
              76:    7(fvec4) Load 9
              77:    7(fvec4) VectorShuffle 76 75 4 5 6 3
                              Store 9 77
              80:    7(fvec4) Load 9
              81:   12(fvec3) VectorShuffle 80 80 0 1 2
              82:   12(fvec3) FNegate 81
              88:     87(ptr) AccessChain 85 86
              89:   12(fvec3) Load 88
              90:   12(fvec3) FAdd 82 89
                              Store 79(vs_TEXCOORD7) 90
              91:    7(fvec4) Load 57
              92:   12(fvec3) VectorShuffle 91 91 1 1 1
              93:     27(ptr) AccessChain 23 26 26
              94:    7(fvec4) Load 93
              95:   12(fvec3) VectorShuffle 94 94 0 1 2
              96:   12(fvec3) FMul 92 95
              97:    7(fvec4) Load 9
              98:    7(fvec4) VectorShuffle 97 96 4 5 6 3
                              Store 9 98
              99:     27(ptr) AccessChain 23 26 25
             100:    7(fvec4) Load 99
             101:   12(fvec3) VectorShuffle 100 100 0 1 2
             102:    7(fvec4) Load 57
             103:   12(fvec3) VectorShuffle 102 102 0 0 0
             104:   12(fvec3) FMul 101 103
             105:    7(fvec4) Load 9
             106:   12(fvec3) VectorShuffle 105 105 0 1 2
             107:   12(fvec3) FAdd 104 106
             108:    7(fvec4) Load 9
             109:    7(fvec4) VectorShuffle 108 107 4 5 6 3
                              Store 9 109
             110:     27(ptr) AccessChain 23 26 45
             111:    7(fvec4) Load 110
             112:   12(fvec3) VectorShuffle 111 111 0 1 2
             113:    7(fvec4) Load 57
             114:   12(fvec3) VectorShuffle 113 113 2 2 2
             115:   12(fvec3) FMul 112 114
             116:    7(fvec4) Load 9
             117:   12(fvec3) VectorShuffle 116 116 0 1 2
             118:   12(fvec3) FAdd 115 117
             119:    7(fvec4) Load 9
             120:    7(fvec4) VectorShuffle 119 118 4 5 6 3
                              Store 9 120
             122:    7(fvec4) Load 57
             123:   12(fvec3) VectorShuffle 122 122 0 1 2
                              Store 121(vs_TEXCOORD3) 123
             124:    7(fvec4) Load 9
             125:   12(fvec3) VectorShuffle 124 124 0 1 2
             126:     27(ptr) AccessChain 23 26 58
             127:    7(fvec4) Load 126
             128:   12(fvec3) VectorShuffle 127 127 0 1 2
             129:   12(fvec3) FAdd 125 128
             130:    7(fvec4) Load 9
             131:    7(fvec4) VectorShuffle 130 129 4 5 6 3
                              Store 9 131
             132:    7(fvec4) Load 9
             133:    7(fvec4) VectorShuffle 132 132 1 1 1 1
             134:     27(ptr) AccessChain 23 25 26
             135:    7(fvec4) Load 134
             136:    7(fvec4) FMul 133 135
                              Store 57 136
             137:     27(ptr) AccessChain 23 25 25
             138:    7(fvec4) Load 137
             139:    7(fvec4) Load 9
             140:    7(fvec4) VectorShuffle 139 139 0 0 0 0
             141:    7(fvec4) FMul 138 140
             142:    7(fvec4) Load 57
             143:    7(fvec4) FAdd 141 142
                              Store 57 143
             144:     27(ptr) AccessChain 23 25 45
             145:    7(fvec4) Load 144
             146:    7(fvec4) Load 9
             147:    7(fvec4) VectorShuffle 146 146 2 2 2 2
             148:    7(fvec4) FMul 145 147
             149:    7(fvec4) Load 57
             150:    7(fvec4) FAdd 148 149
                              Store 9 150
             151:    7(fvec4) Load 9
             152:     27(ptr) AccessChain 23 25 58
             153:    7(fvec4) Load 152
             154:    7(fvec4) FAdd 151 153
                              Store 9 154
             155:    7(fvec4) Load 9
             156:    7(fvec4) VectorShuffle 155 155 1 1 1 1
             165:     27(ptr) AccessChain 163 164 26
             166:    7(fvec4) Load 165
             167:    7(fvec4) FMul 156 166
                              Store 57 167
             168:     27(ptr) AccessChain 163 164 25
             169:    7(fvec4) Load 168
             170:    7(fvec4) Load 9
             171:    7(fvec4) VectorShuffle 170 170 0 0 0 0
             172:    7(fvec4) FMul 169 171
             173:    7(fvec4) Load 57
             174:    7(fvec4) FAdd 172 173
                              Store 57 174
             175:     27(ptr) AccessChain 163 164 45
             176:    7(fvec4) Load 175
             177:    7(fvec4) Load 9
             178:    7(fvec4) VectorShuffle 177 177 2 2 2 2
             179:    7(fvec4) FMul 176 178
             180:    7(fvec4) Load 57
             181:    7(fvec4) FAdd 179 180
                              Store 57 181
             187:     27(ptr) AccessChain 163 164 58
             188:    7(fvec4) Load 187
             189:    7(fvec4) Load 9
             190:    7(fvec4) VectorShuffle 189 189 3 3 3 3
             191:    7(fvec4) FMul 188 190
             192:    7(fvec4) Load 57
             193:    7(fvec4) FAdd 191 192
             195:    194(ptr) AccessChain 186 25
                              Store 195 193
             198:   12(fvec3) Load 197
             199:     27(ptr) AccessChain 23 26 25
             200:    7(fvec4) Load 199
             201:   12(fvec3) VectorShuffle 200 200 0 1 2
             202:    6(float) Dot 198 201
             205:    204(ptr) AccessChain 9 203
                              Store 205 202
             206:   12(fvec3) Load 197
             207:     27(ptr) AccessChain 23 26 26
             208:    7(fvec4) Load 207
             209:   12(fvec3) VectorShuffle 208 208 0 1 2
             210:    6(float) Dot 206 209
             211:    204(ptr) AccessChain 9 182
                              Store 211 210
             212:   12(fvec3) Load 197
             213:     27(ptr) AccessChain 23 26 45
             214:    7(fvec4) Load 213
             215:   12(fvec3) VectorShuffle 214 214 0 1 2
             216:    6(float) Dot 212 215
             217:    204(ptr) AccessChain 9 19
                              Store 217 216
             219:    7(fvec4) Load 9
             220:   12(fvec3) VectorShuffle 219 219 0 1 2
             221:    7(fvec4) Load 9
             222:   12(fvec3) VectorShuffle 221 221 0 1 2
             223:    6(float) Dot 220 222
                              Store 218 223
             224:    6(float) Load 218
             225:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 224
                              Store 218 225
             226:    6(float) Load 218
             227:   12(fvec3) CompositeConstruct 226 226 226
             228:    7(fvec4) Load 9
             229:   12(fvec3) VectorShuffle 228 228 0 1 2
             230:   12(fvec3) FMul 227 229
             231:    7(fvec4) Load 9
             232:    7(fvec4) VectorShuffle 231 230 4 5 6 3
                              Store 9 232
             234:    7(fvec4) Load 9
             235:   12(fvec3) VectorShuffle 234 234 0 1 2
                              Store 233(vs_TEXCOORD4) 235
             237:    7(fvec4) Load 236
             238:   12(fvec3) VectorShuffle 237 237 1 1 1
             239:     27(ptr) AccessChain 23 25 26
             240:    7(fvec4) Load 239
             241:   12(fvec3) VectorShuffle 240 240 0 1 2
             242:   12(fvec3) FMul 238 241
             243:    7(fvec4) Load 57
             244:    7(fvec4) VectorShuffle 243 242 4 5 6 3
                              Store 57 244
             245:     27(ptr) AccessChain 23 25 25
             246:    7(fvec4) Load 245
             247:   12(fvec3) VectorShuffle 246 246 0 1 2
             248:    7(fvec4) Load 236
             249:   12(fvec3) VectorShuffle 248 248 0 0 0
             250:   12(fvec3) FMul 247 249
             251:    7(fvec4) Load 57
             252:   12(fvec3) VectorShuffle 251 251 0 1 2
             253:   12(fvec3) FAdd 250 252
             254:    7(fvec4) Load 57
             255:    7(fvec4) VectorShuffle 254 253 4 5 6 3
                              Store 57 255
             256:     27(ptr) AccessChain 23 25 45
             257:    7(fvec4) Load 256
             258:   12(fvec3) VectorShuffle 257 257 0 1 2
             259:    7(fvec4) Load 236
             260:   12(fvec3) VectorShuffle 259 259 2 2 2
             261:   12(fvec3) FMul 258 260
             262:    7(fvec4) Load 57
             263:   12(fvec3) VectorShuffle 262 262 0 1 2
             264:   12(fvec3) FAdd 261 263
             265:    7(fvec4) Load 57
             266:    7(fvec4) VectorShuffle 265 264 4 5 6 3
                              Store 57 266
             267:    7(fvec4) Load 57
             268:   12(fvec3) VectorShuffle 267 267 0 1 2
             269:    7(fvec4) Load 57
             270:   12(fvec3) VectorShuffle 269 269 0 1 2
             271:    6(float) Dot 268 270
                              Store 218 271
             272:    6(float) Load 218
             273:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 272
                              Store 218 273
             274:    6(float) Load 218
             275:   12(fvec3) CompositeConstruct 274 274 274
             276:    7(fvec4) Load 57
             277:   12(fvec3) VectorShuffle 276 276 0 1 2
             278:   12(fvec3) FMul 275 277
             279:    7(fvec4) Load 57
             280:    7(fvec4) VectorShuffle 279 278 4 5 6 3
                              Store 57 280
             282:    7(fvec4) Load 57
             283:   12(fvec3) VectorShuffle 282 282 0 1 2
                              Store 281(vs_TEXCOORD5) 283
             286:    7(fvec4) Load 9
             287:   12(fvec3) VectorShuffle 286 286 2 0 1
             288:    7(fvec4) Load 57
             289:   12(fvec3) VectorShuffle 288 288 1 2 0
             290:   12(fvec3) FMul 287 289
                              Store 285 290
             291:    7(fvec4) Load 9
             292:   12(fvec3) VectorShuffle 291 291 1 2 0
             293:    7(fvec4) Load 57
             294:   12(fvec3) VectorShuffle 293 293 2 0 1
             295:   12(fvec3) FMul 292 294
             296:   12(fvec3) Load 285
             297:   12(fvec3) FNegate 296
             298:   12(fvec3) FAdd 295 297
             299:    7(fvec4) Load 9
             300:    7(fvec4) VectorShuffle 299 298 4 5 6 3
                              Store 9 300
             302:    7(fvec4) Load 9
             303:   12(fvec3) VectorShuffle 302 302 0 1 2
             304:    7(fvec4) Load 236
             305:   12(fvec3) VectorShuffle 304 304 3 3 3
             306:   12(fvec3) FMul 303 305
                              Store 301(vs_TEXCOORD6) 306
             309:    7(fvec4) Load 308
                              Store 307(vs_TEXCOORD8) 309
             312:    7(fvec4) Load 311
                              Store 310(vs_TEXCOORD9) 312
             314:    313(ptr) AccessChain 186 25 182
             315:    6(float) Load 314
             316:    6(float) FNegate 315
             317:    313(ptr) AccessChain 186 25 182
                              Store 317 316
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 77

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 49 69
                              ExecutionMode 4 OriginUpperLeft
                              Name 49  "vs_TEXCOORD8"
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 16
                              MemberDecorate 12 2 Offset 32
                              MemberDecorate 12 3 Offset 48
                              MemberDecorate 12 4 Offset 64
                              MemberDecorate 12 5 Offset 80
                              MemberDecorate 12 6 Offset 96
                              MemberDecorate 12 7 Offset 112
                              MemberDecorate 12 8 Offset 128
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 0
                              MemberDecorate 30 0 Offset 0
                              MemberDecorate 30 1 Offset 8
                              Decorate 30 Block
                              Decorate 32 DescriptorSet 1
                              Decorate 32 Binding 1
                              Decorate 49(vs_TEXCOORD8) Location 0
                              Decorate 54 RelaxedPrecision
                              Decorate 57 RelaxedPrecision
                              Decorate 57 DescriptorSet 0
                              Decorate 57 Binding 1
                              Decorate 58 RelaxedPrecision
                              Decorate 61 RelaxedPrecision
                              Decorate 61 DescriptorSet 0
                              Decorate 61 Binding 0
                              Decorate 62 RelaxedPrecision
                              Decorate 67 RelaxedPrecision
                              Decorate 69 Location 0
                              Decorate 70 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 2
               8:             TypePointer Private 7(fvec2)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 4
              11:             TypeVector 6(float) 3
              12:             TypeStruct 10(fvec4) 10(fvec4) 10(fvec4) 10(fvec4) 11(fvec3) 10(fvec4) 10(fvec4) 10(fvec4) 10(fvec4)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:             TypeInt 32 1
              16:     15(int) Constant 0
              17:             TypeInt 32 0
              18:     17(int) Constant 1
              19:             TypePointer Uniform 6(float)
              22:    6(float) Constant 1056964608
              24:     17(int) Constant 0
              25:             TypePointer Private 6(float)
              27:      8(ptr) Variable Private
              30:             TypeStruct 7(fvec2) 6(float)
              31:             TypePointer Uniform 30(struct)
              32:     31(ptr) Variable Uniform
              42:     15(int) Constant 1
              48:             TypePointer Input 10(fvec4)
49(vs_TEXCOORD8):     48(ptr) Variable Input
              53:             TypePointer Private 11(fvec3)
              54:     53(ptr) Variable Private
              55:             TypeImage 6(float) 2D sampled format:Unknown
              56:             TypePointer UniformConstant 55
              57:     56(ptr) Variable UniformConstant
              59:             TypeSampler
              60:             TypePointer UniformConstant 59
              61:     60(ptr) Variable UniformConstant
              63:             TypeSampledImage 55
              68:             TypePointer Output 10(fvec4)
              69:     68(ptr) Variable Output
              73:     17(int) Constant 3
              74:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              20:     19(ptr) AccessChain 14 16 18
              21:    6(float) Load 20
              23:    6(float) FMul 21 22
              26:     25(ptr) AccessChain 9 24
                              Store 26 23
              28:     25(ptr) AccessChain 9 24
              29:    6(float) Load 28
              33:     19(ptr) AccessChain 32 16 18
              34:    6(float) Load 33
              35:    6(float) FMul 29 34
              36:     25(ptr) AccessChain 27 18
                              Store 36 35
              37:     19(ptr) AccessChain 32 16 24
              38:    6(float) Load 37
              39:     25(ptr) AccessChain 9 24
              40:    6(float) Load 39
              41:    6(float) FMul 38 40
              43:     19(ptr) AccessChain 32 42
              44:    6(float) Load 43
              45:    6(float) FAdd 41 44
              46:     25(ptr) AccessChain 27 24
                              Store 46 45
              47:    7(fvec2) Load 27
              50:   10(fvec4) Load 49(vs_TEXCOORD8)
              51:    7(fvec2) VectorShuffle 50 50 0 1
              52:    7(fvec2) FAdd 47 51
                              Store 9 52
              58:          55 Load 57
              62:          59 Load 61
              64:          63 SampledImage 58 62
              65:    7(fvec2) Load 9
              66:   10(fvec4) ImageSampleImplicitLod 64 65
              67:   11(fvec3) VectorShuffle 66 66 0 1 2
                              Store 54 67
              70:   11(fvec3) Load 54
              71:   10(fvec4) Load 69
              72:   10(fvec4) VectorShuffle 71 70 4 5 6 3
                              Store 69 72
              75:     74(ptr) AccessChain 69 73
                              Store 75 22
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 35 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 1 {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 2 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 3 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 1   xyzw        4     NONE   float   xyzw
// SV_InstanceID            0   x           5   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 3   xyz         1     NONE   float   xyz 
// TEXCOORD                 4   xyz         2     NONE   float   xyz 
// TEXCOORD                 5   xyz         3     NONE   float   xyz 
// TEXCOORD                 6   xyz         4     NONE   float   xyz 
// TEXCOORD                 7   xyz         5     NONE   float   xyz 
// TEXCOORD                 8   xyzw        6     NONE   float   xyzw
// TEXCOORD                 9   xyzw        7     NONE   float   xyzw
// SV_InstanceID            0   x           8     NONE    uint   x   
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[23], immediateIndexed
      dcl_constantbuffer CB2[1], immediateIndexed
      dcl_constantbuffer CB3[16], dynamicIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xyzw
      dcl_input v4.xyzw
      dcl_input_sgv v5.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyz
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_output o5.xyz
      dcl_output o6.xyzw
      dcl_output o7.xyzw
      dcl_output o8.x
      dcl_temps 3
   0: iadd r0.x, v5.x, cb2[0].x
   1: ishl r0.x, r0.x, l(3)
   2: mul r0.yzw, v0.yyyy, cb3[r0.x + 1].xxyz
   3: mad r0.yzw, cb3[r0.x + 0].xxyz, v0.xxxx, r0.yyzw
   4: mad r0.yzw, cb3[r0.x + 2].xxyz, v0.zzzz, r0.yyzw
   5: mad r1.xyz, cb3[r0.x + 3].xyzx, v0.wwww, r0.yzwy
   6: add r0.yzw, r0.yyzw, cb3[r0.x + 3].xxyz
   7: add o5.xyz, -r0.yzwy, cb0[4].xyzx
   8: mul r0.yzw, r1.yyyy, cb3[r0.x + 5].xxyz
   9: mad r0.yzw, cb3[r0.x + 4].xxyz, r1.xxxx, r0.yyzw
  10: mad r0.yzw, cb3[r0.x + 6].xxyz, r1.zzzz, r0.yyzw
  11: mov o1.xyz, r1.xyzx
  12: add r0.yzw, r0.yyzw, cb3[r0.x + 7].xxyz
  13: mul r1.xyzw, r0.zzzz, cb3[r0.x + 1].xyzw
  14: mad r1.xyzw, cb3[r0.x + 0].xyzw, r0.yyyy, r1.xyzw
  15: mad r1.xyzw, cb3[r0.x + 2].xyzw, r0.wwww, r1.xyzw
  16: add r1.xyzw, r1.xyzw, cb3[r0.x + 3].xyzw
  17: mul r2.xyzw, r1.yyyy, cb1[20].xyzw
  18: mad r2.xyzw, cb1[19].xyzw, r1.xxxx, r2.xyzw
  19: mad r2.xyzw, cb1[21].xyzw, r1.zzzz, r2.xyzw
  20: mad o0.xyzw, cb1[22].xyzw, r1.wwww, r2.xyzw
  21: dp3 r1.x, v1.xyzx, cb3[r0.x + 4].xyzx
  22: dp3 r1.y, v1.xyzx, cb3[r0.x + 5].xyzx
  23: dp3 r1.z, v1.xyzx, cb3[r0.x + 6].xyzx
  24: dp3 r0.y, r1.xyzx, r1.xyzx
  25: rsq r0.y, r0.y
  26: mul r0.yzw, r0.yyyy, r1.xxyz
  27: mov o2.xyz, r0.yzwy
  28: mul r1.xyz, v2.yyyy, cb3[r0.x + 1].xyzx
  29: mad r1.xyz, cb3[r0.x + 0].xyzx, v2.xxxx, r1.xyzx
  30: mad r1.xyz, cb3[r0.x + 2].xyzx, v2.zzzz, r1.xyzx
  31: dp3 r0.x, r1.xyzx, r1.xyzx
  32: rsq r0.x, r0.x
  33: mul r1.xyz, r0.xxxx, r1.xyzx
  34: mov o3.xyz, r1.xyzx
  35: mul r2.xyz, r0.wyzw, r1.yzxy
  36: mad r0.xyz, r0.zwyz, r1.zxyz, -r2.xyzx
  37: mul o4.xyz, r0.xyzx, v2.wwww
  38: mov o6.xyzw, v3.xyzw
  39: mov o7.xyzw, v4.xyzw
  40: mov o8.x, v5.x
  41: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 4 math, 2 temp registers, 1 textures
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector4 _Time at 0
}
Constant Buffer "UnityPerMaterial" (16 bytes) on slot 1 {
  Vector2 Vector2_5E0C2698 at 0
  Float Vector1_E94C06A8 at 8
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 3   xyz         1     NONE   float       
// TEXCOORD                 4   xyz         2     NONE   float       
// TEXCOORD                 5   xyz         3     NONE   float       
// TEXCOORD                 6   xyz         4     NONE   float       
// TEXCOORD                 7   xyz         5     NONE   float       
// TEXCOORD                 8   xyzw        6     NONE   float   xy  
// TEXCOORD                 9   xyzw        7     NONE   float       
// SV_InstanceID            0   x           8     NONE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[1], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v6.xy
      dcl_output o0.xyzw
      dcl_temps 2
   0: mul r0.x, cb0[0].y, l(0.500000)
   1: mul r1.y, r0.x, cb1[0].y
   2: mad r1.x, cb1[0].x, r0.x, cb1[0].z
   3: add r0.xy, r1.xyxx, v6.xyxx
   4: sample r0.xyzw, r0.xyxx, t0.xyzw, s0
   5: mov o0.xyz, r0.xyzx
   6: mov o0.w, l(0.500000)
   7: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 0 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = int(u_xlati0 << 3);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat1.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[3].xyz;
    u_xlat1 = u_xlat3.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat3.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD0;
    vs_TEXCOORD9 = in_TEXCOORD1;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec2 Vector2_5E0C2698;
uniform 	float Vector1_E94C06A8;
UNITY_LOCATION(0) uniform mediump sampler2D _Texture2DAsset_938D465B_Out;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
void main()
{
    u_xlat0.x = _Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * Vector2_5E0C2698.y;
    u_xlat1.x = Vector2_5E0C2698.x * u_xlat0.x + Vector1_E94C06A8;
    u_xlat0.xy = u_xlat1.xy + vs_TEXCOORD8.xy;
    u_xlat16_0.xyz = texture(_Texture2DAsset_938D465B_Out, u_xlat0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target0.w = 0.5;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 1 {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 2 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 3 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};

struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 unity_FogParams;
    float4 unity_FogColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_StereoScaleOffset;
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_Builtins0Array_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
    float4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};

struct UnityInstancing_PerDraw0_Type
{
    unity_Builtins0Array_Type unity_Builtins0Array[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD1 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]];
    float4 TEXCOORD9 [[ user(TEXCOORD9) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(0) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(1) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(2) ]],
    const constant unity_Builtins0Array_Type* UnityInstancing_PerDraw0 [[ buffer(3) ]],
    uint mtl_InstanceID [[ instance_id ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float3 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 0x3;
    u_xlat3.xyz = input.POSITION0.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, input.POSITION0.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, input.POSITION0.zzz, u_xlat3.xyz);
    u_xlat1.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz, input.POSITION0.www, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    output.TEXCOORD7.xyz = (-u_xlat3.xyz) + UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat3.xyz = u_xlat1.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz, u_xlat1.zzz, u_xlat3.xyz);
    output.TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[3].xyz;
    u_xlat1 = u_xlat3.yyyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0], u_xlat3.xxxx, u_xlat1);
    u_xlat1 = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2], u_xlat3.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.x = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
    output.TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat1.xyz = input.TANGENT0.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, input.TANGENT0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, input.TANGENT0.zzz, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat3.yzx, u_xlat1.zxy, (-u_xlat2.xyz));
    output.TEXCOORD6.xyz = u_xlat0.xyz * input.TANGENT0.www;
    output.TEXCOORD8 = input.TEXCOORD0;
    output.TEXCOORD9 = input.TEXCOORD1;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector4 _Time at 0
}
Constant Buffer "UnityPerMaterial" (12 bytes) on slot 1 {
  Vector2 Vector2_5E0C2698 at 0
  Float Vector1_E94C06A8 at 8
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};

struct UnityPerMaterial_Type
{
    float2 Vector2_5E0C2698;
    float Vector1_E94C06A8;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    sampler sampler_Texture2DAsset_938D465B_Out [[ sampler (0) ]],
    texture2d<float, access::sample > _Texture2DAsset_938D465B_Out [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float2 u_xlat1;
    u_xlat0.x = UnityPerCamera._Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * UnityPerMaterial.Vector2_5E0C2698.xyxx.y;
    u_xlat1.x = fma(UnityPerMaterial.Vector2_5E0C2698.xyxx.x, u_xlat0.x, UnityPerMaterial.Vector1_E94C06A8);
    u_xlat0.xy = u_xlat1.xy + input.TEXCOORD8.xy;
    u_xlat0.xyz = _Texture2DAsset_938D465B_Out.sample(sampler_Texture2DAsset_938D465B_Out, u_xlat0.xy).xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 0.5;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 0 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec3 vs_TEXCOORD7;
out vec4 vs_TEXCOORD8;
out vec4 vs_TEXCOORD9;
flat out uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat1.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[3].xyz;
    u_xlat1 = u_xlat3.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat3.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD0;
    vs_TEXCOORD9 = in_TEXCOORD1;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec2 Vector2_5E0C2698;
uniform 	float Vector1_E94C06A8;
UNITY_LOCATION(0) uniform  sampler2D _Texture2DAsset_938D465B_Out;
in  vec4 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec4 u_xlat10_0;
vec2 u_xlat1;
void main()
{
    u_xlat0.x = _Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * Vector2_5E0C2698.y;
    u_xlat1.x = Vector2_5E0C2698.x * u_xlat0.x + Vector1_E94C06A8;
    u_xlat0.xy = u_xlat1.xy + vs_TEXCOORD8.xy;
    u_xlat10_0 = texture(_Texture2DAsset_938D465B_Out, u_xlat0.xy);
    SV_Target0.xyz = u_xlat10_0.xyz;
    SV_Target0.w = 0.5;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Specialization constant id: 0 name: "UNITY_RUNTIME_INSTANCING_ARRAY_SIZE", used in: Vertex 

Set 2D Texture "_Texture2DAsset_938D465B_Out" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 3, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on set: 1, binding: 4, used in: Vertex  {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}
Constant Buffer "UnityPerCamera" (144 bytes) on set: 1, binding: 0, used in: Vertex Fragment  {
  Vector4 _Time at 0
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on set: 1, binding: 2, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "UnityPerMaterial" (12 bytes) on set: 1, binding: 1, used in: Fragment  {
  Float Vector1_E94C06A8 at 8
  Vector2 Vector2_5E0C2698 at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 357

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 10 29 94 133 206 217 260 262 317 336 341 342 344 345 348
                              Name 94  "vs_TEXCOORD7"
                              Name 133  "vs_TEXCOORD3"
                              Name 260  "vs_TEXCOORD4"
                              Name 317  "vs_TEXCOORD5"
                              Name 336  "vs_TEXCOORD6"
                              Name 341  "vs_TEXCOORD8"
                              Name 344  "vs_TEXCOORD9"
                              Decorate 10 BuiltIn InstanceIndex
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 4
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 3
                              Decorate 29 Location 0
                              Decorate 34 ArrayStride 16
                              Decorate 35 ArrayStride 16
                              MemberDecorate 36 0 Offset 0
                              MemberDecorate 36 1 Offset 64
                              Decorate 37 SpecId 0
                              Decorate 38 ArrayStride 128
                              MemberDecorate 39 0 Offset 0
                              Decorate 39 Block
                              Decorate 41 DescriptorSet 1
                              Decorate 41 Binding 4
                              Decorate 94(vs_TEXCOORD7) Location 5
                              MemberDecorate 97 0 Offset 0
                              MemberDecorate 97 1 Offset 16
                              MemberDecorate 97 2 Offset 32
                              MemberDecorate 97 3 Offset 48
                              MemberDecorate 97 4 Offset 64
                              MemberDecorate 97 5 Offset 80
                              MemberDecorate 97 6 Offset 96
                              MemberDecorate 97 7 Offset 112
                              MemberDecorate 97 8 Offset 128
                              Decorate 97 Block
                              Decorate 99 DescriptorSet 1
                              Decorate 99 Binding 0
                              Decorate 133(vs_TEXCOORD3) Location 1
                              Decorate 177 ArrayStride 16
                              Decorate 178 ArrayStride 16
                              Decorate 179 ArrayStride 16
                              Decorate 180 ArrayStride 16
                              MemberDecorate 181 0 Offset 0
                              MemberDecorate 181 1 Offset 16
                              MemberDecorate 181 2 Offset 32
                              MemberDecorate 181 3 Offset 48
                              MemberDecorate 181 4 Offset 64
                              MemberDecorate 181 5 Offset 80
                              MemberDecorate 181 6 Offset 96
                              MemberDecorate 181 7 Offset 112
                              MemberDecorate 181 8 Offset 176
                              MemberDecorate 181 9 Offset 240
                              MemberDecorate 181 10 Offset 304
                              MemberDecorate 181 11 Offset 368
                              MemberDecorate 181 12 Offset 384
                              MemberDecorate 181 13 Offset 400
                              Decorate 181 Block
                              Decorate 183 DescriptorSet 1
                              Decorate 183 Binding 2
                              MemberDecorate 204 0 BuiltIn Position
                              MemberDecorate 204 1 BuiltIn PointSize
                              MemberDecorate 204 2 BuiltIn ClipDistance
                              Decorate 204 Block
                              Decorate 217 Location 1
                              Decorate 260(vs_TEXCOORD4) Location 2
                              Decorate 262 Location 2
                              Decorate 317(vs_TEXCOORD5) Location 3
                              Decorate 336(vs_TEXCOORD6) Location 4
                              Decorate 341(vs_TEXCOORD8) Location 0
                              Decorate 342 Location 3
                              Decorate 344(vs_TEXCOORD9) Location 6
                              Decorate 345 Location 4
                              Decorate 348 Flat
                              Decorate 348 Location 7
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeInt 32 1
               7:             TypePointer Private 6(int)
               8:      7(ptr) Variable Private
               9:             TypePointer Input 6(int)
              10:      9(ptr) Variable Input
              12:             TypeStruct 6(int) 6(int)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:      6(int) Constant 0
              16:             TypePointer Uniform 6(int)
              21:      6(int) Constant 3
              23:             TypeFloat 32
              24:             TypeVector 23(float) 3
              25:             TypePointer Private 24(fvec3)
              26:     25(ptr) Variable Private
              27:             TypeVector 23(float) 4
              28:             TypePointer Input 27(fvec4)
              29:     28(ptr) Variable Input
              32:             TypeInt 32 0
              33:     32(int) Constant 4
              34:             TypeArray 27(fvec4) 33
              35:             TypeArray 27(fvec4) 33
              36:             TypeStruct 34 35
              37:      6(int) SpecConstant 2
              38:             TypeArray 36(struct) 37
              39:             TypeStruct 38
              40:             TypePointer Uniform 39(struct)
              41:     40(ptr) Variable Uniform
              43:      6(int) Constant 8
              45:      6(int) Constant 1
              46:             TypePointer Uniform 27(fvec4)
              63:      6(int) Constant 2
              72:             TypePointer Private 27(fvec4)
              73:     72(ptr) Variable Private
              93:             TypePointer Output 24(fvec3)
94(vs_TEXCOORD7):     93(ptr) Variable Output
              97:             TypeStruct 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 24(fvec3) 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4)
              98:             TypePointer Uniform 97(struct)
              99:     98(ptr) Variable Uniform
             100:      6(int) Constant 4
             101:             TypePointer Uniform 24(fvec3)
133(vs_TEXCOORD3):     93(ptr) Variable Output
             174:     72(ptr) Variable Private
             177:             TypeArray 27(fvec4) 33
             178:             TypeArray 27(fvec4) 33
             179:             TypeArray 27(fvec4) 33
             180:             TypeArray 27(fvec4) 33
             181:             TypeStruct 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 177 178 179 180 27(fvec4) 6(int) 27(fvec4)
             182:             TypePointer Uniform 181(struct)
             183:    182(ptr) Variable Uniform
             184:      6(int) Constant 10
             202:     32(int) Constant 1
             203:             TypeArray 23(float) 202
             204:             TypeStruct 27(fvec4) 23(float) 203
             205:             TypePointer Output 204(struct)
             206:    205(ptr) Variable Output
             214:             TypePointer Output 27(fvec4)
             216:             TypePointer Input 24(fvec3)
             217:    216(ptr) Variable Input
             225:     32(int) Constant 0
             226:             TypePointer Private 23(float)
             243:     32(int) Constant 2
260(vs_TEXCOORD4):     93(ptr) Variable Output
             262:     28(ptr) Variable Input
             299:     25(ptr) Variable Private
317(vs_TEXCOORD5):     93(ptr) Variable Output
336(vs_TEXCOORD6):     93(ptr) Variable Output
341(vs_TEXCOORD8):    214(ptr) Variable Output
             342:     28(ptr) Variable Input
344(vs_TEXCOORD9):    214(ptr) Variable Output
             345:     28(ptr) Variable Input
             347:             TypePointer Output 32(int)
             348:    347(ptr) Variable Output
             351:             TypePointer Output 23(float)
               4:           2 Function None 3
               5:             Label
              11:      6(int) Load 10
              17:     16(ptr) AccessChain 14 15
              18:      6(int) Load 17
              19:      6(int) IAdd 11 18
                              Store 8 19
              20:      6(int) Load 8
              22:      6(int) ShiftLeftLogical 20 21
                              Store 8 22
              30:   27(fvec4) Load 29
              31:   24(fvec3) VectorShuffle 30 30 1 1 1
              42:      6(int) Load 8
              44:      6(int) SDiv 42 43
              47:     46(ptr) AccessChain 41 15 44 15 45
              48:   27(fvec4) Load 47
              49:   24(fvec3) VectorShuffle 48 48 0 1 2
              50:   24(fvec3) FMul 31 49
                              Store 26 50
              51:      6(int) Load 8
              52:      6(int) SDiv 51 43
              53:     46(ptr) AccessChain 41 15 52 15 15
              54:   27(fvec4) Load 53
              55:   24(fvec3) VectorShuffle 54 54 0 1 2
              56:   27(fvec4) Load 29
              57:   24(fvec3) VectorShuffle 56 56 0 0 0
              58:   24(fvec3) FMul 55 57
              59:   24(fvec3) Load 26
              60:   24(fvec3) FAdd 58 59
                              Store 26 60
              61:      6(int) Load 8
              62:      6(int) SDiv 61 43
              64:     46(ptr) AccessChain 41 15 62 15 63
              65:   27(fvec4) Load 64
              66:   24(fvec3) VectorShuffle 65 65 0 1 2
              67:   27(fvec4) Load 29
              68:   24(fvec3) VectorShuffle 67 67 2 2 2
              69:   24(fvec3) FMul 66 68
              70:   24(fvec3) Load 26
              71:   24(fvec3) FAdd 69 70
                              Store 26 71
              74:      6(int) Load 8
              75:      6(int) SDiv 74 43
              76:     46(ptr) AccessChain 41 15 75 15 21
              77:   27(fvec4) Load 76
              78:   24(fvec3) VectorShuffle 77 77 0 1 2
              79:   27(fvec4) Load 29
              80:   24(fvec3) VectorShuffle 79 79 3 3 3
              81:   24(fvec3) FMul 78 80
              82:   24(fvec3) Load 26
              83:   24(fvec3) FAdd 81 82
              84:   27(fvec4) Load 73
              85:   27(fvec4) VectorShuffle 84 83 4 5 6 3
                              Store 73 85
              86:   24(fvec3) Load 26
              87:      6(int) Load 8
              88:      6(int) SDiv 87 43
              89:     46(ptr) AccessChain 41 15 88 15 21
              90:   27(fvec4) Load 89
              91:   24(fvec3) VectorShuffle 90 90 0 1 2
              92:   24(fvec3) FAdd 86 91
                              Store 26 92
              95:   24(fvec3) Load 26
              96:   24(fvec3) FNegate 95
             102:    101(ptr) AccessChain 99 100
             103:   24(fvec3) Load 102
             104:   24(fvec3) FAdd 96 103
                              Store 94(vs_TEXCOORD7) 104
             105:   27(fvec4) Load 73
             106:   24(fvec3) VectorShuffle 105 105 1 1 1
             107:      6(int) Load 8
             108:      6(int) SDiv 107 43
             109:     46(ptr) AccessChain 41 15 108 45 45
             110:   27(fvec4) Load 109
             111:   24(fvec3) VectorShuffle 110 110 0 1 2
             112:   24(fvec3) FMul 106 111
                              Store 26 112
             113:      6(int) Load 8
             114:      6(int) SDiv 113 43
             115:     46(ptr) AccessChain 41 15 114 45 15
             116:   27(fvec4) Load 115
             117:   24(fvec3) VectorShuffle 116 116 0 1 2
             118:   27(fvec4) Load 73
             119:   24(fvec3) VectorShuffle 118 118 0 0 0
             120:   24(fvec3) FMul 117 119
             121:   24(fvec3) Load 26
             122:   24(fvec3) FAdd 120 121
                              Store 26 122
             123:      6(int) Load 8
             124:      6(int) SDiv 123 43
             125:     46(ptr) AccessChain 41 15 124 45 63
             126:   27(fvec4) Load 125
             127:   24(fvec3) VectorShuffle 126 126 0 1 2
             128:   27(fvec4) Load 73
             129:   24(fvec3) VectorShuffle 128 128 2 2 2
             130:   24(fvec3) FMul 127 129
             131:   24(fvec3) Load 26
             132:   24(fvec3) FAdd 130 131
                              Store 26 132
             134:   27(fvec4) Load 73
             135:   24(fvec3) VectorShuffle 134 134 0 1 2
                              Store 133(vs_TEXCOORD3) 135
             136:   24(fvec3) Load 26
             137:      6(int) Load 8
             138:      6(int) SDiv 137 43
             139:     46(ptr) AccessChain 41 15 138 45 21
             140:   27(fvec4) Load 139
             141:   24(fvec3) VectorShuffle 140 140 0 1 2
             142:   24(fvec3) FAdd 136 141
                              Store 26 142
             143:   24(fvec3) Load 26
             144:   27(fvec4) VectorShuffle 143 143 1 1 1 1
             145:      6(int) Load 8
             146:      6(int) SDiv 145 43
             147:     46(ptr) AccessChain 41 15 146 15 45
             148:   27(fvec4) Load 147
             149:   27(fvec4) FMul 144 148
                              Store 73 149
             150:      6(int) Load 8
             151:      6(int) SDiv 150 43
             152:     46(ptr) AccessChain 41 15 151 15 15
             153:   27(fvec4) Load 152
             154:   24(fvec3) Load 26
             155:   27(fvec4) VectorShuffle 154 154 0 0 0 0
             156:   27(fvec4) FMul 153 155
             157:   27(fvec4) Load 73
             158:   27(fvec4) FAdd 156 157
                              Store 73 158
             159:      6(int) Load 8
             160:      6(int) SDiv 159 43
             161:     46(ptr) AccessChain 41 15 160 15 63
             162:   27(fvec4) Load 161
             163:   24(fvec3) Load 26
             164:   27(fvec4) VectorShuffle 163 163 2 2 2 2
             165:   27(fvec4) FMul 162 164
             166:   27(fvec4) Load 73
             167:   27(fvec4) FAdd 165 166
                              Store 73 167
             168:   27(fvec4) Load 73
             169:      6(int) Load 8
             170:      6(int) SDiv 169 43
             171:     46(ptr) AccessChain 41 15 170 15 21
             172:   27(fvec4) Load 171
             173:   27(fvec4) FAdd 168 172
                              Store 73 173
             175:   27(fvec4) Load 73
             176:   27(fvec4) VectorShuffle 175 175 1 1 1 1
             185:     46(ptr) AccessChain 183 184 45
             186:   27(fvec4) Load 185
             187:   27(fvec4) FMul 176 186
                              Store 174 187
             188:     46(ptr) AccessChain 183 184 15
             189:   27(fvec4) Load 188
             190:   27(fvec4) Load 73
             191:   27(fvec4) VectorShuffle 190 190 0 0 0 0
             192:   27(fvec4) FMul 189 191
             193:   27(fvec4) Load 174
             194:   27(fvec4) FAdd 192 193
                              Store 174 194
             195:     46(ptr) AccessChain 183 184 63
             196:   27(fvec4) Load 195
             197:   27(fvec4) Load 73
             198:   27(fvec4) VectorShuffle 197 197 2 2 2 2
             199:   27(fvec4) FMul 196 198
             200:   27(fvec4) Load 174
             201:   27(fvec4) FAdd 199 200
                              Store 174 201
             207:     46(ptr) AccessChain 183 184 21
             208:   27(fvec4) Load 207
             209:   27(fvec4) Load 73
             210:   27(fvec4) VectorShuffle 209 209 3 3 3 3
             211:   27(fvec4) FMul 208 210
             212:   27(fvec4) Load 174
             213:   27(fvec4) FAdd 211 212
             215:    214(ptr) AccessChain 206 15
                              Store 215 213
             218:   24(fvec3) Load 217
             219:      6(int) Load 8
             220:      6(int) SDiv 219 43
             221:     46(ptr) AccessChain 41 15 220 45 15
             222:   27(fvec4) Load 221
             223:   24(fvec3) VectorShuffle 222 222 0 1 2
             224:   23(float) Dot 218 223
             227:    226(ptr) AccessChain 73 225
                              Store 227 224
             228:   24(fvec3) Load 217
             229:      6(int) Load 8
             230:      6(int) SDiv 229 43
             231:     46(ptr) AccessChain 41 15 230 45 45
             232:   27(fvec4) Load 231
             233:   24(fvec3) VectorShuffle 232 232 0 1 2
             234:   23(float) Dot 228 233
             235:    226(ptr) AccessChain 73 202
                              Store 235 234
             236:   24(fvec3) Load 217
             237:      6(int) Load 8
             238:      6(int) SDiv 237 43
             239:     46(ptr) AccessChain 41 15 238 45 63
             240:   27(fvec4) Load 239
             241:   24(fvec3) VectorShuffle 240 240 0 1 2
             242:   23(float) Dot 236 241
             244:    226(ptr) AccessChain 73 243
                              Store 244 242
             245:   27(fvec4) Load 73
             246:   24(fvec3) VectorShuffle 245 245 0 1 2
             247:   27(fvec4) Load 73
             248:   24(fvec3) VectorShuffle 247 247 0 1 2
             249:   23(float) Dot 246 248
             250:    226(ptr) AccessChain 26 225
                              Store 250 249
             251:    226(ptr) AccessChain 26 225
             252:   23(float) Load 251
             253:   23(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 252
             254:    226(ptr) AccessChain 26 225
                              Store 254 253
             255:   24(fvec3) Load 26
             256:   24(fvec3) VectorShuffle 255 255 0 0 0
             257:   27(fvec4) Load 73
             258:   24(fvec3) VectorShuffle 257 257 0 1 2
             259:   24(fvec3) FMul 256 258
                              Store 26 259
             261:   24(fvec3) Load 26
                              Store 260(vs_TEXCOORD4) 261
             263:   27(fvec4) Load 262
             264:   24(fvec3) VectorShuffle 263 263 1 1 1
             265:      6(int) Load 8
             266:      6(int) SDiv 265 43
             267:     46(ptr) AccessChain 41 15 266 15 45
             268:   27(fvec4) Load 267
             269:   24(fvec3) VectorShuffle 268 268 0 1 2
             270:   24(fvec3) FMul 264 269
             271:   27(fvec4) Load 73
             272:   27(fvec4) VectorShuffle 271 270 4 5 6 3
                              Store 73 272
             273:      6(int) Load 8
             274:      6(int) SDiv 273 43
             275:     46(ptr) AccessChain 41 15 274 15 15
             276:   27(fvec4) Load 275
             277:   24(fvec3) VectorShuffle 276 276 0 1 2
             278:   27(fvec4) Load 262
             279:   24(fvec3) VectorShuffle 278 278 0 0 0
             280:   24(fvec3) FMul 277 279
             281:   27(fvec4) Load 73
             282:   24(fvec3) VectorShuffle 281 281 0 1 2
             283:   24(fvec3) FAdd 280 282
             284:   27(fvec4) Load 73
             285:   27(fvec4) VectorShuffle 284 283 4 5 6 3
                              Store 73 285
             286:      6(int) Load 8
             287:      6(int) SDiv 286 43
             288:     46(ptr) AccessChain 41 15 287 15 63
             289:   27(fvec4) Load 288
             290:   24(fvec3) VectorShuffle 289 289 0 1 2
             291:   27(fvec4) Load 262
             292:   24(fvec3) VectorShuffle 291 291 2 2 2
             293:   24(fvec3) FMul 290 292
             294:   27(fvec4) Load 73
             295:   24(fvec3) VectorShuffle 294 294 0 1 2
             296:   24(fvec3) FAdd 293 295
             297:   27(fvec4) Load 73
             298:   27(fvec4) VectorShuffle 297 296 4 5 6 3
                              Store 73 298
             300:   27(fvec4) Load 73
             301:   24(fvec3) VectorShuffle 300 300 0 1 2
             302:   27(fvec4) Load 73
             303:   24(fvec3) VectorShuffle 302 302 0 1 2
             304:   23(float) Dot 301 303
             305:    226(ptr) AccessChain 299 225
                              Store 305 304
             306:    226(ptr) AccessChain 299 225
             307:   23(float) Load 306
             308:   23(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 307
             309:    226(ptr) AccessChain 299 225
                              Store 309 308
             310:   24(fvec3) Load 299
             311:   24(fvec3) VectorShuffle 310 310 0 0 0
             312:   27(fvec4) Load 73
             313:   24(fvec3) VectorShuffle 312 312 0 1 2
             314:   24(fvec3) FMul 311 313
             315:   27(fvec4) Load 73
             316:   27(fvec4) VectorShuffle 315 314 4 5 6 3
                              Store 73 316
             318:   27(fvec4) Load 73
             319:   24(fvec3) VectorShuffle 318 318 0 1 2
                              Store 317(vs_TEXCOORD5) 319
             320:   24(fvec3) Load 26
             321:   24(fvec3) VectorShuffle 320 320 2 0 1
             322:   27(fvec4) Load 73
             323:   24(fvec3) VectorShuffle 322 322 1 2 0
             324:   24(fvec3) FMul 321 323
             325:   27(fvec4) Load 174
             326:   27(fvec4) VectorShuffle 325 324 4 5 6 3
                              Store 174 326
             327:   24(fvec3) Load 26
             328:   24(fvec3) VectorShuffle 327 327 1 2 0
             329:   27(fvec4) Load 73
             330:   24(fvec3) VectorShuffle 329 329 2 0 1
             331:   24(fvec3) FMul 328 330
             332:   27(fvec4) Load 174
             333:   24(fvec3) VectorShuffle 332 332 0 1 2
             334:   24(fvec3) FNegate 333
             335:   24(fvec3) FAdd 331 334
                              Store 299 335
             337:   24(fvec3) Load 299
             338:   27(fvec4) Load 262
             339:   24(fvec3) VectorShuffle 338 338 3 3 3
             340:   24(fvec3) FMul 337 339
                              Store 336(vs_TEXCOORD6) 340
             343:   27(fvec4) Load 342
                              Store 341(vs_TEXCOORD8) 343
             346:   27(fvec4) Load 345
                              Store 344(vs_TEXCOORD9) 346
             349:      6(int) Load 10
             350:     32(int) Bitcast 349
                              Store 348 350
             352:    351(ptr) AccessChain 206 15 202
             353:   23(float) Load 352
             354:   23(float) FNegate 353
             355:    351(ptr) AccessChain 206 15 202
                              Store 355 354
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 77

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 49 69
                              ExecutionMode 4 OriginUpperLeft
                              Name 49  "vs_TEXCOORD8"
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 16
                              MemberDecorate 12 2 Offset 32
                              MemberDecorate 12 3 Offset 48
                              MemberDecorate 12 4 Offset 64
                              MemberDecorate 12 5 Offset 80
                              MemberDecorate 12 6 Offset 96
                              MemberDecorate 12 7 Offset 112
                              MemberDecorate 12 8 Offset 128
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 0
                              MemberDecorate 30 0 Offset 0
                              MemberDecorate 30 1 Offset 8
                              Decorate 30 Block
                              Decorate 32 DescriptorSet 1
                              Decorate 32 Binding 1
                              Decorate 49(vs_TEXCOORD8) Location 0
                              Decorate 54 RelaxedPrecision
                              Decorate 57 RelaxedPrecision
                              Decorate 57 DescriptorSet 0
                              Decorate 57 Binding 1
                              Decorate 58 RelaxedPrecision
                              Decorate 61 RelaxedPrecision
                              Decorate 61 DescriptorSet 0
                              Decorate 61 Binding 0
                              Decorate 62 RelaxedPrecision
                              Decorate 67 RelaxedPrecision
                              Decorate 69 Location 0
                              Decorate 70 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 2
               8:             TypePointer Private 7(fvec2)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 4
              11:             TypeVector 6(float) 3
              12:             TypeStruct 10(fvec4) 10(fvec4) 10(fvec4) 10(fvec4) 11(fvec3) 10(fvec4) 10(fvec4) 10(fvec4) 10(fvec4)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:             TypeInt 32 1
              16:     15(int) Constant 0
              17:             TypeInt 32 0
              18:     17(int) Constant 1
              19:             TypePointer Uniform 6(float)
              22:    6(float) Constant 1056964608
              24:     17(int) Constant 0
              25:             TypePointer Private 6(float)
              27:      8(ptr) Variable Private
              30:             TypeStruct 7(fvec2) 6(float)
              31:             TypePointer Uniform 30(struct)
              32:     31(ptr) Variable Uniform
              42:     15(int) Constant 1
              48:             TypePointer Input 10(fvec4)
49(vs_TEXCOORD8):     48(ptr) Variable Input
              53:             TypePointer Private 11(fvec3)
              54:     53(ptr) Variable Private
              55:             TypeImage 6(float) 2D sampled format:Unknown
              56:             TypePointer UniformConstant 55
              57:     56(ptr) Variable UniformConstant
              59:             TypeSampler
              60:             TypePointer UniformConstant 59
              61:     60(ptr) Variable UniformConstant
              63:             TypeSampledImage 55
              68:             TypePointer Output 10(fvec4)
              69:     68(ptr) Variable Output
              73:     17(int) Constant 3
              74:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              20:     19(ptr) AccessChain 14 16 18
              21:    6(float) Load 20
              23:    6(float) FMul 21 22
              26:     25(ptr) AccessChain 9 24
                              Store 26 23
              28:     25(ptr) AccessChain 9 24
              29:    6(float) Load 28
              33:     19(ptr) AccessChain 32 16 18
              34:    6(float) Load 33
              35:    6(float) FMul 29 34
              36:     25(ptr) AccessChain 27 18
                              Store 36 35
              37:     19(ptr) AccessChain 32 16 24
              38:    6(float) Load 37
              39:     25(ptr) AccessChain 9 24
              40:    6(float) Load 39
              41:    6(float) FMul 38 40
              43:     19(ptr) AccessChain 32 42
              44:    6(float) Load 43
              45:    6(float) FAdd 41 44
              46:     25(ptr) AccessChain 27 24
                              Store 46 45
              47:    7(fvec2) Load 27
              50:   10(fvec4) Load 49(vs_TEXCOORD8)
              51:    7(fvec2) VectorShuffle 50 50 0 1
              52:    7(fvec2) FAdd 47 51
                              Store 9 52
              58:          55 Load 57
              62:          59 Load 61
              64:          63 SampledImage 58 62
              65:    7(fvec2) Load 9
              66:   10(fvec4) ImageSampleImplicitLod 64 65
              67:   11(fvec3) VectorShuffle 66 66 0 1 2
                              Store 54 67
              70:   11(fvec3) Load 54
              71:   10(fvec4) Load 69
              72:   10(fvec4) VectorShuffle 71 70 4 5 6 3
                              Store 69 72
              75:     74(ptr) AccessChain 69 73
                              Store 75 22
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 33 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerDraw" (368 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 304
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 1   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 3   xyz         1     NONE   float   xyz 
// TEXCOORD                 4   xyz         2     NONE   float   xyz 
// TEXCOORD                 5   xyz         3     NONE   float   xyz 
// TEXCOORD                 6   xyz         4     NONE   float   xyz 
// TEXCOORD                 7   xyz         5     NONE   float   xyz 
// TEXCOORD                 8   xyzw        6     NONE   float   xyzw
// TEXCOORD                 9   xyzw        7     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[8], immediateIndexed
      dcl_constantbuffer CB2[23], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xyzw
      dcl_input v4.xyzw
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyz
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_output o5.xyz
      dcl_output o6.xyzw
      dcl_output o7.xyzw
      dcl_temps 3
   0: mul r0.xyz, v0.yyyy, cb1[1].xyzx
   1: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
   2: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
   3: mad r1.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   4: add r0.xyz, r0.xyzx, cb1[3].xyzx
   5: add o5.xyz, -r0.xyzx, cb0[4].xyzx
   6: mul r0.xyz, r1.yyyy, cb1[5].xyzx
   7: mad r0.xyz, cb1[4].xyzx, r1.xxxx, r0.xyzx
   8: mad r0.xyz, cb1[6].xyzx, r1.zzzz, r0.xyzx
   9: mov o1.xyz, r1.xyzx
  10: add r0.xyz, r0.xyzx, cb1[7].xyzx
  11: mul r1.xyzw, r0.yyyy, cb1[1].xyzw
  12: mad r1.xyzw, cb1[0].xyzw, r0.xxxx, r1.xyzw
  13: mad r0.xyzw, cb1[2].xyzw, r0.zzzz, r1.xyzw
  14: add r0.xyzw, r0.xyzw, cb1[3].xyzw
  15: mul r1.xyzw, r0.yyyy, cb2[20].xyzw
  16: mad r1.xyzw, cb2[19].xyzw, r0.xxxx, r1.xyzw
  17: mad r1.xyzw, cb2[21].xyzw, r0.zzzz, r1.xyzw
  18: mad o0.xyzw, cb2[22].xyzw, r0.wwww, r1.xyzw
  19: dp3 r0.x, v1.xyzx, cb1[4].xyzx
  20: dp3 r0.y, v1.xyzx, cb1[5].xyzx
  21: dp3 r0.z, v1.xyzx, cb1[6].xyzx
  22: dp3 r0.w, r0.xyzx, r0.xyzx
  23: rsq r0.w, r0.w
  24: mul r0.xyz, r0.wwww, r0.xyzx
  25: mov o2.xyz, r0.xyzx
  26: mul r1.xyz, v2.yyyy, cb1[1].xyzx
  27: mad r1.xyz, cb1[0].xyzx, v2.xxxx, r1.xyzx
  28: mad r1.xyz, cb1[2].xyzx, v2.zzzz, r1.xyzx
  29: dp3 r0.w, r1.xyzx, r1.xyzx
  30: rsq r0.w, r0.w
  31: mul r1.xyz, r0.wwww, r1.xyzx
  32: mov o3.xyz, r1.xyzx
  33: mul r2.xyz, r0.zxyz, r1.yzxy
  34: mad r0.xyz, r0.yzxy, r1.zxyz, -r2.xyzx
  35: mul o4.xyz, r0.xyzx, v2.wwww
  36: mov o6.xyzw, v3.xyzw
  37: mov o7.xyzw, v4.xyzw
  38: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 4 math, 2 temp registers, 1 textures
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector4 _Time at 0
}
Constant Buffer "UnityPerMaterial" (16 bytes) on slot 1 {
  Vector2 Vector2_5E0C2698 at 0
  Float Vector1_E94C06A8 at 8
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 3   xyz         1     NONE   float       
// TEXCOORD                 4   xyz         2     NONE   float       
// TEXCOORD                 5   xyz         3     NONE   float       
// TEXCOORD                 6   xyz         4     NONE   float       
// TEXCOORD                 7   xyz         5     NONE   float       
// TEXCOORD                 8   xyzw        6     NONE   float   xy  
// TEXCOORD                 9   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[1], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v6.xy
      dcl_output o0.xyzw
      dcl_temps 2
   0: mul r0.x, cb0[0].y, l(0.500000)
   1: mul r1.y, r0.x, cb1[0].y
   2: mad r1.x, cb1[0].x, r0.x, cb1[0].z
   3: add r0.xy, r1.xyxx, v6.xyxx
   4: sample r0.xyzw, r0.xyxx, t0.xyzw, s0
   5: mov o0.xyz, r0.xyzx
   6: mov o0.w, l(0.500000)
   7: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD0;
    vs_TEXCOORD9 = in_TEXCOORD1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec2 Vector2_5E0C2698;
uniform 	float Vector1_E94C06A8;
uniform lowp sampler2D _Texture2DAsset_938D465B_Out;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
vec2 u_xlat1;
void main()
{
    u_xlat0.x = _Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * Vector2_5E0C2698.y;
    u_xlat1.x = Vector2_5E0C2698.x * u_xlat0.x + Vector1_E94C06A8;
    u_xlat0.xy = u_xlat1.xy + vs_TEXCOORD8.xy;
    u_xlat10_0.xyz = texture2D(_Texture2DAsset_938D465B_Out, u_xlat0.xy).xyz;
    SV_Target0.xyz = u_xlat10_0.xyz;
    SV_Target0.w = 0.5;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD0;
    vs_TEXCOORD9 = in_TEXCOORD1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec2 Vector2_5E0C2698;
uniform 	float Vector1_E94C06A8;
UNITY_LOCATION(0) uniform mediump sampler2D _Texture2DAsset_938D465B_Out;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
void main()
{
    u_xlat0.x = _Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * Vector2_5E0C2698.y;
    u_xlat1.x = Vector2_5E0C2698.x * u_xlat0.x + Vector1_E94C06A8;
    u_xlat0.xy = u_xlat1.xy + vs_TEXCOORD8.xy;
    u_xlat16_0.xyz = texture(_Texture2DAsset_938D465B_Out, u_xlat0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target0.w = 0.5;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerDraw" (368 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};

struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_LightData;
    float4 unity_LightIndices[2];
    float4 unity_SpecCube0_HDR;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
};

struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 unity_FogParams;
    float4 unity_FogColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_StereoScaleOffset;
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD1 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]];
    float4 TEXCOORD9 [[ user(TEXCOORD9) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(2) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.TEXCOORD7.xyz = (-u_xlat0.xyz) + UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat0.xyz = u_xlat1.yyy * UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz, u_xlat1.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz, u_xlat1.zzz, u_xlat0.xyz);
    output.TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat1.xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    output.TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat0.yzx, u_xlat1.zxy, (-u_xlat2.xyz));
    output.TEXCOORD6.xyz = u_xlat0.xyz * input.TANGENT0.www;
    output.TEXCOORD8 = input.TEXCOORD0;
    output.TEXCOORD9 = input.TEXCOORD1;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector4 _Time at 0
}
Constant Buffer "UnityPerMaterial" (12 bytes) on slot 1 {
  Vector2 Vector2_5E0C2698 at 0
  Float Vector1_E94C06A8 at 8
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};

struct UnityPerMaterial_Type
{
    float2 Vector2_5E0C2698;
    float Vector1_E94C06A8;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    sampler sampler_Texture2DAsset_938D465B_Out [[ sampler (0) ]],
    texture2d<float, access::sample > _Texture2DAsset_938D465B_Out [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float2 u_xlat1;
    u_xlat0.x = UnityPerCamera._Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * UnityPerMaterial.Vector2_5E0C2698.xyxx.y;
    u_xlat1.x = fma(UnityPerMaterial.Vector2_5E0C2698.xyxx.x, u_xlat0.x, UnityPerMaterial.Vector1_E94C06A8);
    u_xlat0.xy = u_xlat1.xy + input.TEXCOORD8.xy;
    u_xlat0.xyz = _Texture2DAsset_938D465B_Out.sample(sampler_Texture2DAsset_938D465B_Out, u_xlat0.xy).xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 0.5;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec3 vs_TEXCOORD7;
out vec4 vs_TEXCOORD8;
out vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD0;
    vs_TEXCOORD9 = in_TEXCOORD1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec2 Vector2_5E0C2698;
uniform 	float Vector1_E94C06A8;
UNITY_LOCATION(0) uniform  sampler2D _Texture2DAsset_938D465B_Out;
in  vec4 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec4 u_xlat10_0;
vec2 u_xlat1;
void main()
{
    u_xlat0.x = _Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * Vector2_5E0C2698.y;
    u_xlat1.x = Vector2_5E0C2698.x * u_xlat0.x + Vector1_E94C06A8;
    u_xlat0.xy = u_xlat1.xy + vs_TEXCOORD8.xy;
    u_xlat10_0 = texture(_Texture2DAsset_938D465B_Out, u_xlat0.xy);
    SV_Target0.xyz = u_xlat10_0.xyz;
    SV_Target0.w = 0.5;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_Texture2DAsset_938D465B_Out" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "UnityPerCamera" (144 bytes) on set: 1, binding: 0, used in: Vertex Fragment  {
  Vector4 _Time at 0
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerDraw" (368 bytes) on set: 1, binding: 2, used in: Vertex  {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on set: 1, binding: 3, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "UnityPerMaterial" (12 bytes) on set: 1, binding: 1, used in: Fragment  {
  Float Vector1_E94C06A8 at 8
  Vector2 Vector2_5E0C2698 at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 319

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 79 121 186 197 233 236 281 301 307 308 310 311
                              Name 79  "vs_TEXCOORD7"
                              Name 121  "vs_TEXCOORD3"
                              Name 233  "vs_TEXCOORD4"
                              Name 281  "vs_TEXCOORD5"
                              Name 301  "vs_TEXCOORD6"
                              Name 307  "vs_TEXCOORD8"
                              Name 310  "vs_TEXCOORD9"
                              Decorate 11 Location 0
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              Decorate 20 ArrayStride 16
                              MemberDecorate 21 0 Offset 0
                              MemberDecorate 21 1 Offset 64
                              MemberDecorate 21 2 Offset 128
                              MemberDecorate 21 3 Offset 144
                              MemberDecorate 21 4 Offset 160
                              MemberDecorate 21 5 Offset 176
                              MemberDecorate 21 6 Offset 208
                              MemberDecorate 21 7 Offset 224
                              MemberDecorate 21 8 Offset 240
                              MemberDecorate 21 9 Offset 256
                              MemberDecorate 21 10 Offset 272
                              MemberDecorate 21 11 Offset 288
                              MemberDecorate 21 12 Offset 304
                              MemberDecorate 21 13 Offset 320
                              MemberDecorate 21 14 Offset 336
                              MemberDecorate 21 15 Offset 352
                              Decorate 21 Block
                              Decorate 23 DescriptorSet 1
                              Decorate 23 Binding 2
                              Decorate 79(vs_TEXCOORD7) Location 5
                              MemberDecorate 83 0 Offset 0
                              MemberDecorate 83 1 Offset 16
                              MemberDecorate 83 2 Offset 32
                              MemberDecorate 83 3 Offset 48
                              MemberDecorate 83 4 Offset 64
                              MemberDecorate 83 5 Offset 80
                              MemberDecorate 83 6 Offset 96
                              MemberDecorate 83 7 Offset 112
                              MemberDecorate 83 8 Offset 128
                              Decorate 83 Block
                              Decorate 85 DescriptorSet 1
                              Decorate 85 Binding 0
                              Decorate 121(vs_TEXCOORD3) Location 1
                              Decorate 157 ArrayStride 16
                              Decorate 158 ArrayStride 16
                              Decorate 159 ArrayStride 16
                              Decorate 160 ArrayStride 16
                              MemberDecorate 161 0 Offset 0
                              MemberDecorate 161 1 Offset 16
                              MemberDecorate 161 2 Offset 32
                              MemberDecorate 161 3 Offset 48
                              MemberDecorate 161 4 Offset 64
                              MemberDecorate 161 5 Offset 80
                              MemberDecorate 161 6 Offset 96
                              MemberDecorate 161 7 Offset 112
                              MemberDecorate 161 8 Offset 176
                              MemberDecorate 161 9 Offset 240
                              MemberDecorate 161 10 Offset 304
                              MemberDecorate 161 11 Offset 368
                              MemberDecorate 161 12 Offset 384
                              MemberDecorate 161 13 Offset 400
                              Decorate 161 Block
                              Decorate 163 DescriptorSet 1
                              Decorate 163 Binding 3
                              MemberDecorate 184 0 BuiltIn Position
                              MemberDecorate 184 1 BuiltIn PointSize
                              MemberDecorate 184 2 BuiltIn ClipDistance
                              Decorate 184 Block
                              Decorate 197 Location 1
                              Decorate 233(vs_TEXCOORD4) Location 2
                              Decorate 236 Location 2
                              Decorate 281(vs_TEXCOORD5) Location 3
                              Decorate 301(vs_TEXCOORD6) Location 4
                              Decorate 307(vs_TEXCOORD8) Location 0
                              Decorate 308 Location 3
                              Decorate 310(vs_TEXCOORD9) Location 6
                              Decorate 311 Location 4
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              15:             TypeInt 32 0
              16:     15(int) Constant 4
              17:             TypeArray 7(fvec4) 16
              18:             TypeArray 7(fvec4) 16
              19:     15(int) Constant 2
              20:             TypeArray 7(fvec4) 19
              21:             TypeStruct 17 18 7(fvec4) 7(fvec4) 7(fvec4) 20 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4)
              22:             TypePointer Uniform 21(struct)
              23:     22(ptr) Variable Uniform
              24:             TypeInt 32 1
              25:     24(int) Constant 0
              26:     24(int) Constant 1
              27:             TypePointer Uniform 7(fvec4)
              45:     24(int) Constant 2
              57:      8(ptr) Variable Private
              58:     24(int) Constant 3
              78:             TypePointer Output 12(fvec3)
79(vs_TEXCOORD7):     78(ptr) Variable Output
              83:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 12(fvec3) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4)
              84:             TypePointer Uniform 83(struct)
              85:     84(ptr) Variable Uniform
              86:     24(int) Constant 4
              87:             TypePointer Uniform 12(fvec3)
121(vs_TEXCOORD3):     78(ptr) Variable Output
             157:             TypeArray 7(fvec4) 16
             158:             TypeArray 7(fvec4) 16
             159:             TypeArray 7(fvec4) 16
             160:             TypeArray 7(fvec4) 16
             161:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 157 158 159 160 7(fvec4) 24(int) 7(fvec4)
             162:             TypePointer Uniform 161(struct)
             163:    162(ptr) Variable Uniform
             164:     24(int) Constant 10
             182:     15(int) Constant 1
             183:             TypeArray 6(float) 182
             184:             TypeStruct 7(fvec4) 6(float) 183
             185:             TypePointer Output 184(struct)
             186:    185(ptr) Variable Output
             194:             TypePointer Output 7(fvec4)
             196:             TypePointer Input 12(fvec3)
             197:    196(ptr) Variable Input
             203:     15(int) Constant 0
             204:             TypePointer Private 6(float)
             218:    204(ptr) Variable Private
233(vs_TEXCOORD4):     78(ptr) Variable Output
             236:     10(ptr) Variable Input
281(vs_TEXCOORD5):     78(ptr) Variable Output
             284:             TypePointer Private 12(fvec3)
             285:    284(ptr) Variable Private
301(vs_TEXCOORD6):     78(ptr) Variable Output
307(vs_TEXCOORD8):    194(ptr) Variable Output
             308:     10(ptr) Variable Input
310(vs_TEXCOORD9):    194(ptr) Variable Output
             311:     10(ptr) Variable Input
             313:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 1 1 1
              28:     27(ptr) AccessChain 23 25 26
              29:    7(fvec4) Load 28
              30:   12(fvec3) VectorShuffle 29 29 0 1 2
              31:   12(fvec3) FMul 14 30
              32:    7(fvec4) Load 9
              33:    7(fvec4) VectorShuffle 32 31 4 5 6 3
                              Store 9 33
              34:     27(ptr) AccessChain 23 25 25
              35:    7(fvec4) Load 34
              36:   12(fvec3) VectorShuffle 35 35 0 1 2
              37:    7(fvec4) Load 11
              38:   12(fvec3) VectorShuffle 37 37 0 0 0
              39:   12(fvec3) FMul 36 38
              40:    7(fvec4) Load 9
              41:   12(fvec3) VectorShuffle 40 40 0 1 2
              42:   12(fvec3) FAdd 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) VectorShuffle 43 42 4 5 6 3
                              Store 9 44
              46:     27(ptr) AccessChain 23 25 45
              47:    7(fvec4) Load 46
              48:   12(fvec3) VectorShuffle 47 47 0 1 2
              49:    7(fvec4) Load 11
              50:   12(fvec3) VectorShuffle 49 49 2 2 2
              51:   12(fvec3) FMul 48 50
              52:    7(fvec4) Load 9
              53:   12(fvec3) VectorShuffle 52 52 0 1 2
              54:   12(fvec3) FAdd 51 53
              55:    7(fvec4) Load 9
              56:    7(fvec4) VectorShuffle 55 54 4 5 6 3
                              Store 9 56
              59:     27(ptr) AccessChain 23 25 58
              60:    7(fvec4) Load 59
              61:   12(fvec3) VectorShuffle 60 60 0 1 2
              62:    7(fvec4) Load 11
              63:   12(fvec3) VectorShuffle 62 62 3 3 3
              64:   12(fvec3) FMul 61 63
              65:    7(fvec4) Load 9
              66:   12(fvec3) VectorShuffle 65 65 0 1 2
              67:   12(fvec3) FAdd 64 66
              68:    7(fvec4) Load 57
              69:    7(fvec4) VectorShuffle 68 67 4 5 6 3
                              Store 57 69
              70:    7(fvec4) Load 9
              71:   12(fvec3) VectorShuffle 70 70 0 1 2
              72:     27(ptr) AccessChain 23 25 58
              73:    7(fvec4) Load 72
              74:   12(fvec3) VectorShuffle 73 73 0 1 2
              75:   12(fvec3) FAdd 71 74
              76:    7(fvec4) Load 9
              77:    7(fvec4) VectorShuffle 76 75 4 5 6 3
                              Store 9 77
              80:    7(fvec4) Load 9
              81:   12(fvec3) VectorShuffle 80 80 0 1 2
              82:   12(fvec3) FNegate 81
              88:     87(ptr) AccessChain 85 86
              89:   12(fvec3) Load 88
              90:   12(fvec3) FAdd 82 89
                              Store 79(vs_TEXCOORD7) 90
              91:    7(fvec4) Load 57
              92:   12(fvec3) VectorShuffle 91 91 1 1 1
              93:     27(ptr) AccessChain 23 26 26
              94:    7(fvec4) Load 93
              95:   12(fvec3) VectorShuffle 94 94 0 1 2
              96:   12(fvec3) FMul 92 95
              97:    7(fvec4) Load 9
              98:    7(fvec4) VectorShuffle 97 96 4 5 6 3
                              Store 9 98
              99:     27(ptr) AccessChain 23 26 25
             100:    7(fvec4) Load 99
             101:   12(fvec3) VectorShuffle 100 100 0 1 2
             102:    7(fvec4) Load 57
             103:   12(fvec3) VectorShuffle 102 102 0 0 0
             104:   12(fvec3) FMul 101 103
             105:    7(fvec4) Load 9
             106:   12(fvec3) VectorShuffle 105 105 0 1 2
             107:   12(fvec3) FAdd 104 106
             108:    7(fvec4) Load 9
             109:    7(fvec4) VectorShuffle 108 107 4 5 6 3
                              Store 9 109
             110:     27(ptr) AccessChain 23 26 45
             111:    7(fvec4) Load 110
             112:   12(fvec3) VectorShuffle 111 111 0 1 2
             113:    7(fvec4) Load 57
             114:   12(fvec3) VectorShuffle 113 113 2 2 2
             115:   12(fvec3) FMul 112 114
             116:    7(fvec4) Load 9
             117:   12(fvec3) VectorShuffle 116 116 0 1 2
             118:   12(fvec3) FAdd 115 117
             119:    7(fvec4) Load 9
             120:    7(fvec4) VectorShuffle 119 118 4 5 6 3
                              Store 9 120
             122:    7(fvec4) Load 57
             123:   12(fvec3) VectorShuffle 122 122 0 1 2
                              Store 121(vs_TEXCOORD3) 123
             124:    7(fvec4) Load 9
             125:   12(fvec3) VectorShuffle 124 124 0 1 2
             126:     27(ptr) AccessChain 23 26 58
             127:    7(fvec4) Load 126
             128:   12(fvec3) VectorShuffle 127 127 0 1 2
             129:   12(fvec3) FAdd 125 128
             130:    7(fvec4) Load 9
             131:    7(fvec4) VectorShuffle 130 129 4 5 6 3
                              Store 9 131
             132:    7(fvec4) Load 9
             133:    7(fvec4) VectorShuffle 132 132 1 1 1 1
             134:     27(ptr) AccessChain 23 25 26
             135:    7(fvec4) Load 134
             136:    7(fvec4) FMul 133 135
                              Store 57 136
             137:     27(ptr) AccessChain 23 25 25
             138:    7(fvec4) Load 137
             139:    7(fvec4) Load 9
             140:    7(fvec4) VectorShuffle 139 139 0 0 0 0
             141:    7(fvec4) FMul 138 140
             142:    7(fvec4) Load 57
             143:    7(fvec4) FAdd 141 142
                              Store 57 143
             144:     27(ptr) AccessChain 23 25 45
             145:    7(fvec4) Load 144
             146:    7(fvec4) Load 9
             147:    7(fvec4) VectorShuffle 146 146 2 2 2 2
             148:    7(fvec4) FMul 145 147
             149:    7(fvec4) Load 57
             150:    7(fvec4) FAdd 148 149
                              Store 9 150
             151:    7(fvec4) Load 9
             152:     27(ptr) AccessChain 23 25 58
             153:    7(fvec4) Load 152
             154:    7(fvec4) FAdd 151 153
                              Store 9 154
             155:    7(fvec4) Load 9
             156:    7(fvec4) VectorShuffle 155 155 1 1 1 1
             165:     27(ptr) AccessChain 163 164 26
             166:    7(fvec4) Load 165
             167:    7(fvec4) FMul 156 166
                              Store 57 167
             168:     27(ptr) AccessChain 163 164 25
             169:    7(fvec4) Load 168
             170:    7(fvec4) Load 9
             171:    7(fvec4) VectorShuffle 170 170 0 0 0 0
             172:    7(fvec4) FMul 169 171
             173:    7(fvec4) Load 57
             174:    7(fvec4) FAdd 172 173
                              Store 57 174
             175:     27(ptr) AccessChain 163 164 45
             176:    7(fvec4) Load 175
             177:    7(fvec4) Load 9
             178:    7(fvec4) VectorShuffle 177 177 2 2 2 2
             179:    7(fvec4) FMul 176 178
             180:    7(fvec4) Load 57
             181:    7(fvec4) FAdd 179 180
                              Store 57 181
             187:     27(ptr) AccessChain 163 164 58
             188:    7(fvec4) Load 187
             189:    7(fvec4) Load 9
             190:    7(fvec4) VectorShuffle 189 189 3 3 3 3
             191:    7(fvec4) FMul 188 190
             192:    7(fvec4) Load 57
             193:    7(fvec4) FAdd 191 192
             195:    194(ptr) AccessChain 186 25
                              Store 195 193
             198:   12(fvec3) Load 197
             199:     27(ptr) AccessChain 23 26 25
             200:    7(fvec4) Load 199
             201:   12(fvec3) VectorShuffle 200 200 0 1 2
             202:    6(float) Dot 198 201
             205:    204(ptr) AccessChain 9 203
                              Store 205 202
             206:   12(fvec3) Load 197
             207:     27(ptr) AccessChain 23 26 26
             208:    7(fvec4) Load 207
             209:   12(fvec3) VectorShuffle 208 208 0 1 2
             210:    6(float) Dot 206 209
             211:    204(ptr) AccessChain 9 182
                              Store 211 210
             212:   12(fvec3) Load 197
             213:     27(ptr) AccessChain 23 26 45
             214:    7(fvec4) Load 213
             215:   12(fvec3) VectorShuffle 214 214 0 1 2
             216:    6(float) Dot 212 215
             217:    204(ptr) AccessChain 9 19
                              Store 217 216
             219:    7(fvec4) Load 9
             220:   12(fvec3) VectorShuffle 219 219 0 1 2
             221:    7(fvec4) Load 9
             222:   12(fvec3) VectorShuffle 221 221 0 1 2
             223:    6(float) Dot 220 222
                              Store 218 223
             224:    6(float) Load 218
             225:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 224
                              Store 218 225
             226:    6(float) Load 218
             227:   12(fvec3) CompositeConstruct 226 226 226
             228:    7(fvec4) Load 9
             229:   12(fvec3) VectorShuffle 228 228 0 1 2
             230:   12(fvec3) FMul 227 229
             231:    7(fvec4) Load 9
             232:    7(fvec4) VectorShuffle 231 230 4 5 6 3
                              Store 9 232
             234:    7(fvec4) Load 9
             235:   12(fvec3) VectorShuffle 234 234 0 1 2
                              Store 233(vs_TEXCOORD4) 235
             237:    7(fvec4) Load 236
             238:   12(fvec3) VectorShuffle 237 237 1 1 1
             239:     27(ptr) AccessChain 23 25 26
             240:    7(fvec4) Load 239
             241:   12(fvec3) VectorShuffle 240 240 0 1 2
             242:   12(fvec3) FMul 238 241
             243:    7(fvec4) Load 57
             244:    7(fvec4) VectorShuffle 243 242 4 5 6 3
                              Store 57 244
             245:     27(ptr) AccessChain 23 25 25
             246:    7(fvec4) Load 245
             247:   12(fvec3) VectorShuffle 246 246 0 1 2
             248:    7(fvec4) Load 236
             249:   12(fvec3) VectorShuffle 248 248 0 0 0
             250:   12(fvec3) FMul 247 249
             251:    7(fvec4) Load 57
             252:   12(fvec3) VectorShuffle 251 251 0 1 2
             253:   12(fvec3) FAdd 250 252
             254:    7(fvec4) Load 57
             255:    7(fvec4) VectorShuffle 254 253 4 5 6 3
                              Store 57 255
             256:     27(ptr) AccessChain 23 25 45
             257:    7(fvec4) Load 256
             258:   12(fvec3) VectorShuffle 257 257 0 1 2
             259:    7(fvec4) Load 236
             260:   12(fvec3) VectorShuffle 259 259 2 2 2
             261:   12(fvec3) FMul 258 260
             262:    7(fvec4) Load 57
             263:   12(fvec3) VectorShuffle 262 262 0 1 2
             264:   12(fvec3) FAdd 261 263
             265:    7(fvec4) Load 57
             266:    7(fvec4) VectorShuffle 265 264 4 5 6 3
                              Store 57 266
             267:    7(fvec4) Load 57
             268:   12(fvec3) VectorShuffle 267 267 0 1 2
             269:    7(fvec4) Load 57
             270:   12(fvec3) VectorShuffle 269 269 0 1 2
             271:    6(float) Dot 268 270
                              Store 218 271
             272:    6(float) Load 218
             273:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 272
                              Store 218 273
             274:    6(float) Load 218
             275:   12(fvec3) CompositeConstruct 274 274 274
             276:    7(fvec4) Load 57
             277:   12(fvec3) VectorShuffle 276 276 0 1 2
             278:   12(fvec3) FMul 275 277
             279:    7(fvec4) Load 57
             280:    7(fvec4) VectorShuffle 279 278 4 5 6 3
                              Store 57 280
             282:    7(fvec4) Load 57
             283:   12(fvec3) VectorShuffle 282 282 0 1 2
                              Store 281(vs_TEXCOORD5) 283
             286:    7(fvec4) Load 9
             287:   12(fvec3) VectorShuffle 286 286 2 0 1
             288:    7(fvec4) Load 57
             289:   12(fvec3) VectorShuffle 288 288 1 2 0
             290:   12(fvec3) FMul 287 289
                              Store 285 290
             291:    7(fvec4) Load 9
             292:   12(fvec3) VectorShuffle 291 291 1 2 0
             293:    7(fvec4) Load 57
             294:   12(fvec3) VectorShuffle 293 293 2 0 1
             295:   12(fvec3) FMul 292 294
             296:   12(fvec3) Load 285
             297:   12(fvec3) FNegate 296
             298:   12(fvec3) FAdd 295 297
             299:    7(fvec4) Load 9
             300:    7(fvec4) VectorShuffle 299 298 4 5 6 3
                              Store 9 300
             302:    7(fvec4) Load 9
             303:   12(fvec3) VectorShuffle 302 302 0 1 2
             304:    7(fvec4) Load 236
             305:   12(fvec3) VectorShuffle 304 304 3 3 3
             306:   12(fvec3) FMul 303 305
                              Store 301(vs_TEXCOORD6) 306
             309:    7(fvec4) Load 308
                              Store 307(vs_TEXCOORD8) 309
             312:    7(fvec4) Load 311
                              Store 310(vs_TEXCOORD9) 312
             314:    313(ptr) AccessChain 186 25 182
             315:    6(float) Load 314
             316:    6(float) FNegate 315
             317:    313(ptr) AccessChain 186 25 182
                              Store 317 316
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 77

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 49 69
                              ExecutionMode 4 OriginUpperLeft
                              Name 49  "vs_TEXCOORD8"
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 16
                              MemberDecorate 12 2 Offset 32
                              MemberDecorate 12 3 Offset 48
                              MemberDecorate 12 4 Offset 64
                              MemberDecorate 12 5 Offset 80
                              MemberDecorate 12 6 Offset 96
                              MemberDecorate 12 7 Offset 112
                              MemberDecorate 12 8 Offset 128
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 0
                              MemberDecorate 30 0 Offset 0
                              MemberDecorate 30 1 Offset 8
                              Decorate 30 Block
                              Decorate 32 DescriptorSet 1
                              Decorate 32 Binding 1
                              Decorate 49(vs_TEXCOORD8) Location 0
                              Decorate 54 RelaxedPrecision
                              Decorate 57 RelaxedPrecision
                              Decorate 57 DescriptorSet 0
                              Decorate 57 Binding 1
                              Decorate 58 RelaxedPrecision
                              Decorate 61 RelaxedPrecision
                              Decorate 61 DescriptorSet 0
                              Decorate 61 Binding 0
                              Decorate 62 RelaxedPrecision
                              Decorate 67 RelaxedPrecision
                              Decorate 69 Location 0
                              Decorate 70 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 2
               8:             TypePointer Private 7(fvec2)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 4
              11:             TypeVector 6(float) 3
              12:             TypeStruct 10(fvec4) 10(fvec4) 10(fvec4) 10(fvec4) 11(fvec3) 10(fvec4) 10(fvec4) 10(fvec4) 10(fvec4)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:             TypeInt 32 1
              16:     15(int) Constant 0
              17:             TypeInt 32 0
              18:     17(int) Constant 1
              19:             TypePointer Uniform 6(float)
              22:    6(float) Constant 1056964608
              24:     17(int) Constant 0
              25:             TypePointer Private 6(float)
              27:      8(ptr) Variable Private
              30:             TypeStruct 7(fvec2) 6(float)
              31:             TypePointer Uniform 30(struct)
              32:     31(ptr) Variable Uniform
              42:     15(int) Constant 1
              48:             TypePointer Input 10(fvec4)
49(vs_TEXCOORD8):     48(ptr) Variable Input
              53:             TypePointer Private 11(fvec3)
              54:     53(ptr) Variable Private
              55:             TypeImage 6(float) 2D sampled format:Unknown
              56:             TypePointer UniformConstant 55
              57:     56(ptr) Variable UniformConstant
              59:             TypeSampler
              60:             TypePointer UniformConstant 59
              61:     60(ptr) Variable UniformConstant
              63:             TypeSampledImage 55
              68:             TypePointer Output 10(fvec4)
              69:     68(ptr) Variable Output
              73:     17(int) Constant 3
              74:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              20:     19(ptr) AccessChain 14 16 18
              21:    6(float) Load 20
              23:    6(float) FMul 21 22
              26:     25(ptr) AccessChain 9 24
                              Store 26 23
              28:     25(ptr) AccessChain 9 24
              29:    6(float) Load 28
              33:     19(ptr) AccessChain 32 16 18
              34:    6(float) Load 33
              35:    6(float) FMul 29 34
              36:     25(ptr) AccessChain 27 18
                              Store 36 35
              37:     19(ptr) AccessChain 32 16 24
              38:    6(float) Load 37
              39:     25(ptr) AccessChain 9 24
              40:    6(float) Load 39
              41:    6(float) FMul 38 40
              43:     19(ptr) AccessChain 32 42
              44:    6(float) Load 43
              45:    6(float) FAdd 41 44
              46:     25(ptr) AccessChain 27 24
                              Store 46 45
              47:    7(fvec2) Load 27
              50:   10(fvec4) Load 49(vs_TEXCOORD8)
              51:    7(fvec2) VectorShuffle 50 50 0 1
              52:    7(fvec2) FAdd 47 51
                              Store 9 52
              58:          55 Load 57
              62:          59 Load 61
              64:          63 SampledImage 58 62
              65:    7(fvec2) Load 9
              66:   10(fvec4) ImageSampleImplicitLod 64 65
              67:   11(fvec3) VectorShuffle 66 66 0 1 2
                              Store 54 67
              70:   11(fvec3) Load 54
              71:   10(fvec4) Load 69
              72:   10(fvec4) VectorShuffle 71 70 4 5 6 3
                              Store 69 72
              75:     74(ptr) AccessChain 69 73
                              Store 75 22
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 35 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 1 {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 2 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 3 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 1   xyzw        4     NONE   float   xyzw
// SV_InstanceID            0   x           5   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 3   xyz         1     NONE   float   xyz 
// TEXCOORD                 4   xyz         2     NONE   float   xyz 
// TEXCOORD                 5   xyz         3     NONE   float   xyz 
// TEXCOORD                 6   xyz         4     NONE   float   xyz 
// TEXCOORD                 7   xyz         5     NONE   float   xyz 
// TEXCOORD                 8   xyzw        6     NONE   float   xyzw
// TEXCOORD                 9   xyzw        7     NONE   float   xyzw
// SV_InstanceID            0   x           8     NONE    uint   x   
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[23], immediateIndexed
      dcl_constantbuffer CB2[1], immediateIndexed
      dcl_constantbuffer CB3[16], dynamicIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xyzw
      dcl_input v4.xyzw
      dcl_input_sgv v5.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyz
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_output o5.xyz
      dcl_output o6.xyzw
      dcl_output o7.xyzw
      dcl_output o8.x
      dcl_temps 3
   0: iadd r0.x, v5.x, cb2[0].x
   1: ishl r0.x, r0.x, l(3)
   2: mul r0.yzw, v0.yyyy, cb3[r0.x + 1].xxyz
   3: mad r0.yzw, cb3[r0.x + 0].xxyz, v0.xxxx, r0.yyzw
   4: mad r0.yzw, cb3[r0.x + 2].xxyz, v0.zzzz, r0.yyzw
   5: mad r1.xyz, cb3[r0.x + 3].xyzx, v0.wwww, r0.yzwy
   6: add r0.yzw, r0.yyzw, cb3[r0.x + 3].xxyz
   7: add o5.xyz, -r0.yzwy, cb0[4].xyzx
   8: mul r0.yzw, r1.yyyy, cb3[r0.x + 5].xxyz
   9: mad r0.yzw, cb3[r0.x + 4].xxyz, r1.xxxx, r0.yyzw
  10: mad r0.yzw, cb3[r0.x + 6].xxyz, r1.zzzz, r0.yyzw
  11: mov o1.xyz, r1.xyzx
  12: add r0.yzw, r0.yyzw, cb3[r0.x + 7].xxyz
  13: mul r1.xyzw, r0.zzzz, cb3[r0.x + 1].xyzw
  14: mad r1.xyzw, cb3[r0.x + 0].xyzw, r0.yyyy, r1.xyzw
  15: mad r1.xyzw, cb3[r0.x + 2].xyzw, r0.wwww, r1.xyzw
  16: add r1.xyzw, r1.xyzw, cb3[r0.x + 3].xyzw
  17: mul r2.xyzw, r1.yyyy, cb1[20].xyzw
  18: mad r2.xyzw, cb1[19].xyzw, r1.xxxx, r2.xyzw
  19: mad r2.xyzw, cb1[21].xyzw, r1.zzzz, r2.xyzw
  20: mad o0.xyzw, cb1[22].xyzw, r1.wwww, r2.xyzw
  21: dp3 r1.x, v1.xyzx, cb3[r0.x + 4].xyzx
  22: dp3 r1.y, v1.xyzx, cb3[r0.x + 5].xyzx
  23: dp3 r1.z, v1.xyzx, cb3[r0.x + 6].xyzx
  24: dp3 r0.y, r1.xyzx, r1.xyzx
  25: rsq r0.y, r0.y
  26: mul r0.yzw, r0.yyyy, r1.xxyz
  27: mov o2.xyz, r0.yzwy
  28: mul r1.xyz, v2.yyyy, cb3[r0.x + 1].xyzx
  29: mad r1.xyz, cb3[r0.x + 0].xyzx, v2.xxxx, r1.xyzx
  30: mad r1.xyz, cb3[r0.x + 2].xyzx, v2.zzzz, r1.xyzx
  31: dp3 r0.x, r1.xyzx, r1.xyzx
  32: rsq r0.x, r0.x
  33: mul r1.xyz, r0.xxxx, r1.xyzx
  34: mov o3.xyz, r1.xyzx
  35: mul r2.xyz, r0.wyzw, r1.yzxy
  36: mad r0.xyz, r0.zwyz, r1.zxyz, -r2.xyzx
  37: mul o4.xyz, r0.xyzx, v2.wwww
  38: mov o6.xyzw, v3.xyzw
  39: mov o7.xyzw, v4.xyzw
  40: mov o8.x, v5.x
  41: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 4 math, 2 temp registers, 1 textures
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector4 _Time at 0
}
Constant Buffer "UnityPerMaterial" (16 bytes) on slot 1 {
  Vector2 Vector2_5E0C2698 at 0
  Float Vector1_E94C06A8 at 8
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 3   xyz         1     NONE   float       
// TEXCOORD                 4   xyz         2     NONE   float       
// TEXCOORD                 5   xyz         3     NONE   float       
// TEXCOORD                 6   xyz         4     NONE   float       
// TEXCOORD                 7   xyz         5     NONE   float       
// TEXCOORD                 8   xyzw        6     NONE   float   xy  
// TEXCOORD                 9   xyzw        7     NONE   float       
// SV_InstanceID            0   x           8     NONE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[1], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v6.xy
      dcl_output o0.xyzw
      dcl_temps 2
   0: mul r0.x, cb0[0].y, l(0.500000)
   1: mul r1.y, r0.x, cb1[0].y
   2: mad r1.x, cb1[0].x, r0.x, cb1[0].z
   3: add r0.xy, r1.xyxx, v6.xyxx
   4: sample r0.xyzw, r0.xyxx, t0.xyzw, s0
   5: mov o0.xyz, r0.xyzx
   6: mov o0.w, l(0.500000)
   7: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 0 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = int(u_xlati0 << 3);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat1.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[3].xyz;
    u_xlat1 = u_xlat3.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat3.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD0;
    vs_TEXCOORD9 = in_TEXCOORD1;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec2 Vector2_5E0C2698;
uniform 	float Vector1_E94C06A8;
UNITY_LOCATION(0) uniform mediump sampler2D _Texture2DAsset_938D465B_Out;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
void main()
{
    u_xlat0.x = _Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * Vector2_5E0C2698.y;
    u_xlat1.x = Vector2_5E0C2698.x * u_xlat0.x + Vector1_E94C06A8;
    u_xlat0.xy = u_xlat1.xy + vs_TEXCOORD8.xy;
    u_xlat16_0.xyz = texture(_Texture2DAsset_938D465B_Out, u_xlat0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target0.w = 0.5;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 1 {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 2 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 3 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};

struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 unity_FogParams;
    float4 unity_FogColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_StereoScaleOffset;
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_Builtins0Array_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
    float4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};

struct UnityInstancing_PerDraw0_Type
{
    unity_Builtins0Array_Type unity_Builtins0Array[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD1 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]];
    float4 TEXCOORD9 [[ user(TEXCOORD9) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(0) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(1) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(2) ]],
    const constant unity_Builtins0Array_Type* UnityInstancing_PerDraw0 [[ buffer(3) ]],
    uint mtl_InstanceID [[ instance_id ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float3 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 0x3;
    u_xlat3.xyz = input.POSITION0.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, input.POSITION0.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, input.POSITION0.zzz, u_xlat3.xyz);
    u_xlat1.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz, input.POSITION0.www, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    output.TEXCOORD7.xyz = (-u_xlat3.xyz) + UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat3.xyz = u_xlat1.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz, u_xlat1.zzz, u_xlat3.xyz);
    output.TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[3].xyz;
    u_xlat1 = u_xlat3.yyyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0], u_xlat3.xxxx, u_xlat1);
    u_xlat1 = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2], u_xlat3.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.x = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
    output.TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat1.xyz = input.TANGENT0.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, input.TANGENT0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, input.TANGENT0.zzz, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat3.yzx, u_xlat1.zxy, (-u_xlat2.xyz));
    output.TEXCOORD6.xyz = u_xlat0.xyz * input.TANGENT0.www;
    output.TEXCOORD8 = input.TEXCOORD0;
    output.TEXCOORD9 = input.TEXCOORD1;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector4 _Time at 0
}
Constant Buffer "UnityPerMaterial" (12 bytes) on slot 1 {
  Vector2 Vector2_5E0C2698 at 0
  Float Vector1_E94C06A8 at 8
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};

struct UnityPerMaterial_Type
{
    float2 Vector2_5E0C2698;
    float Vector1_E94C06A8;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    sampler sampler_Texture2DAsset_938D465B_Out [[ sampler (0) ]],
    texture2d<float, access::sample > _Texture2DAsset_938D465B_Out [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float2 u_xlat1;
    u_xlat0.x = UnityPerCamera._Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * UnityPerMaterial.Vector2_5E0C2698.xyxx.y;
    u_xlat1.x = fma(UnityPerMaterial.Vector2_5E0C2698.xyxx.x, u_xlat0.x, UnityPerMaterial.Vector1_E94C06A8);
    u_xlat0.xy = u_xlat1.xy + input.TEXCOORD8.xy;
    u_xlat0.xyz = _Texture2DAsset_938D465B_Out.sample(sampler_Texture2DAsset_938D465B_Out, u_xlat0.xy).xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 0.5;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_Texture2DAsset_938D465B_Out" to slot 0

Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 0 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec3 vs_TEXCOORD7;
out vec4 vs_TEXCOORD8;
out vec4 vs_TEXCOORD9;
flat out uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat1.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[3].xyz;
    u_xlat1 = u_xlat3.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat3.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD0;
    vs_TEXCOORD9 = in_TEXCOORD1;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec2 Vector2_5E0C2698;
uniform 	float Vector1_E94C06A8;
UNITY_LOCATION(0) uniform  sampler2D _Texture2DAsset_938D465B_Out;
in  vec4 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec4 u_xlat10_0;
vec2 u_xlat1;
void main()
{
    u_xlat0.x = _Time.y * 0.5;
    u_xlat1.y = u_xlat0.x * Vector2_5E0C2698.y;
    u_xlat1.x = Vector2_5E0C2698.x * u_xlat0.x + Vector1_E94C06A8;
    u_xlat0.xy = u_xlat1.xy + vs_TEXCOORD8.xy;
    u_xlat10_0 = texture(_Texture2DAsset_938D465B_Out, u_xlat0.xy);
    SV_Target0.xyz = u_xlat10_0.xyz;
    SV_Target0.w = 0.5;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Specialization constant id: 0 name: "UNITY_RUNTIME_INSTANCING_ARRAY_SIZE", used in: Vertex 

Set 2D Texture "_Texture2DAsset_938D465B_Out" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 3, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on set: 1, binding: 4, used in: Vertex  {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}
Constant Buffer "UnityPerCamera" (144 bytes) on set: 1, binding: 0, used in: Vertex Fragment  {
  Vector4 _Time at 0
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on set: 1, binding: 2, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "UnityPerMaterial" (12 bytes) on set: 1, binding: 1, used in: Fragment  {
  Float Vector1_E94C06A8 at 8
  Vector2 Vector2_5E0C2698 at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 357

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 10 29 94 133 206 217 260 262 317 336 341 342 344 345 348
                              Name 94  "vs_TEXCOORD7"
                              Name 133  "vs_TEXCOORD3"
                              Name 260  "vs_TEXCOORD4"
                              Name 317  "vs_TEXCOORD5"
                              Name 336  "vs_TEXCOORD6"
                              Name 341  "vs_TEXCOORD8"
                              Name 344  "vs_TEXCOORD9"
                              Decorate 10 BuiltIn InstanceIndex
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 4
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 3
                              Decorate 29 Location 0
                              Decorate 34 ArrayStride 16
                              Decorate 35 ArrayStride 16
                              MemberDecorate 36 0 Offset 0
                              MemberDecorate 36 1 Offset 64
                              Decorate 37 SpecId 0
                              Decorate 38 ArrayStride 128
                              MemberDecorate 39 0 Offset 0
                              Decorate 39 Block
                              Decorate 41 DescriptorSet 1
                              Decorate 41 Binding 4
                              Decorate 94(vs_TEXCOORD7) Location 5
                              MemberDecorate 97 0 Offset 0
                              MemberDecorate 97 1 Offset 16
                              MemberDecorate 97 2 Offset 32
                              MemberDecorate 97 3 Offset 48
                              MemberDecorate 97 4 Offset 64
                              MemberDecorate 97 5 Offset 80
                              MemberDecorate 97 6 Offset 96
                              MemberDecorate 97 7 Offset 112
                              MemberDecorate 97 8 Offset 128
                              Decorate 97 Block
                              Decorate 99 DescriptorSet 1
                              Decorate 99 Binding 0
                              Decorate 133(vs_TEXCOORD3) Location 1
                              Decorate 177 ArrayStride 16
                              Decorate 178 ArrayStride 16
                              Decorate 179 ArrayStride 16
                              Decorate 180 ArrayStride 16
                              MemberDecorate 181 0 Offset 0
                              MemberDecorate 181 1 Offset 16
                              MemberDecorate 181 2 Offset 32
                              MemberDecorate 181 3 Offset 48
                              MemberDecorate 181 4 Offset 64
                              MemberDecorate 181 5 Offset 80
                              MemberDecorate 181 6 Offset 96
                              MemberDecorate 181 7 Offset 112
                              MemberDecorate 181 8 Offset 176
                              MemberDecorate 181 9 Offset 240
                              MemberDecorate 181 10 Offset 304
                              MemberDecorate 181 11 Offset 368
                              MemberDecorate 181 12 Offset 384
                              MemberDecorate 181 13 Offset 400
                              Decorate 181 Block
                              Decorate 183 DescriptorSet 1
                              Decorate 183 Binding 2
                              MemberDecorate 204 0 BuiltIn Position
                              MemberDecorate 204 1 BuiltIn PointSize
                              MemberDecorate 204 2 BuiltIn ClipDistance
                              Decorate 204 Block
                              Decorate 217 Location 1
                              Decorate 260(vs_TEXCOORD4) Location 2
                              Decorate 262 Location 2
                              Decorate 317(vs_TEXCOORD5) Location 3
                              Decorate 336(vs_TEXCOORD6) Location 4
                              Decorate 341(vs_TEXCOORD8) Location 0
                              Decorate 342 Location 3
                              Decorate 344(vs_TEXCOORD9) Location 6
                              Decorate 345 Location 4
                              Decorate 348 Flat
                              Decorate 348 Location 7
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeInt 32 1
               7:             TypePointer Private 6(int)
               8:      7(ptr) Variable Private
               9:             TypePointer Input 6(int)
              10:      9(ptr) Variable Input
              12:             TypeStruct 6(int) 6(int)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:      6(int) Constant 0
              16:             TypePointer Uniform 6(int)
              21:      6(int) Constant 3
              23:             TypeFloat 32
              24:             TypeVector 23(float) 3
              25:             TypePointer Private 24(fvec3)
              26:     25(ptr) Variable Private
              27:             TypeVector 23(float) 4
              28:             TypePointer Input 27(fvec4)
              29:     28(ptr) Variable Input
              32:             TypeInt 32 0
              33:     32(int) Constant 4
              34:             TypeArray 27(fvec4) 33
              35:             TypeArray 27(fvec4) 33
              36:             TypeStruct 34 35
              37:      6(int) SpecConstant 2
              38:             TypeArray 36(struct) 37
              39:             TypeStruct 38
              40:             TypePointer Uniform 39(struct)
              41:     40(ptr) Variable Uniform
              43:      6(int) Constant 8
              45:      6(int) Constant 1
              46:             TypePointer Uniform 27(fvec4)
              63:      6(int) Constant 2
              72:             TypePointer Private 27(fvec4)
              73:     72(ptr) Variable Private
              93:             TypePointer Output 24(fvec3)
94(vs_TEXCOORD7):     93(ptr) Variable Output
              97:             TypeStruct 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 24(fvec3) 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4)
              98:             TypePointer Uniform 97(struct)
              99:     98(ptr) Variable Uniform
             100:      6(int) Constant 4
             101:             TypePointer Uniform 24(fvec3)
133(vs_TEXCOORD3):     93(ptr) Variable Output
             174:     72(ptr) Variable Private
             177:             TypeArray 27(fvec4) 33
             178:             TypeArray 27(fvec4) 33
             179:             TypeArray 27(fvec4) 33
             180:             TypeArray 27(fvec4) 33
             181:             TypeStruct 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 177 178 179 180 27(fvec4) 6(int) 27(fvec4)
             182:             TypePointer Uniform 181(struct)
             183:    182(ptr) Variable Uniform
             184:      6(int) Constant 10
             202:     32(int) Constant 1
             203:             TypeArray 23(float) 202
             204:             TypeStruct 27(fvec4) 23(float) 203
             205:             TypePointer Output 204(struct)
             206:    205(ptr) Variable Output
             214:             TypePointer Output 27(fvec4)
             216:             TypePointer Input 24(fvec3)
             217:    216(ptr) Variable Input
             225:     32(int) Constant 0
             226:             TypePointer Private 23(float)
             243:     32(int) Constant 2
260(vs_TEXCOORD4):     93(ptr) Variable Output
             262:     28(ptr) Variable Input
             299:     25(ptr) Variable Private
317(vs_TEXCOORD5):     93(ptr) Variable Output
336(vs_TEXCOORD6):     93(ptr) Variable Output
341(vs_TEXCOORD8):    214(ptr) Variable Output
             342:     28(ptr) Variable Input
344(vs_TEXCOORD9):    214(ptr) Variable Output
             345:     28(ptr) Variable Input
             347:             TypePointer Output 32(int)
             348:    347(ptr) Variable Output
             351:             TypePointer Output 23(float)
               4:           2 Function None 3
               5:             Label
              11:      6(int) Load 10
              17:     16(ptr) AccessChain 14 15
              18:      6(int) Load 17
              19:      6(int) IAdd 11 18
                              Store 8 19
              20:      6(int) Load 8
              22:      6(int) ShiftLeftLogical 20 21
                              Store 8 22
              30:   27(fvec4) Load 29
              31:   24(fvec3) VectorShuffle 30 30 1 1 1
              42:      6(int) Load 8
              44:      6(int) SDiv 42 43
              47:     46(ptr) AccessChain 41 15 44 15 45
              48:   27(fvec4) Load 47
              49:   24(fvec3) VectorShuffle 48 48 0 1 2
              50:   24(fvec3) FMul 31 49
                              Store 26 50
              51:      6(int) Load 8
              52:      6(int) SDiv 51 43
              53:     46(ptr) AccessChain 41 15 52 15 15
              54:   27(fvec4) Load 53
              55:   24(fvec3) VectorShuffle 54 54 0 1 2
              56:   27(fvec4) Load 29
              57:   24(fvec3) VectorShuffle 56 56 0 0 0
              58:   24(fvec3) FMul 55 57
              59:   24(fvec3) Load 26
              60:   24(fvec3) FAdd 58 59
                              Store 26 60
              61:      6(int) Load 8
              62:      6(int) SDiv 61 43
              64:     46(ptr) AccessChain 41 15 62 15 63
              65:   27(fvec4) Load 64
              66:   24(fvec3) VectorShuffle 65 65 0 1 2
              67:   27(fvec4) Load 29
              68:   24(fvec3) VectorShuffle 67 67 2 2 2
              69:   24(fvec3) FMul 66 68
              70:   24(fvec3) Load 26
              71:   24(fvec3) FAdd 69 70
                              Store 26 71
              74:      6(int) Load 8
              75:      6(int) SDiv 74 43
              76:     46(ptr) AccessChain 41 15 75 15 21
              77:   27(fvec4) Load 76
              78:   24(fvec3) VectorShuffle 77 77 0 1 2
              79:   27(fvec4) Load 29
              80:   24(fvec3) VectorShuffle 79 79 3 3 3
              81:   24(fvec3) FMul 78 80
              82:   24(fvec3) Load 26
              83:   24(fvec3) FAdd 81 82
              84:   27(fvec4) Load 73
              85:   27(fvec4) VectorShuffle 84 83 4 5 6 3
                              Store 73 85
              86:   24(fvec3) Load 26
              87:      6(int) Load 8
              88:      6(int) SDiv 87 43
              89:     46(ptr) AccessChain 41 15 88 15 21
              90:   27(fvec4) Load 89
              91:   24(fvec3) VectorShuffle 90 90 0 1 2
              92:   24(fvec3) FAdd 86 91
                              Store 26 92
              95:   24(fvec3) Load 26
              96:   24(fvec3) FNegate 95
             102:    101(ptr) AccessChain 99 100
             103:   24(fvec3) Load 102
             104:   24(fvec3) FAdd 96 103
                              Store 94(vs_TEXCOORD7) 104
             105:   27(fvec4) Load 73
             106:   24(fvec3) VectorShuffle 105 105 1 1 1
             107:      6(int) Load 8
             108:      6(int) SDiv 107 43
             109:     46(ptr) AccessChain 41 15 108 45 45
             110:   27(fvec4) Load 109
             111:   24(fvec3) VectorShuffle 110 110 0 1 2
             112:   24(fvec3) FMul 106 111
                              Store 26 112
             113:      6(int) Load 8
             114:      6(int) SDiv 113 43
             115:     46(ptr) AccessChain 41 15 114 45 15
             116:   27(fvec4) Load 115
             117:   24(fvec3) VectorShuffle 116 116 0 1 2
             118:   27(fvec4) Load 73
             119:   24(fvec3) VectorShuffle 118 118 0 0 0
             120:   24(fvec3) FMul 117 119
             121:   24(fvec3) Load 26
             122:   24(fvec3) FAdd 120 121
                              Store 26 122
             123:      6(int) Load 8
             124:      6(int) SDiv 123 43
             125:     46(ptr) AccessChain 41 15 124 45 63
             126:   27(fvec4) Load 125
             127:   24(fvec3) VectorShuffle 126 126 0 1 2
             128:   27(fvec4) Load 73
             129:   24(fvec3) VectorShuffle 128 128 2 2 2
             130:   24(fvec3) FMul 127 129
             131:   24(fvec3) Load 26
             132:   24(fvec3) FAdd 130 131
                              Store 26 132
             134:   27(fvec4) Load 73
             135:   24(fvec3) VectorShuffle 134 134 0 1 2
                              Store 133(vs_TEXCOORD3) 135
             136:   24(fvec3) Load 26
             137:      6(int) Load 8
             138:      6(int) SDiv 137 43
             139:     46(ptr) AccessChain 41 15 138 45 21
             140:   27(fvec4) Load 139
             141:   24(fvec3) VectorShuffle 140 140 0 1 2
             142:   24(fvec3) FAdd 136 141
                              Store 26 142
             143:   24(fvec3) Load 26
             144:   27(fvec4) VectorShuffle 143 143 1 1 1 1
             145:      6(int) Load 8
             146:      6(int) SDiv 145 43
             147:     46(ptr) AccessChain 41 15 146 15 45
             148:   27(fvec4) Load 147
             149:   27(fvec4) FMul 144 148
                              Store 73 149
             150:      6(int) Load 8
             151:      6(int) SDiv 150 43
             152:     46(ptr) AccessChain 41 15 151 15 15
             153:   27(fvec4) Load 152
             154:   24(fvec3) Load 26
             155:   27(fvec4) VectorShuffle 154 154 0 0 0 0
             156:   27(fvec4) FMul 153 155
             157:   27(fvec4) Load 73
             158:   27(fvec4) FAdd 156 157
                              Store 73 158
             159:      6(int) Load 8
             160:      6(int) SDiv 159 43
             161:     46(ptr) AccessChain 41 15 160 15 63
             162:   27(fvec4) Load 161
             163:   24(fvec3) Load 26
             164:   27(fvec4) VectorShuffle 163 163 2 2 2 2
             165:   27(fvec4) FMul 162 164
             166:   27(fvec4) Load 73
             167:   27(fvec4) FAdd 165 166
                              Store 73 167
             168:   27(fvec4) Load 73
             169:      6(int) Load 8
             170:      6(int) SDiv 169 43
             171:     46(ptr) AccessChain 41 15 170 15 21
             172:   27(fvec4) Load 171
             173:   27(fvec4) FAdd 168 172
                              Store 73 173
             175:   27(fvec4) Load 73
             176:   27(fvec4) VectorShuffle 175 175 1 1 1 1
             185:     46(ptr) AccessChain 183 184 45
             186:   27(fvec4) Load 185
             187:   27(fvec4) FMul 176 186
                              Store 174 187
             188:     46(ptr) AccessChain 183 184 15
             189:   27(fvec4) Load 188
             190:   27(fvec4) Load 73
             191:   27(fvec4) VectorShuffle 190 190 0 0 0 0
             192:   27(fvec4) FMul 189 191
             193:   27(fvec4) Load 174
             194:   27(fvec4) FAdd 192 193
                              Store 174 194
             195:     46(ptr) AccessChain 183 184 63
             196:   27(fvec4) Load 195
             197:   27(fvec4) Load 73
             198:   27(fvec4) VectorShuffle 197 197 2 2 2 2
             199:   27(fvec4) FMul 196 198
             200:   27(fvec4) Load 174
             201:   27(fvec4) FAdd 199 200
                              Store 174 201
             207:     46(ptr) AccessChain 183 184 21
             208:   27(fvec4) Load 207
             209:   27(fvec4) Load 73
             210:   27(fvec4) VectorShuffle 209 209 3 3 3 3
             211:   27(fvec4) FMul 208 210
             212:   27(fvec4) Load 174
             213:   27(fvec4) FAdd 211 212
             215:    214(ptr) AccessChain 206 15
                              Store 215 213
             218:   24(fvec3) Load 217
             219:      6(int) Load 8
             220:      6(int) SDiv 219 43
             221:     46(ptr) AccessChain 41 15 220 45 15
             222:   27(fvec4) Load 221
             223:   24(fvec3) VectorShuffle 222 222 0 1 2
             224:   23(float) Dot 218 223
             227:    226(ptr) AccessChain 73 225
                              Store 227 224
             228:   24(fvec3) Load 217
             229:      6(int) Load 8
             230:      6(int) SDiv 229 43
             231:     46(ptr) AccessChain 41 15 230 45 45
             232:   27(fvec4) Load 231
             233:   24(fvec3) VectorShuffle 232 232 0 1 2
             234:   23(float) Dot 228 233
             235:    226(ptr) AccessChain 73 202
                              Store 235 234
             236:   24(fvec3) Load 217
             237:      6(int) Load 8
             238:      6(int) SDiv 237 43
             239:     46(ptr) AccessChain 41 15 238 45 63
             240:   27(fvec4) Load 239
             241:   24(fvec3) VectorShuffle 240 240 0 1 2
             242:   23(float) Dot 236 241
             244:    226(ptr) AccessChain 73 243
                              Store 244 242
             245:   27(fvec4) Load 73
             246:   24(fvec3) VectorShuffle 245 245 0 1 2
             247:   27(fvec4) Load 73
             248:   24(fvec3) VectorShuffle 247 247 0 1 2
             249:   23(float) Dot 246 248
             250:    226(ptr) AccessChain 26 225
                              Store 250 249
             251:    226(ptr) AccessChain 26 225
             252:   23(float) Load 251
             253:   23(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 252
             254:    226(ptr) AccessChain 26 225
                              Store 254 253
             255:   24(fvec3) Load 26
             256:   24(fvec3) VectorShuffle 255 255 0 0 0
             257:   27(fvec4) Load 73
             258:   24(fvec3) VectorShuffle 257 257 0 1 2
             259:   24(fvec3) FMul 256 258
                              Store 26 259
             261:   24(fvec3) Load 26
                              Store 260(vs_TEXCOORD4) 261
             263:   27(fvec4) Load 262
             264:   24(fvec3) VectorShuffle 263 263 1 1 1
             265:      6(int) Load 8
             266:      6(int) SDiv 265 43
             267:     46(ptr) AccessChain 41 15 266 15 45
             268:   27(fvec4) Load 267
             269:   24(fvec3) VectorShuffle 268 268 0 1 2
             270:   24(fvec3) FMul 264 269
             271:   27(fvec4) Load 73
             272:   27(fvec4) VectorShuffle 271 270 4 5 6 3
                              Store 73 272
             273:      6(int) Load 8
             274:      6(int) SDiv 273 43
             275:     46(ptr) AccessChain 41 15 274 15 15
             276:   27(fvec4) Load 275
             277:   24(fvec3) VectorShuffle 276 276 0 1 2
             278:   27(fvec4) Load 262
             279:   24(fvec3) VectorShuffle 278 278 0 0 0
             280:   24(fvec3) FMul 277 279
             281:   27(fvec4) Load 73
             282:   24(fvec3) VectorShuffle 281 281 0 1 2
             283:   24(fvec3) FAdd 280 282
             284:   27(fvec4) Load 73
             285:   27(fvec4) VectorShuffle 284 283 4 5 6 3
                              Store 73 285
             286:      6(int) Load 8
             287:      6(int) SDiv 286 43
             288:     46(ptr) AccessChain 41 15 287 15 63
             289:   27(fvec4) Load 288
             290:   24(fvec3) VectorShuffle 289 289 0 1 2
             291:   27(fvec4) Load 262
             292:   24(fvec3) VectorShuffle 291 291 2 2 2
             293:   24(fvec3) FMul 290 292
             294:   27(fvec4) Load 73
             295:   24(fvec3) VectorShuffle 294 294 0 1 2
             296:   24(fvec3) FAdd 293 295
             297:   27(fvec4) Load 73
             298:   27(fvec4) VectorShuffle 297 296 4 5 6 3
                              Store 73 298
             300:   27(fvec4) Load 73
             301:   24(fvec3) VectorShuffle 300 300 0 1 2
             302:   27(fvec4) Load 73
             303:   24(fvec3) VectorShuffle 302 302 0 1 2
             304:   23(float) Dot 301 303
             305:    226(ptr) AccessChain 299 225
                              Store 305 304
             306:    226(ptr) AccessChain 299 225
             307:   23(float) Load 306
             308:   23(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 307
             309:    226(ptr) AccessChain 299 225
                              Store 309 308
             310:   24(fvec3) Load 299
             311:   24(fvec3) VectorShuffle 310 310 0 0 0
             312:   27(fvec4) Load 73
             313:   24(fvec3) VectorShuffle 312 312 0 1 2
             314:   24(fvec3) FMul 311 313
             315:   27(fvec4) Load 73
             316:   27(fvec4) VectorShuffle 315 314 4 5 6 3
                              Store 73 316
             318:   27(fvec4) Load 73
             319:   24(fvec3) VectorShuffle 318 318 0 1 2
                              Store 317(vs_TEXCOORD5) 319
             320:   24(fvec3) Load 26
             321:   24(fvec3) VectorShuffle 320 320 2 0 1
             322:   27(fvec4) Load 73
             323:   24(fvec3) VectorShuffle 322 322 1 2 0
             324:   24(fvec3) FMul 321 323
             325:   27(fvec4) Load 174
             326:   27(fvec4) VectorShuffle 325 324 4 5 6 3
                              Store 174 326
             327:   24(fvec3) Load 26
             328:   24(fvec3) VectorShuffle 327 327 1 2 0
             329:   27(fvec4) Load 73
             330:   24(fvec3) VectorShuffle 329 329 2 0 1
             331:   24(fvec3) FMul 328 330
             332:   27(fvec4) Load 174
             333:   24(fvec3) VectorShuffle 332 332 0 1 2
             334:   24(fvec3) FNegate 333
             335:   24(fvec3) FAdd 331 334
                              Store 299 335
             337:   24(fvec3) Load 299
             338:   27(fvec4) Load 262
             339:   24(fvec3) VectorShuffle 338 338 3 3 3
             340:   24(fvec3) FMul 337 339
                              Store 336(vs_TEXCOORD6) 340
             343:   27(fvec4) Load 342
                              Store 341(vs_TEXCOORD8) 343
             346:   27(fvec4) Load 345
                              Store 344(vs_TEXCOORD9) 346
             349:      6(int) Load 10
             350:     32(int) Bitcast 349
                              Store 348 350
             352:    351(ptr) AccessChain 206 15 202
             353:   23(float) Load 352
             354:   23(float) FNegate 353
             355:    351(ptr) AccessChain 206 15 202
                              Store 355 354
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 77

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 49 69
                              ExecutionMode 4 OriginUpperLeft
                              Name 49  "vs_TEXCOORD8"
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 16
                              MemberDecorate 12 2 Offset 32
                              MemberDecorate 12 3 Offset 48
                              MemberDecorate 12 4 Offset 64
                              MemberDecorate 12 5 Offset 80
                              MemberDecorate 12 6 Offset 96
                              MemberDecorate 12 7 Offset 112
                              MemberDecorate 12 8 Offset 128
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 0
                              MemberDecorate 30 0 Offset 0
                              MemberDecorate 30 1 Offset 8
                              Decorate 30 Block
                              Decorate 32 DescriptorSet 1
                              Decorate 32 Binding 1
                              Decorate 49(vs_TEXCOORD8) Location 0
                              Decorate 54 RelaxedPrecision
                              Decorate 57 RelaxedPrecision
                              Decorate 57 DescriptorSet 0
                              Decorate 57 Binding 1
                              Decorate 58 RelaxedPrecision
                              Decorate 61 RelaxedPrecision
                              Decorate 61 DescriptorSet 0
                              Decorate 61 Binding 0
                              Decorate 62 RelaxedPrecision
                              Decorate 67 RelaxedPrecision
                              Decorate 69 Location 0
                              Decorate 70 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 2
               8:             TypePointer Private 7(fvec2)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 4
              11:             TypeVector 6(float) 3
              12:             TypeStruct 10(fvec4) 10(fvec4) 10(fvec4) 10(fvec4) 11(fvec3) 10(fvec4) 10(fvec4) 10(fvec4) 10(fvec4)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:             TypeInt 32 1
              16:     15(int) Constant 0
              17:             TypeInt 32 0
              18:     17(int) Constant 1
              19:             TypePointer Uniform 6(float)
              22:    6(float) Constant 1056964608
              24:     17(int) Constant 0
              25:             TypePointer Private 6(float)
              27:      8(ptr) Variable Private
              30:             TypeStruct 7(fvec2) 6(float)
              31:             TypePointer Uniform 30(struct)
              32:     31(ptr) Variable Uniform
              42:     15(int) Constant 1
              48:             TypePointer Input 10(fvec4)
49(vs_TEXCOORD8):     48(ptr) Variable Input
              53:             TypePointer Private 11(fvec3)
              54:     53(ptr) Variable Private
              55:             TypeImage 6(float) 2D sampled format:Unknown
              56:             TypePointer UniformConstant 55
              57:     56(ptr) Variable UniformConstant
              59:             TypeSampler
              60:             TypePointer UniformConstant 59
              61:     60(ptr) Variable UniformConstant
              63:             TypeSampledImage 55
              68:             TypePointer Output 10(fvec4)
              69:     68(ptr) Variable Output
              73:     17(int) Constant 3
              74:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              20:     19(ptr) AccessChain 14 16 18
              21:    6(float) Load 20
              23:    6(float) FMul 21 22
              26:     25(ptr) AccessChain 9 24
                              Store 26 23
              28:     25(ptr) AccessChain 9 24
              29:    6(float) Load 28
              33:     19(ptr) AccessChain 32 16 18
              34:    6(float) Load 33
              35:    6(float) FMul 29 34
              36:     25(ptr) AccessChain 27 18
                              Store 36 35
              37:     19(ptr) AccessChain 32 16 24
              38:    6(float) Load 37
              39:     25(ptr) AccessChain 9 24
              40:    6(float) Load 39
              41:    6(float) FMul 38 40
              43:     19(ptr) AccessChain 32 42
              44:    6(float) Load 43
              45:    6(float) FAdd 41 44
              46:     25(ptr) AccessChain 27 24
                              Store 46 45
              47:    7(fvec2) Load 27
              50:   10(fvec4) Load 49(vs_TEXCOORD8)
              51:    7(fvec2) VectorShuffle 50 50 0 1
              52:    7(fvec2) FAdd 47 51
                              Store 9 52
              58:          55 Load 57
              62:          59 Load 61
              64:          63 SampledImage 58 62
              65:    7(fvec2) Load 9
              66:   10(fvec4) ImageSampleImplicitLod 64 65
              67:   11(fvec3) VectorShuffle 66 66 0 1 2
                              Store 54 67
              70:   11(fvec3) Load 54
              71:   10(fvec4) Load 69
              72:   10(fvec4) VectorShuffle 71 70 4 5 6 3
                              Store 69 72
              75:     74(ptr) AccessChain 69 73
                              Store 75 22
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }


 // Stats for Vertex shader:
 //        d3d11: 40 avg math (39..41)
 Pass {
  Name "ShadowCaster"
  Tags { "LIGHTMODE"="SHADOWCASTER" "QUEUE"="Transparent+0" "RenderType"="Transparent" "RenderPipeline"="LightweightPipeline" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 39 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (32 bytes) on slot 0 {
  Vector4 _ShadowBias at 0
  Vector3 _LightDirection at 16
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerDraw" (368 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 304
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float       
// SV_POSITION              0   xyzw        1      POS   float   xyzw
// TEXCOORD                 3   xyz         2     NONE   float   xyz 
// TEXCOORD                 4   xyz         3     NONE   float   xyz 
// TEXCOORD                 5   xyz         4     NONE   float   xyz 
// TEXCOORD                 6   xyz         5     NONE   float   xyz 
// TEXCOORD                 7   xyz         6     NONE   float   xyz 
// TEXCOORD                 8   xyzw        7     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[2], immediateIndexed
      dcl_constantbuffer CB1[5], immediateIndexed
      dcl_constantbuffer CB2[8], immediateIndexed
      dcl_constantbuffer CB3[23], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xyzw
      dcl_output_siv o1.xyzw, position
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_output o5.xyz
      dcl_output o6.xyz
      dcl_output o7.xyzw
      dcl_temps 3
   0: mul r0.xyz, v0.yyyy, cb2[1].xyzx
   1: mad r0.xyz, cb2[0].xyzx, v0.xxxx, r0.xyzx
   2: mad r0.xyz, cb2[2].xyzx, v0.zzzz, r0.xyzx
   3: mad r1.xyz, cb2[3].xyzx, v0.wwww, r0.xyzx
   4: add r0.xyz, r0.xyzx, cb2[3].xyzx
   5: add o6.xyz, -r0.xyzx, cb1[4].xyzx
   6: mul r0.xyz, r1.yyyy, cb2[5].xyzx
   7: mad r0.xyz, cb2[4].xyzx, r1.xxxx, r0.xyzx
   8: mad r0.xyz, cb2[6].xyzx, r1.zzzz, r0.xyzx
   9: mov o2.xyz, r1.xyzx
  10: add r0.xyz, r0.xyzx, cb2[7].xyzx
  11: mul r1.xyz, r0.yyyy, cb2[1].xyzx
  12: mad r0.xyw, cb2[0].xyxz, r0.xxxx, r1.xyxz
  13: mad r0.xyz, cb2[2].xyzx, r0.zzzz, r0.xywx
  14: add r0.xyz, r0.xyzx, cb2[3].xyzx
  15: mad r0.xyz, cb0[1].xyzx, cb0[0].xxxx, r0.xyzx
  16: dp3 r1.x, v1.xyzx, cb2[4].xyzx
  17: dp3 r1.y, v1.xyzx, cb2[5].xyzx
  18: dp3 r1.z, v1.xyzx, cb2[6].xyzx
  19: dp3 r0.w, r1.xyzx, r1.xyzx
  20: rsq r0.w, r0.w
  21: mul r1.xyz, r0.wwww, r1.xyzx
  22: dp3_sat r0.w, cb0[1].xyzx, r1.xyzx
  23: add r0.w, -r0.w, l(1.000000)
  24: mul r0.w, r0.w, cb0[0].y
  25: mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx
  26: mul r2.xyzw, r0.yyyy, cb3[20].xyzw
  27: mad r2.xyzw, cb3[19].xyzw, r0.xxxx, r2.xyzw
  28: mad r0.xyzw, cb3[21].xyzw, r0.zzzz, r2.xyzw
  29: add r0.xyzw, r0.xyzw, cb3[22].xyzw
  30: min o1.z, r0.w, r0.z
  31: mov o1.xyw, r0.xyxw
  32: mov o3.xyz, r1.xyzx
  33: mul r0.xyz, v2.yyyy, cb2[1].xyzx
  34: mad r0.xyz, cb2[0].xyzx, v2.xxxx, r0.xyzx
  35: mad r0.xyz, cb2[2].xyzx, v2.zzzz, r0.xyzx
  36: dp3 r0.w, r0.xyzx, r0.xyzx
  37: rsq r0.w, r0.w
  38: mul r0.xyz, r0.wwww, r0.xyzx
  39: mov o4.xyz, r0.xyzx
  40: mul r2.xyz, r0.yzxy, r1.zxyz
  41: mad r0.xyz, r1.yzxy, r0.zxyz, -r2.xyzx
  42: mul o5.xyz, r0.xyzx, v2.wwww
  43: mov o7.xyzw, v3.xyzw
  44: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float       
// SV_POSITION              0   xyzw        1      POS   float       
// TEXCOORD                 3   xyz         2     NONE   float       
// TEXCOORD                 4   xyz         3     NONE   float       
// TEXCOORD                 5   xyz         4     NONE   float       
// TEXCOORD                 6   xyz         5     NONE   float       
// TEXCOORD                 7   xyz         6     NONE   float       
// TEXCOORD                 8   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_output o0.xyzw
   0: mov o0.xyzw, l(0,0,0,0)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(_LightDirection.xyz, u_xlat1.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_TARGET0 gl_FragData[0]
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(_LightDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out highp vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (32 bytes) on slot 0 {
  Vector4 _ShadowBias at 0
  Vector3 _LightDirection at 16
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerDraw" (368 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ShadowBias;
    float3 _LightDirection;
};

struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};

struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_LightData;
    float4 unity_LightIndices[2];
    float4 unity_SpecCube0_HDR;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
};

struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 unity_FogParams;
    float4 unity_FogColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_StereoScaleOffset;
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(3) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.TEXCOORD7.xyz = (-u_xlat0.xyz) + UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat0.xyz = u_xlat1.yyy * UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz, u_xlat1.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz, u_xlat1.zzz, u_xlat0.xyz);
    output.TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat0.xyw);
    u_xlat0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = fma(VGlobals._LightDirection.xyzx.xyz, VGlobals._ShadowBias.xxx, u_xlat0.xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(VGlobals._LightDirection.xyzx.xyz, u_xlat1.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 * VGlobals._ShadowBias.y;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat9), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position.z = min(u_xlat0.w, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = fma(u_xlat1.yzx, u_xlat0.zxy, (-u_xlat2.xyz));
    output.TEXCOORD6.xyz = u_xlat0.xyz * input.TANGENT0.www;
    output.TEXCOORD8 = input.TEXCOORD1;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_TARGET0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_TARGET0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_TEXCOORD1;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec3 vs_TEXCOORD7;
out vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(_LightDirection.xyz, u_xlat1.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

layout(location = 0) out vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on set: 1, binding: 1, used in: Vertex  {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerDraw" (368 bytes) on set: 1, binding: 2, used in: Vertex  {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on set: 1, binding: 3, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "VGlobals1007408490" (28 bytes) on set: 1, binding: 0, used in: Vertex  {
  Vector3 _LightDirection at 16
  Vector4 _ShadowBias at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 369

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 78 120 180 272 287 289 334 355 361 362
                              Name 78  "vs_TEXCOORD7"
                              Name 120  "vs_TEXCOORD3"
                              Name 287  "vs_TEXCOORD4"
                              Name 334  "vs_TEXCOORD5"
                              Name 355  "vs_TEXCOORD6"
                              Name 361  "vs_TEXCOORD8"
                              Decorate 11 Location 0
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              Decorate 20 ArrayStride 16
                              MemberDecorate 21 0 Offset 0
                              MemberDecorate 21 1 Offset 64
                              MemberDecorate 21 2 Offset 128
                              MemberDecorate 21 3 Offset 144
                              MemberDecorate 21 4 Offset 160
                              MemberDecorate 21 5 Offset 176
                              MemberDecorate 21 6 Offset 208
                              MemberDecorate 21 7 Offset 224
                              MemberDecorate 21 8 Offset 240
                              MemberDecorate 21 9 Offset 256
                              MemberDecorate 21 10 Offset 272
                              MemberDecorate 21 11 Offset 288
                              MemberDecorate 21 12 Offset 304
                              MemberDecorate 21 13 Offset 320
                              MemberDecorate 21 14 Offset 336
                              MemberDecorate 21 15 Offset 352
                              Decorate 21 Block
                              Decorate 23 DescriptorSet 1
                              Decorate 23 Binding 2
                              Decorate 78(vs_TEXCOORD7) Location 4
                              MemberDecorate 82 0 Offset 0
                              MemberDecorate 82 1 Offset 16
                              MemberDecorate 82 2 Offset 32
                              MemberDecorate 82 3 Offset 48
                              MemberDecorate 82 4 Offset 64
                              MemberDecorate 82 5 Offset 80
                              MemberDecorate 82 6 Offset 96
                              MemberDecorate 82 7 Offset 112
                              MemberDecorate 82 8 Offset 128
                              Decorate 82 Block
                              Decorate 84 DescriptorSet 1
                              Decorate 84 Binding 1
                              Decorate 120(vs_TEXCOORD3) Location 0
                              MemberDecorate 165 0 Offset 0
                              MemberDecorate 165 1 Offset 16
                              Decorate 165 Block
                              Decorate 167 DescriptorSet 1
                              Decorate 167 Binding 0
                              Decorate 180 Location 1
                              Decorate 240 ArrayStride 16
                              Decorate 241 ArrayStride 16
                              Decorate 242 ArrayStride 16
                              Decorate 243 ArrayStride 16
                              MemberDecorate 244 0 Offset 0
                              MemberDecorate 244 1 Offset 16
                              MemberDecorate 244 2 Offset 32
                              MemberDecorate 244 3 Offset 48
                              MemberDecorate 244 4 Offset 64
                              MemberDecorate 244 5 Offset 80
                              MemberDecorate 244 6 Offset 96
                              MemberDecorate 244 7 Offset 112
                              MemberDecorate 244 8 Offset 176
                              MemberDecorate 244 9 Offset 240
                              MemberDecorate 244 10 Offset 304
                              MemberDecorate 244 11 Offset 368
                              MemberDecorate 244 12 Offset 384
                              MemberDecorate 244 13 Offset 400
                              Decorate 244 Block
                              Decorate 246 DescriptorSet 1
                              Decorate 246 Binding 3
                              MemberDecorate 270 0 BuiltIn Position
                              MemberDecorate 270 1 BuiltIn PointSize
                              MemberDecorate 270 2 BuiltIn ClipDistance
                              Decorate 270 Block
                              Decorate 287(vs_TEXCOORD4) Location 1
                              Decorate 289 Location 2
                              Decorate 334(vs_TEXCOORD5) Location 2
                              Decorate 355(vs_TEXCOORD6) Location 3
                              Decorate 361(vs_TEXCOORD8) Location 5
                              Decorate 362 Location 3
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              15:             TypeInt 32 0
              16:     15(int) Constant 4
              17:             TypeArray 7(fvec4) 16
              18:             TypeArray 7(fvec4) 16
              19:     15(int) Constant 2
              20:             TypeArray 7(fvec4) 19
              21:             TypeStruct 17 18 7(fvec4) 7(fvec4) 7(fvec4) 20 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4)
              22:             TypePointer Uniform 21(struct)
              23:     22(ptr) Variable Uniform
              24:             TypeInt 32 1
              25:     24(int) Constant 0
              26:     24(int) Constant 1
              27:             TypePointer Uniform 7(fvec4)
              45:     24(int) Constant 2
              57:             TypePointer Private 12(fvec3)
              58:     57(ptr) Variable Private
              59:     24(int) Constant 3
              77:             TypePointer Output 12(fvec3)
78(vs_TEXCOORD7):     77(ptr) Variable Output
              82:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 12(fvec3) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4)
              83:             TypePointer Uniform 82(struct)
              84:     83(ptr) Variable Uniform
              85:     24(int) Constant 4
              86:             TypePointer Uniform 12(fvec3)
120(vs_TEXCOORD3):     77(ptr) Variable Output
             165:             TypeStruct 7(fvec4) 12(fvec3)
             166:             TypePointer Uniform 165(struct)
             167:    166(ptr) Variable Uniform
             179:             TypePointer Input 12(fvec3)
             180:    179(ptr) Variable Input
             186:     15(int) Constant 0
             187:             TypePointer Private 6(float)
             194:     15(int) Constant 1
             202:    187(ptr) Variable Private
             217:    6(float) Constant 0
             218:    6(float) Constant 1065353216
             224:             TypePointer Uniform 6(float)
             237:      8(ptr) Variable Private
             240:             TypeArray 7(fvec4) 16
             241:             TypeArray 7(fvec4) 16
             242:             TypeArray 7(fvec4) 16
             243:             TypeArray 7(fvec4) 16
             244:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 240 241 242 243 7(fvec4) 24(int) 7(fvec4)
             245:             TypePointer Uniform 244(struct)
             246:    245(ptr) Variable Uniform
             247:     24(int) Constant 10
             269:             TypeArray 6(float) 194
             270:             TypeStruct 7(fvec4) 6(float) 269
             271:             TypePointer Output 270(struct)
             272:    271(ptr) Variable Output
             273:     15(int) Constant 3
             279:             TypePointer Output 6(float)
             283:             TypePointer Output 7(fvec4)
287(vs_TEXCOORD4):     77(ptr) Variable Output
             289:     10(ptr) Variable Input
334(vs_TEXCOORD5):     77(ptr) Variable Output
355(vs_TEXCOORD6):     77(ptr) Variable Output
361(vs_TEXCOORD8):    283(ptr) Variable Output
             362:     10(ptr) Variable Input
               4:           2 Function None 3
               5:             Label
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 1 1 1
              28:     27(ptr) AccessChain 23 25 26
              29:    7(fvec4) Load 28
              30:   12(fvec3) VectorShuffle 29 29 0 1 2
              31:   12(fvec3) FMul 14 30
              32:    7(fvec4) Load 9
              33:    7(fvec4) VectorShuffle 32 31 4 5 6 3
                              Store 9 33
              34:     27(ptr) AccessChain 23 25 25
              35:    7(fvec4) Load 34
              36:   12(fvec3) VectorShuffle 35 35 0 1 2
              37:    7(fvec4) Load 11
              38:   12(fvec3) VectorShuffle 37 37 0 0 0
              39:   12(fvec3) FMul 36 38
              40:    7(fvec4) Load 9
              41:   12(fvec3) VectorShuffle 40 40 0 1 2
              42:   12(fvec3) FAdd 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) VectorShuffle 43 42 4 5 6 3
                              Store 9 44
              46:     27(ptr) AccessChain 23 25 45
              47:    7(fvec4) Load 46
              48:   12(fvec3) VectorShuffle 47 47 0 1 2
              49:    7(fvec4) Load 11
              50:   12(fvec3) VectorShuffle 49 49 2 2 2
              51:   12(fvec3) FMul 48 50
              52:    7(fvec4) Load 9
              53:   12(fvec3) VectorShuffle 52 52 0 1 2
              54:   12(fvec3) FAdd 51 53
              55:    7(fvec4) Load 9
              56:    7(fvec4) VectorShuffle 55 54 4 5 6 3
                              Store 9 56
              60:     27(ptr) AccessChain 23 25 59
              61:    7(fvec4) Load 60
              62:   12(fvec3) VectorShuffle 61 61 0 1 2
              63:    7(fvec4) Load 11
              64:   12(fvec3) VectorShuffle 63 63 3 3 3
              65:   12(fvec3) FMul 62 64
              66:    7(fvec4) Load 9
              67:   12(fvec3) VectorShuffle 66 66 0 1 2
              68:   12(fvec3) FAdd 65 67
                              Store 58 68
              69:    7(fvec4) Load 9
              70:   12(fvec3) VectorShuffle 69 69 0 1 2
              71:     27(ptr) AccessChain 23 25 59
              72:    7(fvec4) Load 71
              73:   12(fvec3) VectorShuffle 72 72 0 1 2
              74:   12(fvec3) FAdd 70 73
              75:    7(fvec4) Load 9
              76:    7(fvec4) VectorShuffle 75 74 4 5 6 3
                              Store 9 76
              79:    7(fvec4) Load 9
              80:   12(fvec3) VectorShuffle 79 79 0 1 2
              81:   12(fvec3) FNegate 80
              87:     86(ptr) AccessChain 84 85
              88:   12(fvec3) Load 87
              89:   12(fvec3) FAdd 81 88
                              Store 78(vs_TEXCOORD7) 89
              90:   12(fvec3) Load 58
              91:   12(fvec3) VectorShuffle 90 90 1 1 1
              92:     27(ptr) AccessChain 23 26 26
              93:    7(fvec4) Load 92
              94:   12(fvec3) VectorShuffle 93 93 0 1 2
              95:   12(fvec3) FMul 91 94
              96:    7(fvec4) Load 9
              97:    7(fvec4) VectorShuffle 96 95 4 5 6 3
                              Store 9 97
              98:     27(ptr) AccessChain 23 26 25
              99:    7(fvec4) Load 98
             100:   12(fvec3) VectorShuffle 99 99 0 1 2
             101:   12(fvec3) Load 58
             102:   12(fvec3) VectorShuffle 101 101 0 0 0
             103:   12(fvec3) FMul 100 102
             104:    7(fvec4) Load 9
             105:   12(fvec3) VectorShuffle 104 104 0 1 2
             106:   12(fvec3) FAdd 103 105
             107:    7(fvec4) Load 9
             108:    7(fvec4) VectorShuffle 107 106 4 5 6 3
                              Store 9 108
             109:     27(ptr) AccessChain 23 26 45
             110:    7(fvec4) Load 109
             111:   12(fvec3) VectorShuffle 110 110 0 1 2
             112:   12(fvec3) Load 58
             113:   12(fvec3) VectorShuffle 112 112 2 2 2
             114:   12(fvec3) FMul 111 113
             115:    7(fvec4) Load 9
             116:   12(fvec3) VectorShuffle 115 115 0 1 2
             117:   12(fvec3) FAdd 114 116
             118:    7(fvec4) Load 9
             119:    7(fvec4) VectorShuffle 118 117 4 5 6 3
                              Store 9 119
             121:   12(fvec3) Load 58
                              Store 120(vs_TEXCOORD3) 121
             122:    7(fvec4) Load 9
             123:   12(fvec3) VectorShuffle 122 122 0 1 2
             124:     27(ptr) AccessChain 23 26 59
             125:    7(fvec4) Load 124
             126:   12(fvec3) VectorShuffle 125 125 0 1 2
             127:   12(fvec3) FAdd 123 126
             128:    7(fvec4) Load 9
             129:    7(fvec4) VectorShuffle 128 127 4 5 6 3
                              Store 9 129
             130:    7(fvec4) Load 9
             131:   12(fvec3) VectorShuffle 130 130 1 1 1
             132:     27(ptr) AccessChain 23 25 26
             133:    7(fvec4) Load 132
             134:   12(fvec3) VectorShuffle 133 133 0 1 2
             135:   12(fvec3) FMul 131 134
                              Store 58 135
             136:     27(ptr) AccessChain 23 25 25
             137:    7(fvec4) Load 136
             138:   12(fvec3) VectorShuffle 137 137 0 1 2
             139:    7(fvec4) Load 9
             140:   12(fvec3) VectorShuffle 139 139 0 0 0
             141:   12(fvec3) FMul 138 140
             142:   12(fvec3) Load 58
             143:   12(fvec3) FAdd 141 142
             144:    7(fvec4) Load 9
             145:    7(fvec4) VectorShuffle 144 143 4 5 2 6
                              Store 9 145
             146:     27(ptr) AccessChain 23 25 45
             147:    7(fvec4) Load 146
             148:   12(fvec3) VectorShuffle 147 147 0 1 2
             149:    7(fvec4) Load 9
             150:   12(fvec3) VectorShuffle 149 149 2 2 2
             151:   12(fvec3) FMul 148 150
             152:    7(fvec4) Load 9
             153:   12(fvec3) VectorShuffle 152 152 0 1 3
             154:   12(fvec3) FAdd 151 153
             155:    7(fvec4) Load 9
             156:    7(fvec4) VectorShuffle 155 154 4 5 6 3
                              Store 9 156
             157:    7(fvec4) Load 9
             158:   12(fvec3) VectorShuffle 157 157 0 1 2
             159:     27(ptr) AccessChain 23 25 59
             160:    7(fvec4) Load 159
             161:   12(fvec3) VectorShuffle 160 160 0 1 2
             162:   12(fvec3) FAdd 158 161
             163:    7(fvec4) Load 9
             164:    7(fvec4) VectorShuffle 163 162 4 5 6 3
                              Store 9 164
             168:     86(ptr) AccessChain 167 26
             169:   12(fvec3) Load 168
             170:     27(ptr) AccessChain 167 25
             171:    7(fvec4) Load 170
             172:   12(fvec3) VectorShuffle 171 171 0 0 0
             173:   12(fvec3) FMul 169 172
             174:    7(fvec4) Load 9
             175:   12(fvec3) VectorShuffle 174 174 0 1 2
             176:   12(fvec3) FAdd 173 175
             177:    7(fvec4) Load 9
             178:    7(fvec4) VectorShuffle 177 176 4 5 6 3
                              Store 9 178
             181:   12(fvec3) Load 180
             182:     27(ptr) AccessChain 23 26 25
             183:    7(fvec4) Load 182
             184:   12(fvec3) VectorShuffle 183 183 0 1 2
             185:    6(float) Dot 181 184
             188:    187(ptr) AccessChain 58 186
                              Store 188 185
             189:   12(fvec3) Load 180
             190:     27(ptr) AccessChain 23 26 26
             191:    7(fvec4) Load 190
             192:   12(fvec3) VectorShuffle 191 191 0 1 2
             193:    6(float) Dot 189 192
             195:    187(ptr) AccessChain 58 194
                              Store 195 193
             196:   12(fvec3) Load 180
             197:     27(ptr) AccessChain 23 26 45
             198:    7(fvec4) Load 197
             199:   12(fvec3) VectorShuffle 198 198 0 1 2
             200:    6(float) Dot 196 199
             201:    187(ptr) AccessChain 58 19
                              Store 201 200
             203:   12(fvec3) Load 58
             204:   12(fvec3) Load 58
             205:    6(float) Dot 203 204
                              Store 202 205
             206:    6(float) Load 202
             207:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 206
                              Store 202 207
             208:    6(float) Load 202
             209:   12(fvec3) CompositeConstruct 208 208 208
             210:   12(fvec3) Load 58
             211:   12(fvec3) FMul 209 210
                              Store 58 211
             212:     86(ptr) AccessChain 167 26
             213:   12(fvec3) Load 212
             214:   12(fvec3) Load 58
             215:    6(float) Dot 213 214
                              Store 202 215
             216:    6(float) Load 202
             219:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 216 217 218
                              Store 202 219
             220:    6(float) Load 202
             221:    6(float) FNegate 220
             222:    6(float) FAdd 221 218
                              Store 202 222
             223:    6(float) Load 202
             225:    224(ptr) AccessChain 167 25 194
             226:    6(float) Load 225
             227:    6(float) FMul 223 226
                              Store 202 227
             228:   12(fvec3) Load 58
             229:    6(float) Load 202
             230:   12(fvec3) CompositeConstruct 229 229 229
             231:   12(fvec3) FMul 228 230
             232:    7(fvec4) Load 9
             233:   12(fvec3) VectorShuffle 232 232 0 1 2
             234:   12(fvec3) FAdd 231 233
             235:    7(fvec4) Load 9
             236:    7(fvec4) VectorShuffle 235 234 4 5 6 3
                              Store 9 236
             238:    7(fvec4) Load 9
             239:    7(fvec4) VectorShuffle 238 238 1 1 1 1
             248:     27(ptr) AccessChain 246 247 26
             249:    7(fvec4) Load 248
             250:    7(fvec4) FMul 239 249
                              Store 237 250
             251:     27(ptr) AccessChain 246 247 25
             252:    7(fvec4) Load 251
             253:    7(fvec4) Load 9
             254:    7(fvec4) VectorShuffle 253 253 0 0 0 0
             255:    7(fvec4) FMul 252 254
             256:    7(fvec4) Load 237
             257:    7(fvec4) FAdd 255 256
                              Store 237 257
             258:     27(ptr) AccessChain 246 247 45
             259:    7(fvec4) Load 258
             260:    7(fvec4) Load 9
             261:    7(fvec4) VectorShuffle 260 260 2 2 2 2
             262:    7(fvec4) FMul 259 261
             263:    7(fvec4) Load 237
             264:    7(fvec4) FAdd 262 263
                              Store 9 264
             265:    7(fvec4) Load 9
             266:     27(ptr) AccessChain 246 247 59
             267:    7(fvec4) Load 266
             268:    7(fvec4) FAdd 265 267
                              Store 9 268
             274:    187(ptr) AccessChain 9 273
             275:    6(float) Load 274
             276:    187(ptr) AccessChain 9 19
             277:    6(float) Load 276
             278:    6(float) ExtInst 1(GLSL.std.450) 37(FMin) 275 277
             280:    279(ptr) AccessChain 272 25 19
                              Store 280 278
             281:    7(fvec4) Load 9
             282:   12(fvec3) VectorShuffle 281 281 0 1 3
             284:    283(ptr) AccessChain 272 25
             285:    7(fvec4) Load 284
             286:    7(fvec4) VectorShuffle 285 282 4 5 2 6
                              Store 284 286
             288:   12(fvec3) Load 58
                              Store 287(vs_TEXCOORD4) 288
             290:    7(fvec4) Load 289
             291:   12(fvec3) VectorShuffle 290 290 1 1 1
             292:     27(ptr) AccessChain 23 25 26
             293:    7(fvec4) Load 292
             294:   12(fvec3) VectorShuffle 293 293 0 1 2
             295:   12(fvec3) FMul 291 294
             296:    7(fvec4) Load 9
             297:    7(fvec4) VectorShuffle 296 295 4 5 6 3
                              Store 9 297
             298:     27(ptr) AccessChain 23 25 25
             299:    7(fvec4) Load 298
             300:   12(fvec3) VectorShuffle 299 299 0 1 2
             301:    7(fvec4) Load 289
             302:   12(fvec3) VectorShuffle 301 301 0 0 0
             303:   12(fvec3) FMul 300 302
             304:    7(fvec4) Load 9
             305:   12(fvec3) VectorShuffle 304 304 0 1 2
             306:   12(fvec3) FAdd 303 305
             307:    7(fvec4) Load 9
             308:    7(fvec4) VectorShuffle 307 306 4 5 6 3
                              Store 9 308
             309:     27(ptr) AccessChain 23 25 45
             310:    7(fvec4) Load 309
             311:   12(fvec3) VectorShuffle 310 310 0 1 2
             312:    7(fvec4) Load 289
             313:   12(fvec3) VectorShuffle 312 312 2 2 2
             314:   12(fvec3) FMul 311 313
             315:    7(fvec4) Load 9
             316:   12(fvec3) VectorShuffle 315 315 0 1 2
             317:   12(fvec3) FAdd 314 316
             318:    7(fvec4) Load 9
             319:    7(fvec4) VectorShuffle 318 317 4 5 6 3
                              Store 9 319
             320:    7(fvec4) Load 9
             321:   12(fvec3) VectorShuffle 320 320 0 1 2
             322:    7(fvec4) Load 9
             323:   12(fvec3) VectorShuffle 322 322 0 1 2
             324:    6(float) Dot 321 323
                              Store 202 324
             325:    6(float) Load 202
             326:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 325
                              Store 202 326
             327:    6(float) Load 202
             328:   12(fvec3) CompositeConstruct 327 327 327
             329:    7(fvec4) Load 9
             330:   12(fvec3) VectorShuffle 329 329 0 1 2
             331:   12(fvec3) FMul 328 330
             332:    7(fvec4) Load 9
             333:    7(fvec4) VectorShuffle 332 331 4 5 6 3
                              Store 9 333
             335:    7(fvec4) Load 9
             336:   12(fvec3) VectorShuffle 335 335 0 1 2
                              Store 334(vs_TEXCOORD5) 336
             337:    7(fvec4) Load 9
             338:   12(fvec3) VectorShuffle 337 337 1 2 0
             339:   12(fvec3) Load 58
             340:   12(fvec3) VectorShuffle 339 339 2 0 1
             341:   12(fvec3) FMul 338 340
             342:    7(fvec4) Load 237
             343:    7(fvec4) VectorShuffle 342 341 4 5 6 3
                              Store 237 343
             344:   12(fvec3) Load 58
             345:   12(fvec3) VectorShuffle 344 344 1 2 0
             346:    7(fvec4) Load 9
             347:   12(fvec3) VectorShuffle 346 346 2 0 1
             348:   12(fvec3) FMul 345 347
             349:    7(fvec4) Load 237
             350:   12(fvec3) VectorShuffle 349 349 0 1 2
             351:   12(fvec3) FNegate 350
             352:   12(fvec3) FAdd 348 351
             353:    7(fvec4) Load 9
             354:    7(fvec4) VectorShuffle 353 352 4 5 6 3
                              Store 9 354
             356:    7(fvec4) Load 9
             357:   12(fvec3) VectorShuffle 356 356 0 1 2
             358:    7(fvec4) Load 289
             359:   12(fvec3) VectorShuffle 358 358 3 3 3
             360:   12(fvec3) FMul 357 359
                              Store 355(vs_TEXCOORD6) 360
             363:    7(fvec4) Load 362
                              Store 361(vs_TEXCOORD8) 363
             364:    279(ptr) AccessChain 272 25 194
             365:    6(float) Load 364
             366:    6(float) FNegate 365
             367:    279(ptr) AccessChain 272 25 194
                              Store 367 366
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 13

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 9
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Output 7(fvec4)
               9:      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec4) ConstantComposite 10 10 10 10
               4:           2 Function None 3
               5:             Label
                              Store 9 11
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 41 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (32 bytes) on slot 0 {
  Vector4 _ShadowBias at 0
  Vector3 _LightDirection at 16
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 3 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 4 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float       
// SV_POSITION              0   xyzw        1      POS   float   xyzw
// TEXCOORD                 3   xyz         2     NONE   float   xyz 
// TEXCOORD                 4   xyz         3     NONE   float   xyz 
// TEXCOORD                 5   xyz         4     NONE   float   xyz 
// TEXCOORD                 6   xyz         5     NONE   float   xyz 
// TEXCOORD                 7   xyz         6     NONE   float   xyz 
// TEXCOORD                 8   xyzw        7     NONE   float   xyzw
// SV_InstanceID            0   x           8     NONE    uint   x   
//
      vs_4_0
      dcl_constantbuffer CB0[2], immediateIndexed
      dcl_constantbuffer CB1[5], immediateIndexed
      dcl_constantbuffer CB2[23], immediateIndexed
      dcl_constantbuffer CB3[1], immediateIndexed
      dcl_constantbuffer CB4[16], dynamicIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xyzw
      dcl_input_sgv v4.x, instance_id
      dcl_output_siv o1.xyzw, position
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_output o5.xyz
      dcl_output o6.xyz
      dcl_output o7.xyzw
      dcl_output o8.x
      dcl_temps 3
   0: iadd r0.x, v4.x, cb3[0].x
   1: ishl r0.x, r0.x, l(3)
   2: mul r0.yzw, v0.yyyy, cb4[r0.x + 1].xxyz
   3: mad r0.yzw, cb4[r0.x + 0].xxyz, v0.xxxx, r0.yyzw
   4: mad r0.yzw, cb4[r0.x + 2].xxyz, v0.zzzz, r0.yyzw
   5: mad r1.xyz, cb4[r0.x + 3].xyzx, v0.wwww, r0.yzwy
   6: add r0.yzw, r0.yyzw, cb4[r0.x + 3].xxyz
   7: add o6.xyz, -r0.yzwy, cb1[4].xyzx
   8: mul r0.yzw, r1.yyyy, cb4[r0.x + 5].xxyz
   9: mad r0.yzw, cb4[r0.x + 4].xxyz, r1.xxxx, r0.yyzw
  10: mad r0.yzw, cb4[r0.x + 6].xxyz, r1.zzzz, r0.yyzw
  11: mov o2.xyz, r1.xyzx
  12: add r0.yzw, r0.yyzw, cb4[r0.x + 7].xxyz
  13: mul r1.xyz, r0.zzzz, cb4[r0.x + 1].xyzx
  14: mad r1.xyz, cb4[r0.x + 0].xyzx, r0.yyyy, r1.xyzx
  15: mad r0.yzw, cb4[r0.x + 2].xxyz, r0.wwww, r1.xxyz
  16: add r0.yzw, r0.yyzw, cb4[r0.x + 3].xxyz
  17: mad r0.yzw, cb0[1].xxyz, cb0[0].xxxx, r0.yyzw
  18: dp3 r1.x, v1.xyzx, cb4[r0.x + 4].xyzx
  19: dp3 r1.y, v1.xyzx, cb4[r0.x + 5].xyzx
  20: dp3 r1.z, v1.xyzx, cb4[r0.x + 6].xyzx
  21: dp3 r1.w, r1.xyzx, r1.xyzx
  22: rsq r1.w, r1.w
  23: mul r1.xyz, r1.wwww, r1.xyzx
  24: dp3_sat r1.w, cb0[1].xyzx, r1.xyzx
  25: add r1.w, -r1.w, l(1.000000)
  26: mul r1.w, r1.w, cb0[0].y
  27: mad r0.yzw, r1.xxyz, r1.wwww, r0.yyzw
  28: mul r2.xyzw, r0.zzzz, cb2[20].xyzw
  29: mad r2.xyzw, cb2[19].xyzw, r0.yyyy, r2.xyzw
  30: mad r2.xyzw, cb2[21].xyzw, r0.wwww, r2.xyzw
  31: add r2.xyzw, r2.xyzw, cb2[22].xyzw
  32: min o1.z, r2.w, r2.z
  33: mov o1.xyw, r2.xyxw
  34: mov o3.xyz, r1.xyzx
  35: mul r0.yzw, v2.yyyy, cb4[r0.x + 1].xxyz
  36: mad r0.yzw, cb4[r0.x + 0].xxyz, v2.xxxx, r0.yyzw
  37: mad r0.xyz, cb4[r0.x + 2].xyzx, v2.zzzz, r0.yzwy
  38: dp3 r0.w, r0.xyzx, r0.xyzx
  39: rsq r0.w, r0.w
  40: mul r0.xyz, r0.wwww, r0.xyzx
  41: mov o4.xyz, r0.xyzx
  42: mul r2.xyz, r0.yzxy, r1.zxyz
  43: mad r0.xyz, r1.yzxy, r0.zxyz, -r2.xyzx
  44: mul o5.xyz, r0.xyzx, v2.wwww
  45: mov o7.xyzw, v3.xyzw
  46: mov o8.x, v4.x
  47: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float       
// SV_POSITION              0   xyzw        1      POS   float       
// TEXCOORD                 3   xyz         2     NONE   float       
// TEXCOORD                 4   xyz         3     NONE   float       
// TEXCOORD                 5   xyz         4     NONE   float       
// TEXCOORD                 6   xyz         5     NONE   float       
// TEXCOORD                 7   xyz         6     NONE   float       
// TEXCOORD                 8   xyzw        7     NONE   float       
// SV_InstanceID            0   x           8     NONE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_output o0.xyzw
   0: mov o0.xyzw, l(0,0,0,0)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 0 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = int(u_xlati0 << 3);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat1.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[3].xyz;
    u_xlat1.xyz = u_xlat3.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat3.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat10 = dot(_LightDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat10 = (-u_xlat10) + 1.0;
    u_xlat10 = u_xlat10 * _ShadowBias.y;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat2.w), u_xlat2.z);
    gl_Position.xyw = u_xlat2.xyw;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD1;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out highp vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (32 bytes) on slot 0 {
  Vector4 _ShadowBias at 0
  Vector3 _LightDirection at 16
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 3 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 4 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ShadowBias;
    float3 _LightDirection;
};

struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};

struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 unity_FogParams;
    float4 unity_FogColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_StereoScaleOffset;
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_Builtins0Array_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
    float4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};

struct UnityInstancing_PerDraw0_Type
{
    unity_Builtins0Array_Type unity_Builtins0Array[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(2) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(3) ]],
    const constant unity_Builtins0Array_Type* UnityInstancing_PerDraw0 [[ buffer(4) ]],
    uint mtl_InstanceID [[ instance_id ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float3 u_xlat0;
    int u_xlati0;
    float3 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float u_xlat9;
    float u_xlat10;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 0x3;
    u_xlat3.xyz = input.POSITION0.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, input.POSITION0.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, input.POSITION0.zzz, u_xlat3.xyz);
    u_xlat1.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz, input.POSITION0.www, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    output.TEXCOORD7.xyz = (-u_xlat3.xyz) + UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat3.xyz = u_xlat1.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz, u_xlat1.zzz, u_xlat3.xyz);
    output.TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[3].xyz;
    u_xlat1.xyz = u_xlat3.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, u_xlat3.xxx, u_xlat1.xyz);
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, u_xlat3.zzz, u_xlat1.xyz);
    u_xlat3.xyz = u_xlat3.xyz + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = fma(VGlobals._LightDirection.xyzx.xyz, VGlobals._ShadowBias.xxx, u_xlat3.xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    u_xlat1.xyz = float3(u_xlat10) * u_xlat1.xyz;
    u_xlat10 = dot(VGlobals._LightDirection.xyzx.xyz, u_xlat1.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat10 = (-u_xlat10) + 1.0;
    u_xlat10 = u_xlat10 * VGlobals._ShadowBias.y;
    u_xlat3.xyz = fma(u_xlat1.xyz, float3(u_xlat10), u_xlat3.xyz);
    u_xlat2 = u_xlat3.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat2);
    u_xlat2 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat2);
    u_xlat2 = u_xlat2 + UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position.z = min(u_xlat2.w, u_xlat2.z);
    output.mtl_Position.xyw = u_xlat2.xyw;
    output.TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat3.xyz = input.TANGENT0.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, input.TANGENT0.xxx, u_xlat3.xyz);
    u_xlat0.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, input.TANGENT0.zzz, u_xlat3.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = fma(u_xlat1.yzx, u_xlat0.zxy, (-u_xlat2.xyz));
    output.TEXCOORD6.xyz = u_xlat0.xyz * input.TANGENT0.www;
    output.TEXCOORD8 = input.TEXCOORD1;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_TARGET0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_TARGET0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 0 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_TEXCOORD1;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec3 vs_TEXCOORD7;
out vec4 vs_TEXCOORD8;
flat out uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat1.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[3].xyz;
    u_xlat1.xyz = u_xlat3.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat3.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat10 = dot(_LightDirection.xyz, u_xlat1.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat10 = (-u_xlat10) + 1.0;
    u_xlat10 = u_xlat10 * _ShadowBias.y;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat2.w), u_xlat2.z);
    gl_Position.xyw = u_xlat2.xyw;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD1;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

layout(location = 0) out vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Specialization constant id: 0 name: "UNITY_RUNTIME_INSTANCING_ARRAY_SIZE", used in: Vertex 

Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 3, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on set: 1, binding: 4, used in: Vertex  {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}
Constant Buffer "UnityPerCamera" (144 bytes) on set: 1, binding: 1, used in: Vertex  {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on set: 1, binding: 2, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "VGlobals2481352881" (28 bytes) on set: 1, binding: 0, used in: Vertex  {
  Vector3 _LightDirection at 16
  Vector4 _ShadowBias at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 375

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 10 29 91 130 186 283 298 300 340 358 363 364 367
                              Name 91  "vs_TEXCOORD7"
                              Name 130  "vs_TEXCOORD3"
                              Name 298  "vs_TEXCOORD4"
                              Name 340  "vs_TEXCOORD5"
                              Name 358  "vs_TEXCOORD6"
                              Name 363  "vs_TEXCOORD8"
                              Decorate 10 BuiltIn InstanceIndex
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 4
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 3
                              Decorate 29 Location 0
                              Decorate 34 ArrayStride 16
                              Decorate 35 ArrayStride 16
                              MemberDecorate 36 0 Offset 0
                              MemberDecorate 36 1 Offset 64
                              Decorate 37 SpecId 0
                              Decorate 38 ArrayStride 128
                              MemberDecorate 39 0 Offset 0
                              Decorate 39 Block
                              Decorate 41 DescriptorSet 1
                              Decorate 41 Binding 4
                              Decorate 91(vs_TEXCOORD7) Location 4
                              MemberDecorate 94 0 Offset 0
                              MemberDecorate 94 1 Offset 16
                              MemberDecorate 94 2 Offset 32
                              MemberDecorate 94 3 Offset 48
                              MemberDecorate 94 4 Offset 64
                              MemberDecorate 94 5 Offset 80
                              MemberDecorate 94 6 Offset 96
                              MemberDecorate 94 7 Offset 112
                              MemberDecorate 94 8 Offset 128
                              Decorate 94 Block
                              Decorate 96 DescriptorSet 1
                              Decorate 96 Binding 1
                              Decorate 130(vs_TEXCOORD3) Location 0
                              MemberDecorate 174 0 Offset 0
                              MemberDecorate 174 1 Offset 16
                              Decorate 174 Block
                              Decorate 176 DescriptorSet 1
                              Decorate 176 Binding 0
                              Decorate 186 Location 1
                              Decorate 251 ArrayStride 16
                              Decorate 252 ArrayStride 16
                              Decorate 253 ArrayStride 16
                              Decorate 254 ArrayStride 16
                              MemberDecorate 255 0 Offset 0
                              MemberDecorate 255 1 Offset 16
                              MemberDecorate 255 2 Offset 32
                              MemberDecorate 255 3 Offset 48
                              MemberDecorate 255 4 Offset 64
                              MemberDecorate 255 5 Offset 80
                              MemberDecorate 255 6 Offset 96
                              MemberDecorate 255 7 Offset 112
                              MemberDecorate 255 8 Offset 176
                              MemberDecorate 255 9 Offset 240
                              MemberDecorate 255 10 Offset 304
                              MemberDecorate 255 11 Offset 368
                              MemberDecorate 255 12 Offset 384
                              MemberDecorate 255 13 Offset 400
                              Decorate 255 Block
                              Decorate 257 DescriptorSet 1
                              Decorate 257 Binding 2
                              MemberDecorate 281 0 BuiltIn Position
                              MemberDecorate 281 1 BuiltIn PointSize
                              MemberDecorate 281 2 BuiltIn ClipDistance
                              Decorate 281 Block
                              Decorate 298(vs_TEXCOORD4) Location 1
                              Decorate 300 Location 2
                              Decorate 340(vs_TEXCOORD5) Location 2
                              Decorate 358(vs_TEXCOORD6) Location 3
                              Decorate 363(vs_TEXCOORD8) Location 5
                              Decorate 364 Location 3
                              Decorate 367 Flat
                              Decorate 367 Location 6
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeInt 32 1
               7:             TypePointer Private 6(int)
               8:      7(ptr) Variable Private
               9:             TypePointer Input 6(int)
              10:      9(ptr) Variable Input
              12:             TypeStruct 6(int) 6(int)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:      6(int) Constant 0
              16:             TypePointer Uniform 6(int)
              21:      6(int) Constant 3
              23:             TypeFloat 32
              24:             TypeVector 23(float) 3
              25:             TypePointer Private 24(fvec3)
              26:     25(ptr) Variable Private
              27:             TypeVector 23(float) 4
              28:             TypePointer Input 27(fvec4)
              29:     28(ptr) Variable Input
              32:             TypeInt 32 0
              33:     32(int) Constant 4
              34:             TypeArray 27(fvec4) 33
              35:             TypeArray 27(fvec4) 33
              36:             TypeStruct 34 35
              37:      6(int) SpecConstant 2
              38:             TypeArray 36(struct) 37
              39:             TypeStruct 38
              40:             TypePointer Uniform 39(struct)
              41:     40(ptr) Variable Uniform
              43:      6(int) Constant 8
              45:      6(int) Constant 1
              46:             TypePointer Uniform 27(fvec4)
              63:      6(int) Constant 2
              72:     25(ptr) Variable Private
              90:             TypePointer Output 24(fvec3)
91(vs_TEXCOORD7):     90(ptr) Variable Output
              94:             TypeStruct 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 24(fvec3) 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4)
              95:             TypePointer Uniform 94(struct)
              96:     95(ptr) Variable Uniform
              97:      6(int) Constant 4
              98:             TypePointer Uniform 24(fvec3)
130(vs_TEXCOORD3):     90(ptr) Variable Output
             174:             TypeStruct 27(fvec4) 24(fvec3)
             175:             TypePointer Uniform 174(struct)
             176:    175(ptr) Variable Uniform
             185:             TypePointer Input 24(fvec3)
             186:    185(ptr) Variable Input
             194:     32(int) Constant 0
             195:             TypePointer Private 23(float)
             204:     32(int) Constant 1
             213:     32(int) Constant 2
             215:    195(ptr) Variable Private
             230:   23(float) Constant 0
             231:   23(float) Constant 1065353216
             237:             TypePointer Uniform 23(float)
             247:             TypePointer Private 27(fvec4)
             248:    247(ptr) Variable Private
             251:             TypeArray 27(fvec4) 33
             252:             TypeArray 27(fvec4) 33
             253:             TypeArray 27(fvec4) 33
             254:             TypeArray 27(fvec4) 33
             255:             TypeStruct 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 27(fvec4) 251 252 253 254 27(fvec4) 6(int) 27(fvec4)
             256:             TypePointer Uniform 255(struct)
             257:    256(ptr) Variable Uniform
             258:      6(int) Constant 10
             280:             TypeArray 23(float) 204
             281:             TypeStruct 27(fvec4) 23(float) 280
             282:             TypePointer Output 281(struct)
             283:    282(ptr) Variable Output
             284:     32(int) Constant 3
             290:             TypePointer Output 23(float)
             294:             TypePointer Output 27(fvec4)
298(vs_TEXCOORD4):     90(ptr) Variable Output
             300:     28(ptr) Variable Input
             319:     25(ptr) Variable Private
             330:    195(ptr) Variable Private
340(vs_TEXCOORD5):     90(ptr) Variable Output
358(vs_TEXCOORD6):     90(ptr) Variable Output
363(vs_TEXCOORD8):    294(ptr) Variable Output
             364:     28(ptr) Variable Input
             366:             TypePointer Output 32(int)
             367:    366(ptr) Variable Output
               4:           2 Function None 3
               5:             Label
              11:      6(int) Load 10
              17:     16(ptr) AccessChain 14 15
              18:      6(int) Load 17
              19:      6(int) IAdd 11 18
                              Store 8 19
              20:      6(int) Load 8
              22:      6(int) ShiftLeftLogical 20 21
                              Store 8 22
              30:   27(fvec4) Load 29
              31:   24(fvec3) VectorShuffle 30 30 1 1 1
              42:      6(int) Load 8
              44:      6(int) SDiv 42 43
              47:     46(ptr) AccessChain 41 15 44 15 45
              48:   27(fvec4) Load 47
              49:   24(fvec3) VectorShuffle 48 48 0 1 2
              50:   24(fvec3) FMul 31 49
                              Store 26 50
              51:      6(int) Load 8
              52:      6(int) SDiv 51 43
              53:     46(ptr) AccessChain 41 15 52 15 15
              54:   27(fvec4) Load 53
              55:   24(fvec3) VectorShuffle 54 54 0 1 2
              56:   27(fvec4) Load 29
              57:   24(fvec3) VectorShuffle 56 56 0 0 0
              58:   24(fvec3) FMul 55 57
              59:   24(fvec3) Load 26
              60:   24(fvec3) FAdd 58 59
                              Store 26 60
              61:      6(int) Load 8
              62:      6(int) SDiv 61 43
              64:     46(ptr) AccessChain 41 15 62 15 63
              65:   27(fvec4) Load 64
              66:   24(fvec3) VectorShuffle 65 65 0 1 2
              67:   27(fvec4) Load 29
              68:   24(fvec3) VectorShuffle 67 67 2 2 2
              69:   24(fvec3) FMul 66 68
              70:   24(fvec3) Load 26
              71:   24(fvec3) FAdd 69 70
                              Store 26 71
              73:      6(int) Load 8
              74:      6(int) SDiv 73 43
              75:     46(ptr) AccessChain 41 15 74 15 21
              76:   27(fvec4) Load 75
              77:   24(fvec3) VectorShuffle 76 76 0 1 2
              78:   27(fvec4) Load 29
              79:   24(fvec3) VectorShuffle 78 78 3 3 3
              80:   24(fvec3) FMul 77 79
              81:   24(fvec3) Load 26
              82:   24(fvec3) FAdd 80 81
                              Store 72 82
              83:   24(fvec3) Load 26
              84:      6(int) Load 8
              85:      6(int) SDiv 84 43
              86:     46(ptr) AccessChain 41 15 85 15 21
              87:   27(fvec4) Load 86
              88:   24(fvec3) VectorShuffle 87 87 0 1 2
              89:   24(fvec3) FAdd 83 88
                              Store 26 89
              92:   24(fvec3) Load 26
              93:   24(fvec3) FNegate 92
              99:     98(ptr) AccessChain 96 97
             100:   24(fvec3) Load 99
             101:   24(fvec3) FAdd 93 100
                              Store 91(vs_TEXCOORD7) 101
             102:   24(fvec3) Load 72
             103:   24(fvec3) VectorShuffle 102 102 1 1 1
             104:      6(int) Load 8
             105:      6(int) SDiv 104 43
             106:     46(ptr) AccessChain 41 15 105 45 45
             107:   27(fvec4) Load 106
             108:   24(fvec3) VectorShuffle 107 107 0 1 2
             109:   24(fvec3) FMul 103 108
                              Store 26 109
             110:      6(int) Load 8
             111:      6(int) SDiv 110 43
             112:     46(ptr) AccessChain 41 15 111 45 15
             113:   27(fvec4) Load 112
             114:   24(fvec3) VectorShuffle 113 113 0 1 2
             115:   24(fvec3) Load 72
             116:   24(fvec3) VectorShuffle 115 115 0 0 0
             117:   24(fvec3) FMul 114 116
             118:   24(fvec3) Load 26
             119:   24(fvec3) FAdd 117 118
                              Store 26 119
             120:      6(int) Load 8
             121:      6(int) SDiv 120 43
             122:     46(ptr) AccessChain 41 15 121 45 63
             123:   27(fvec4) Load 122
             124:   24(fvec3) VectorShuffle 123 123 0 1 2
             125:   24(fvec3) Load 72
             126:   24(fvec3) VectorShuffle 125 125 2 2 2
             127:   24(fvec3) FMul 124 126
             128:   24(fvec3) Load 26
             129:   24(fvec3) FAdd 127 128
                              Store 26 129
             131:   24(fvec3) Load 72
                              Store 130(vs_TEXCOORD3) 131
             132:   24(fvec3) Load 26
             133:      6(int) Load 8
             134:      6(int) SDiv 133 43
             135:     46(ptr) AccessChain 41 15 134 45 21
             136:   27(fvec4) Load 135
             137:   24(fvec3) VectorShuffle 136 136 0 1 2
             138:   24(fvec3) FAdd 132 137
                              Store 26 138
             139:   24(fvec3) Load 26
             140:   24(fvec3) VectorShuffle 139 139 1 1 1
             141:      6(int) Load 8
             142:      6(int) SDiv 141 43
             143:     46(ptr) AccessChain 41 15 142 15 45
             144:   27(fvec4) Load 143
             145:   24(fvec3) VectorShuffle 144 144 0 1 2
             146:   24(fvec3) FMul 140 145
                              Store 72 146
             147:      6(int) Load 8
             148:      6(int) SDiv 147 43
             149:     46(ptr) AccessChain 41 15 148 15 15
             150:   27(fvec4) Load 149
             151:   24(fvec3) VectorShuffle 150 150 0 1 2
             152:   24(fvec3) Load 26
             153:   24(fvec3) VectorShuffle 152 152 0 0 0
             154:   24(fvec3) FMul 151 153
             155:   24(fvec3) Load 72
             156:   24(fvec3) FAdd 154 155
                              Store 72 156
             157:      6(int) Load 8
             158:      6(int) SDiv 157 43
             159:     46(ptr) AccessChain 41 15 158 15 63
             160:   27(fvec4) Load 159
             161:   24(fvec3) VectorShuffle 160 160 0 1 2
             162:   24(fvec3) Load 26
             163:   24(fvec3) VectorShuffle 162 162 2 2 2
             164:   24(fvec3) FMul 161 163
             165:   24(fvec3) Load 72
             166:   24(fvec3) FAdd 164 165
                              Store 26 166
             167:   24(fvec3) Load 26
             168:      6(int) Load 8
             169:      6(int) SDiv 168 43
             170:     46(ptr) AccessChain 41 15 169 15 21
             171:   27(fvec4) Load 170
             172:   24(fvec3) VectorShuffle 171 171 0 1 2
             173:   24(fvec3) FAdd 167 172
                              Store 26 173
             177:     98(ptr) AccessChain 176 45
             178:   24(fvec3) Load 177
             179:     46(ptr) AccessChain 176 15
             180:   27(fvec4) Load 179
             181:   24(fvec3) VectorShuffle 180 180 0 0 0
             182:   24(fvec3) FMul 178 181
             183:   24(fvec3) Load 26
             184:   24(fvec3) FAdd 182 183
                              Store 26 184
             187:   24(fvec3) Load 186
             188:      6(int) Load 8
             189:      6(int) SDiv 188 43
             190:     46(ptr) AccessChain 41 15 189 45 15
             191:   27(fvec4) Load 190
             192:   24(fvec3) VectorShuffle 191 191 0 1 2
             193:   23(float) Dot 187 192
             196:    195(ptr) AccessChain 72 194
                              Store 196 193
             197:   24(fvec3) Load 186
             198:      6(int) Load 8
             199:      6(int) SDiv 198 43
             200:     46(ptr) AccessChain 41 15 199 45 45
             201:   27(fvec4) Load 200
             202:   24(fvec3) VectorShuffle 201 201 0 1 2
             203:   23(float) Dot 197 202
             205:    195(ptr) AccessChain 72 204
                              Store 205 203
             206:   24(fvec3) Load 186
             207:      6(int) Load 8
             208:      6(int) SDiv 207 43
             209:     46(ptr) AccessChain 41 15 208 45 63
             210:   27(fvec4) Load 209
             211:   24(fvec3) VectorShuffle 210 210 0 1 2
             212:   23(float) Dot 206 211
             214:    195(ptr) AccessChain 72 213
                              Store 214 212
             216:   24(fvec3) Load 72
             217:   24(fvec3) Load 72
             218:   23(float) Dot 216 217
                              Store 215 218
             219:   23(float) Load 215
             220:   23(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 219
                              Store 215 220
             221:   23(float) Load 215
             222:   24(fvec3) CompositeConstruct 221 221 221
             223:   24(fvec3) Load 72
             224:   24(fvec3) FMul 222 223
                              Store 72 224
             225:     98(ptr) AccessChain 176 45
             226:   24(fvec3) Load 225
             227:   24(fvec3) Load 72
             228:   23(float) Dot 226 227
                              Store 215 228
             229:   23(float) Load 215
             232:   23(float) ExtInst 1(GLSL.std.450) 43(FClamp) 229 230 231
                              Store 215 232
             233:   23(float) Load 215
             234:   23(float) FNegate 233
             235:   23(float) FAdd 234 231
                              Store 215 235
             236:   23(float) Load 215
             238:    237(ptr) AccessChain 176 15 204
             239:   23(float) Load 238
             240:   23(float) FMul 236 239
                              Store 215 240
             241:   24(fvec3) Load 72
             242:   23(float) Load 215
             243:   24(fvec3) CompositeConstruct 242 242 242
             244:   24(fvec3) FMul 241 243
             245:   24(fvec3) Load 26
             246:   24(fvec3) FAdd 244 245
                              Store 26 246
             249:   24(fvec3) Load 26
             250:   27(fvec4) VectorShuffle 249 249 1 1 1 1
             259:     46(ptr) AccessChain 257 258 45
             260:   27(fvec4) Load 259
             261:   27(fvec4) FMul 250 260
                              Store 248 261
             262:     46(ptr) AccessChain 257 258 15
             263:   27(fvec4) Load 262
             264:   24(fvec3) Load 26
             265:   27(fvec4) VectorShuffle 264 264 0 0 0 0
             266:   27(fvec4) FMul 263 265
             267:   27(fvec4) Load 248
             268:   27(fvec4) FAdd 266 267
                              Store 248 268
             269:     46(ptr) AccessChain 257 258 63
             270:   27(fvec4) Load 269
             271:   24(fvec3) Load 26
             272:   27(fvec4) VectorShuffle 271 271 2 2 2 2
             273:   27(fvec4) FMul 270 272
             274:   27(fvec4) Load 248
             275:   27(fvec4) FAdd 273 274
                              Store 248 275
             276:   27(fvec4) Load 248
             277:     46(ptr) AccessChain 257 258 21
             278:   27(fvec4) Load 277
             279:   27(fvec4) FAdd 276 278
                              Store 248 279
             285:    195(ptr) AccessChain 248 284
             286:   23(float) Load 285
             287:    195(ptr) AccessChain 248 213
             288:   23(float) Load 287
             289:   23(float) ExtInst 1(GLSL.std.450) 37(FMin) 286 288
             291:    290(ptr) AccessChain 283 15 213
                              Store 291 289
             292:   27(fvec4) Load 248
             293:   24(fvec3) VectorShuffle 292 292 0 1 3
             295:    294(ptr) AccessChain 283 15
             296:   27(fvec4) Load 295
             297:   27(fvec4) VectorShuffle 296 293 4 5 2 6
                              Store 295 297
             299:   24(fvec3) Load 72
                              Store 298(vs_TEXCOORD4) 299
             301:   27(fvec4) Load 300
             302:   24(fvec3) VectorShuffle 301 301 1 1 1
             303:      6(int) Load 8
             304:      6(int) SDiv 303 43
             305:     46(ptr) AccessChain 41 15 304 15 45
             306:   27(fvec4) Load 305
             307:   24(fvec3) VectorShuffle 306 306 0 1 2
             308:   24(fvec3) FMul 302 307
                              Store 26 308
             309:      6(int) Load 8
             310:      6(int) SDiv 309 43
             311:     46(ptr) AccessChain 41 15 310 15 15
             312:   27(fvec4) Load 311
             313:   24(fvec3) VectorShuffle 312 312 0 1 2
             314:   27(fvec4) Load 300
             315:   24(fvec3) VectorShuffle 314 314 0 0 0
             316:   24(fvec3) FMul 313 315
             317:   24(fvec3) Load 26
             318:   24(fvec3) FAdd 316 317
                              Store 26 318
             320:      6(int) Load 8
             321:      6(int) SDiv 320 43
             322:     46(ptr) AccessChain 41 15 321 15 63
             323:   27(fvec4) Load 322
             324:   24(fvec3) VectorShuffle 323 323 0 1 2
             325:   27(fvec4) Load 300
             326:   24(fvec3) VectorShuffle 325 325 2 2 2
             327:   24(fvec3) FMul 324 326
             328:   24(fvec3) Load 26
             329:   24(fvec3) FAdd 327 328
                              Store 319 329
             331:   24(fvec3) Load 319
             332:   24(fvec3) Load 319
             333:   23(float) Dot 331 332
                              Store 330 333
             334:   23(float) Load 330
             335:   23(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 334
                              Store 330 335
             336:   23(float) Load 330
             337:   24(fvec3) CompositeConstruct 336 336 336
             338:   24(fvec3) Load 319
             339:   24(fvec3) FMul 337 338
                              Store 319 339
             341:   24(fvec3) Load 319
                              Store 340(vs_TEXCOORD5) 341
             342:   24(fvec3) Load 319
             343:   24(fvec3) VectorShuffle 342 342 1 2 0
             344:   24(fvec3) Load 72
             345:   24(fvec3) VectorShuffle 344 344 2 0 1
             346:   24(fvec3) FMul 343 345
             347:   27(fvec4) Load 248
             348:   27(fvec4) VectorShuffle 347 346 4 5 6 3
                              Store 248 348
             349:   24(fvec3) Load 72
             350:   24(fvec3) VectorShuffle 349 349 1 2 0
             351:   24(fvec3) Load 319
             352:   24(fvec3) VectorShuffle 351 351 2 0 1
             353:   24(fvec3) FMul 350 352
             354:   27(fvec4) Load 248
             355:   24(fvec3) VectorShuffle 354 354 0 1 2
             356:   24(fvec3) FNegate 355
             357:   24(fvec3) FAdd 353 356
                              Store 319 357
             359:   24(fvec3) Load 319
             360:   27(fvec4) Load 300
             361:   24(fvec3) VectorShuffle 360 360 3 3 3
             362:   24(fvec3) FMul 359 361
                              Store 358(vs_TEXCOORD6) 362
             365:   27(fvec4) Load 364
                              Store 363(vs_TEXCOORD8) 365
             368:      6(int) Load 10
             369:     32(int) Bitcast 368
                              Store 367 369
             370:    290(ptr) AccessChain 283 15 204
             371:   23(float) Load 370
             372:   23(float) FNegate 371
             373:    290(ptr) AccessChain 283 15 204
                              Store 373 372
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 13

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 9
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Output 7(fvec4)
               9:      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec4) ConstantComposite 10 10 10 10
               4:           2 Function None 3
               5:             Label
                              Store 9 11
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }


 // Stats for Vertex shader:
 //        d3d11: 34 avg math (33..35)
 Pass {
  Name "DepthOnly"
  Tags { "LIGHTMODE"="DepthOnly" "QUEUE"="Transparent+0" "RenderType"="Transparent" "RenderPipeline"="LightweightPipeline" }
  ColorMask 0
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 33 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerDraw" (368 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 304
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// SV_POSITION              0   xyzw        1      POS   float   xyzw
// TEXCOORD                 3   xyz         2     NONE   float   xyz 
// TEXCOORD                 4   xyz         3     NONE   float   xyz 
// TEXCOORD                 5   xyz         4     NONE   float   xyz 
// TEXCOORD                 6   xyz         5     NONE   float   xyz 
// TEXCOORD                 7   xyz         6     NONE   float   xyz 
// TEXCOORD                 8   xyzw        7     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[8], immediateIndexed
      dcl_constantbuffer CB2[23], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xyzw
      dcl_output o0.xy
      dcl_output_siv o1.xyzw, position
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_output o5.xyz
      dcl_output o6.xyz
      dcl_output o7.xyzw
      dcl_temps 3
   0: mov o0.xy, l(0,0,0,0)
   1: mul r0.xyz, v0.yyyy, cb1[1].xyzx
   2: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
   3: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
   4: mad r1.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: add r0.xyz, r0.xyzx, cb1[3].xyzx
   6: add o6.xyz, -r0.xyzx, cb0[4].xyzx
   7: mul r0.xyz, r1.yyyy, cb1[5].xyzx
   8: mad r0.xyz, cb1[4].xyzx, r1.xxxx, r0.xyzx
   9: mad r0.xyz, cb1[6].xyzx, r1.zzzz, r0.xyzx
  10: mov o2.xyz, r1.xyzx
  11: add r0.xyz, r0.xyzx, cb1[7].xyzx
  12: mul r1.xyzw, r0.yyyy, cb1[1].xyzw
  13: mad r1.xyzw, cb1[0].xyzw, r0.xxxx, r1.xyzw
  14: mad r0.xyzw, cb1[2].xyzw, r0.zzzz, r1.xyzw
  15: add r0.xyzw, r0.xyzw, cb1[3].xyzw
  16: mul r1.xyzw, r0.yyyy, cb2[20].xyzw
  17: mad r1.xyzw, cb2[19].xyzw, r0.xxxx, r1.xyzw
  18: mad r1.xyzw, cb2[21].xyzw, r0.zzzz, r1.xyzw
  19: mad o1.xyzw, cb2[22].xyzw, r0.wwww, r1.xyzw
  20: dp3 r0.x, v1.xyzx, cb1[4].xyzx
  21: dp3 r0.y, v1.xyzx, cb1[5].xyzx
  22: dp3 r0.z, v1.xyzx, cb1[6].xyzx
  23: dp3 r0.w, r0.xyzx, r0.xyzx
  24: rsq r0.w, r0.w
  25: mul r0.xyz, r0.wwww, r0.xyzx
  26: mov o3.xyz, r0.xyzx
  27: mul r1.xyz, v2.yyyy, cb1[1].xyzx
  28: mad r1.xyz, cb1[0].xyzx, v2.xxxx, r1.xyzx
  29: mad r1.xyz, cb1[2].xyzx, v2.zzzz, r1.xyzx
  30: dp3 r0.w, r1.xyzx, r1.xyzx
  31: rsq r0.w, r0.w
  32: mul r1.xyz, r0.wwww, r1.xyzx
  33: mov o4.xyz, r1.xyzx
  34: mul r2.xyz, r0.zxyz, r1.yzxy
  35: mad r0.xyz, r0.yzxy, r1.zxyz, -r2.xyzx
  36: mul o5.xyz, r0.xyzx, v2.wwww
  37: mov o7.xyzw, v3.xyzw
  38: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float       
// SV_POSITION              0   xyzw        1      POS   float       
// TEXCOORD                 3   xyz         2     NONE   float       
// TEXCOORD                 4   xyz         3     NONE   float       
// TEXCOORD                 5   xyz         4     NONE   float       
// TEXCOORD                 6   xyz         5     NONE   float       
// TEXCOORD                 7   xyz         6     NONE   float       
// TEXCOORD                 8   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_output o0.xyzw
   0: mov o0.xyzw, l(0,0,0,0)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec2 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    vs_TEXCOORD0.xy = vec2(0.0, 0.0);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_TARGET0 gl_FragData[0]
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    vs_TEXCOORD0.xy = vec2(0.0, 0.0);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out highp vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerDraw" (368 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};

struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_LightData;
    float4 unity_LightIndices[2];
    float4 unity_SpecCube0_HDR;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
};

struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 unity_FogParams;
    float4 unity_FogColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_StereoScaleOffset;
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(2) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float u_xlat9;
    output.TEXCOORD0.xy = float2(0.0, 0.0);
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.TEXCOORD7.xyz = (-u_xlat0.xyz) + UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat0.xyz = u_xlat1.yyy * UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz, u_xlat1.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz, u_xlat1.zzz, u_xlat0.xyz);
    output.TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat1.xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    output.TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat0.yzx, u_xlat1.zxy, (-u_xlat2.xyz));
    output.TEXCOORD6.xyz = u_xlat0.xyz * input.TANGENT0.www;
    output.TEXCOORD8 = input.TEXCOORD1;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_TARGET0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_TARGET0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec3 vs_TEXCOORD7;
out vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    vs_TEXCOORD0.xy = vec2(0.0, 0.0);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

layout(location = 0) out vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on set: 1, binding: 0, used in: Vertex  {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerDraw" (368 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on set: 1, binding: 2, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 304
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 321

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 9 16 84 126 191 202 238 241 286 306 312 313
                              Name 9  "vs_TEXCOORD0"
                              Name 84  "vs_TEXCOORD7"
                              Name 126  "vs_TEXCOORD3"
                              Name 238  "vs_TEXCOORD4"
                              Name 286  "vs_TEXCOORD5"
                              Name 306  "vs_TEXCOORD6"
                              Name 312  "vs_TEXCOORD8"
                              Decorate 9(vs_TEXCOORD0) Location 0
                              Decorate 16 Location 0
                              Decorate 22 ArrayStride 16
                              Decorate 23 ArrayStride 16
                              Decorate 25 ArrayStride 16
                              MemberDecorate 26 0 Offset 0
                              MemberDecorate 26 1 Offset 64
                              MemberDecorate 26 2 Offset 128
                              MemberDecorate 26 3 Offset 144
                              MemberDecorate 26 4 Offset 160
                              MemberDecorate 26 5 Offset 176
                              MemberDecorate 26 6 Offset 208
                              MemberDecorate 26 7 Offset 224
                              MemberDecorate 26 8 Offset 240
                              MemberDecorate 26 9 Offset 256
                              MemberDecorate 26 10 Offset 272
                              MemberDecorate 26 11 Offset 288
                              MemberDecorate 26 12 Offset 304
                              MemberDecorate 26 13 Offset 320
                              MemberDecorate 26 14 Offset 336
                              MemberDecorate 26 15 Offset 352
                              Decorate 26 Block
                              Decorate 28 DescriptorSet 1
                              Decorate 28 Binding 1
                              Decorate 84(vs_TEXCOORD7) Location 5
                              MemberDecorate 88 0 Offset 0
                              MemberDecorate 88 1 Offset 16
                              MemberDecorate 88 2 Offset 32
                              MemberDecorate 88 3 Offset 48
                              MemberDecorate 88 4 Offset 64
                              MemberDecorate 88 5 Offset 80
                              MemberDecorate 88 6 Offset 96
                              MemberDecorate 88 7 Offset 112
                              MemberDecorate 88 8 Offset 128
                              Decorate 88 Block
                              Decorate 90 DescriptorSet 1
                              Decorate 90 Binding 0
                              Decorate 126(vs_TEXCOORD3) Location 1
                              Decorate 162 ArrayStride 16
                              Decorate 163 ArrayStride 16
                              Decorate 164 ArrayStride 16
                              Decorate 165 ArrayStride 16
                              MemberDecorate 166 0 Offset 0
                              MemberDecorate 166 1 Offset 16
                              MemberDecorate 166 2 Offset 32
                              MemberDecorate 166 3 Offset 48
                              MemberDecorate 166 4 Offset 64
                              MemberDecorate 166 5 Offset 80
                              MemberDecorate 166 6 Offset 96
                              MemberDecorate 166 7 Offset 112
                              MemberDecorate 166 8 Offset 176
                              MemberDecorate 166 9 Offset 240
                              MemberDecorate 166 10 Offset 304
                              MemberDecorate 166 11 Offset 368
                              MemberDecorate 166 12 Offset 384
                              MemberDecorate 166 13 Offset 400
                              Decorate 166 Block
                              Decorate 168 DescriptorSet 1
                              Decorate 168 Binding 2
                              MemberDecorate 189 0 BuiltIn Position
                              MemberDecorate 189 1 BuiltIn PointSize
                              MemberDecorate 189 2 BuiltIn ClipDistance
                              Decorate 189 Block
                              Decorate 202 Location 1
                              Decorate 238(vs_TEXCOORD4) Location 2
                              Decorate 241 Location 2
                              Decorate 286(vs_TEXCOORD5) Location 3
                              Decorate 306(vs_TEXCOORD6) Location 4
                              Decorate 312(vs_TEXCOORD8) Location 6
                              Decorate 313 Location 3
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 2
               8:             TypePointer Output 7(fvec2)
 9(vs_TEXCOORD0):      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec2) ConstantComposite 10 10
              12:             TypeVector 6(float) 4
              13:             TypePointer Private 12(fvec4)
              14:     13(ptr) Variable Private
              15:             TypePointer Input 12(fvec4)
              16:     15(ptr) Variable Input
              17:             TypeVector 6(float) 3
              20:             TypeInt 32 0
              21:     20(int) Constant 4
              22:             TypeArray 12(fvec4) 21
              23:             TypeArray 12(fvec4) 21
              24:     20(int) Constant 2
              25:             TypeArray 12(fvec4) 24
              26:             TypeStruct 22 23 12(fvec4) 12(fvec4) 12(fvec4) 25 12(fvec4) 12(fvec4) 12(fvec4) 12(fvec4) 12(fvec4) 12(fvec4) 12(fvec4) 12(fvec4) 12(fvec4) 12(fvec4)
              27:             TypePointer Uniform 26(struct)
              28:     27(ptr) Variable Uniform
              29:             TypeInt 32 1
              30:     29(int) Constant 0
              31:     29(int) Constant 1
              32:             TypePointer Uniform 12(fvec4)
              50:     29(int) Constant 2
              62:     13(ptr) Variable Private
              63:     29(int) Constant 3
              83:             TypePointer Output 17(fvec3)
84(vs_TEXCOORD7):     83(ptr) Variable Output
              88:             TypeStruct 12(fvec4) 12(fvec4) 12(fvec4) 12(fvec4) 17(fvec3) 12(fvec4) 12(fvec4) 12(fvec4) 12(fvec4)
              89:             TypePointer Uniform 88(struct)
              90:     89(ptr) Variable Uniform
              91:     29(int) Constant 4
              92:             TypePointer Uniform 17(fvec3)
126(vs_TEXCOORD3):     83(ptr) Variable Output
             162:             TypeArray 12(fvec4) 21
             163:             TypeArray 12(fvec4) 21
             164:             TypeArray 12(fvec4) 21
             165:             TypeArray 12(fvec4) 21
             166:             TypeStruct 12(fvec4) 12(fvec4) 12(fvec4) 12(fvec4) 12(fvec4) 12(fvec4) 12(fvec4) 162 163 164 165 12(fvec4) 29(int) 12(fvec4)
             167:             TypePointer Uniform 166(struct)
             168:    167(ptr) Variable Uniform
             169:     29(int) Constant 10
             187:     20(int) Constant 1
             188:             TypeArray 6(float) 187
             189:             TypeStruct 12(fvec4) 6(float) 188
             190:             TypePointer Output 189(struct)
             191:    190(ptr) Variable Output
             199:             TypePointer Output 12(fvec4)
             201:             TypePointer Input 17(fvec3)
             202:    201(ptr) Variable Input
             208:     20(int) Constant 0
             209:             TypePointer Private 6(float)
             223:    209(ptr) Variable Private
238(vs_TEXCOORD4):     83(ptr) Variable Output
             241:     15(ptr) Variable Input
286(vs_TEXCOORD5):     83(ptr) Variable Output
             289:             TypePointer Private 17(fvec3)
             290:    289(ptr) Variable Private
306(vs_TEXCOORD6):     83(ptr) Variable Output
312(vs_TEXCOORD8):    199(ptr) Variable Output
             313:     15(ptr) Variable Input
             315:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
                              Store 9(vs_TEXCOORD0) 11
              18:   12(fvec4) Load 16
              19:   17(fvec3) VectorShuffle 18 18 1 1 1
              33:     32(ptr) AccessChain 28 30 31
              34:   12(fvec4) Load 33
              35:   17(fvec3) VectorShuffle 34 34 0 1 2
              36:   17(fvec3) FMul 19 35
              37:   12(fvec4) Load 14
              38:   12(fvec4) VectorShuffle 37 36 4 5 6 3
                              Store 14 38
              39:     32(ptr) AccessChain 28 30 30
              40:   12(fvec4) Load 39
              41:   17(fvec3) VectorShuffle 40 40 0 1 2
              42:   12(fvec4) Load 16
              43:   17(fvec3) VectorShuffle 42 42 0 0 0
              44:   17(fvec3) FMul 41 43
              45:   12(fvec4) Load 14
              46:   17(fvec3) VectorShuffle 45 45 0 1 2
              47:   17(fvec3) FAdd 44 46
              48:   12(fvec4) Load 14
              49:   12(fvec4) VectorShuffle 48 47 4 5 6 3
                              Store 14 49
              51:     32(ptr) AccessChain 28 30 50
              52:   12(fvec4) Load 51
              53:   17(fvec3) VectorShuffle 52 52 0 1 2
              54:   12(fvec4) Load 16
              55:   17(fvec3) VectorShuffle 54 54 2 2 2
              56:   17(fvec3) FMul 53 55
              57:   12(fvec4) Load 14
              58:   17(fvec3) VectorShuffle 57 57 0 1 2
              59:   17(fvec3) FAdd 56 58
              60:   12(fvec4) Load 14
              61:   12(fvec4) VectorShuffle 60 59 4 5 6 3
                              Store 14 61
              64:     32(ptr) AccessChain 28 30 63
              65:   12(fvec4) Load 64
              66:   17(fvec3) VectorShuffle 65 65 0 1 2
              67:   12(fvec4) Load 16
              68:   17(fvec3) VectorShuffle 67 67 3 3 3
              69:   17(fvec3) FMul 66 68
              70:   12(fvec4) Load 14
              71:   17(fvec3) VectorShuffle 70 70 0 1 2
              72:   17(fvec3) FAdd 69 71
              73:   12(fvec4) Load 62
              74:   12(fvec4) VectorShuffle 73 72 4 5 6 3
                              Store 62 74
              75:   12(fvec4) Load 14
              76:   17(fvec3) VectorShuffle 75 75 0 1 2
              77:     32(ptr) AccessChain 28 30 63
              78:   12(fvec4) Load 77
              79:   17(fvec3) VectorShuffle 78 78 0 1 2
              80:   17(fvec3) FAdd 76 79
              81:   12(fvec4) Load 14
              82:   12(fvec4) VectorShuffle 81 80 4 5 6 3
                              Store 14 82
              85:   12(fvec4) Load 14
              86:   17(fvec3) VectorShuffle 85 85 0 1 2
              87:   17(fvec3) FNegate 86
              93:     92(ptr) AccessChain 90 91
              94:   17(fvec3) Load 93
              95:   17(fvec3) FAdd 87 94
                              Store 84(vs_TEXCOORD7) 95
              96:   12(fvec4) Load 62
              97:   17(fvec3) VectorShuffle 96 96 1 1 1
              98:     32(ptr) AccessChain 28 31 31
              99:   12(fvec4) Load 98
             100:   17(fvec3) VectorShuffle 99 99 0 1 2
             101:   17(fvec3) FMul 97 100
             102:   12(fvec4) Load 14
             103:   12(fvec4) VectorShuffle 102 101 4 5 6 3
                              Store 14 103
             104:     32(ptr) AccessChain 28 31 30
             105:   12(fvec4) Load 104
             106:   17(fvec3) VectorShuffle 105 105 0 1 2
             107:   12(fvec4) Load 62
             108:   17(fvec3) VectorShuffle 107 107 0 0 0
             109:   17(fvec3) FMul 106 108
             110:   12(fvec4) Load 14
             111:   17(fvec3) VectorShuffle 110 110 0 1 2
             112:   17(fvec3) FAdd 109 111
             113:   12(fvec4) Load 14
             114:   12(fvec4) VectorShuffle 113 112 4 5 6 3
                              Store 14 114
             115:     32(ptr) AccessChain 28 31 50
             116:   12(fvec4) Load 115
             117:   17(fvec3) VectorShuffle 116 116 0 1 2
             118:   12(fvec4) Load 62
             119:   17(fvec3) VectorShuffle 118 118 2 2 2
             120:   17(fvec3) FMul 117 119
             121:   12(fvec4) Load 14
             122:   17(fvec3) VectorShuffle 121 121 0 1 2
             123:   17(fvec3) FAdd 120 122
             124:   12(fvec4) Load 14
             125:   12(fvec4) VectorShuffle 124 123 4 5 6 3
                              Store 14 125
             127:   12(fvec4) Load 62
             128:   17(fvec3) VectorShuffle 127 127 0 1 2
                              Store 126(vs_TEXCOORD3) 128
             129:   12(fvec4) Load 14
             130:   17(fvec3) VectorShuffle 129 129 0 1 2
             131:     32(ptr) AccessChain 28 31 63
             132:   12(fvec4) Load 131
             133:   17(fvec3) VectorShuffle 132 132 0 1 2
             134:   17(fvec3) FAdd 130 133
             135:   12(fvec4) Load 14
             136:   12(fvec4) VectorShuffle 135 134 4 5 6 3
                              Store 14 136
             137:   12(fvec4) Load 14
             138:   12(fvec4) VectorShuffle 137 137 1 1 1 1
             139:     32(ptr) AccessChain 28 30 31
             140:   12(fvec4) Load 139
             141:   12(fvec4) FMul 138 140
                              Store 62 141
             142:     32(ptr) AccessChain 28 30 30
             143:   12(fvec4) Load 142
             144:   12(fvec4) Load 14
             145:   12(fvec4) VectorShuffle 144 144 0 0 0 0
             146:   12(fvec4) FMul 143 145
             147:   12(fvec4) Load 62
             148:   12(fvec4) FAdd 146 147
                              Store 62 148
             149:     32(ptr) AccessChain 28 30 50
             150:   12(fvec4) Load 149
             151:   12(fvec4) Load 14
             152:   12(fvec4) VectorShuffle 151 151 2 2 2 2
             153:   12(fvec4) FMul 150 152
             154:   12(fvec4) Load 62
             155:   12(fvec4) FAdd 153 154
                              Store 14 155
             156:   12(fvec4) Load 14
             157:     32(ptr) AccessChain 28 30 63
             158:   12(fvec4) Load 157
             159:   12(fvec4) FAdd 156 158
                              Store 14 159
             160:   12(fvec4) Load 14
             161:   12(fvec4) VectorShuffle 160 160 1 1 1 1
             170:     32(ptr) AccessChain 168 169 31
             171:   12(fvec4) Load 170
             172:   12(fvec4) FMul 161 171
                              Store 62 172
             173:     32(ptr) AccessChain 168 169 30
             174:   12(fvec4) Load 173
             175:   12(fvec4) Load 14
             176:   12(fvec4) VectorShuffle 175 175 0 0 0 0
             177:   12(fvec4) FMul 174 176
             178:   12(fvec4) Load 62
             179:   12(fvec4) FAdd 177 178
                              Store 62 179
             180:     32(ptr) AccessChain 168 169 50
             181:   12(fvec4) Load 180
             182:   12(fvec4) Load 14
             183:   12(fvec4) VectorShuffle 182 182 2 2 2 2
             184:   12(fvec4) FMul 181 183
             185:   12(fvec4) Load 62
             186:   12(fvec4) FAdd 184 185
                              Store 62 186
             192:     32(ptr) AccessChain 168 169 63
             193:   12(fvec4) Load 192
             194:   12(fvec4) Load 14
             195:   12(fvec4) VectorShuffle 194 194 3 3 3 3
             196:   12(fvec4) FMul 193 195
             197:   12(fvec4) Load 62
             198:   12(fvec4) FAdd 196 197
             200:    199(ptr) AccessChain 191 30
                              Store 200 198
             203:   17(fvec3) Load 202
             204:     32(ptr) AccessChain 28 31 30
             205:   12(fvec4) Load 204
             206:   17(fvec3) VectorShuffle 205 205 0 1 2
             207:    6(float) Dot 203 206
             210:    209(ptr) AccessChain 14 208
                              Store 210 207
             211:   17(fvec3) Load 202
             212:     32(ptr) AccessChain 28 31 31
             213:   12(fvec4) Load 212
             214:   17(fvec3) VectorShuffle 213 213 0 1 2
             215:    6(float) Dot 211 214
             216:    209(ptr) AccessChain 14 187
                              Store 216 215
             217:   17(fvec3) Load 202
             218:     32(ptr) AccessChain 28 31 50
             219:   12(fvec4) Load 218
             220:   17(fvec3) VectorShuffle 219 219 0 1 2
             221:    6(float) Dot 217 220
             222:    209(ptr) AccessChain 14 24
                              Store 222 221
             224:   12(fvec4) Load 14
             225:   17(fvec3) VectorShuffle 224 224 0 1 2
             226:   12(fvec4) Load 14
             227:   17(fvec3) VectorShuffle 226 226 0 1 2
             228:    6(float) Dot 225 227
                              Store 223 228
             229:    6(float) Load 223
             230:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 229
                              Store 223 230
             231:    6(float) Load 223
             232:   17(fvec3) CompositeConstruct 231 231 231
             233:   12(fvec4) Load 14
             234:   17(fvec3) VectorShuffle 233 233 0 1 2
             235:   17(fvec3) FMul 232 234
             236:   12(fvec4) Load 14
             237:   12(fvec4) VectorShuffle 236 235 4 5 6 3
                              Store 14 237
             239:   12(fvec4) Load 14
             240:   17(fvec3) VectorShuffle 239 239 0 1 2
                              Store 238(vs_TEXCOORD4) 240
             242:   12(fvec4) Load 241
             243:   17(fvec3) VectorShuffle 242 242 1 1 1
             244:     32(ptr) AccessChain 28 30 31
             245:   12(fvec4) Load 244
             246:   17(fvec3) VectorShuffle 245 245 0 1 2
             247:   17(fvec3) FMul 243 246
             248:   12(fvec4) Load 62
             249:   12(fvec4) VectorShuffle 248 247 4 5 6 3
                              Store 62 249
             250:     32(ptr) AccessChain 28 30 30
             251:   12(fvec4) Load 250
             252:   17(fvec3) VectorShuffle 251 251 0 1 2
             253:   12(fvec4) Load 241
             254:   17(fvec3) VectorShuffle 253 253 0 0 0
             255:   17(fvec3) FMul 252 254
             256:   12(fvec4) Load 62
             257:   17(fvec3) VectorShuffle 256 256 0 1 2
             258:   17(fvec3) FAdd 255 257
             259:   12(fvec4) Load 62
             260:   12(fvec4) VectorShuffle 259 258 4 5 6 3
                              Store 62 260
             261:     32(ptr) AccessChain 28 30 50
             262:   12(fvec4) Load 261
             263:   17(fvec3) VectorShuffle 262 262 0 1 2
             264:   12(fvec4) Load 241
             265:   17(fvec3) VectorShuffle 264 264 2 2 2
             266:   17(fvec3) FMul 263 265
             267:   12(fvec4) Load 62
             268:   17(fvec3) VectorShuffle 267 267 0 1 2
             269:   17(fvec3) FAdd 266 268
             270:   12(fvec4) Load 62
             271:   12(fvec4) VectorShuffle 270 269 4 5 6 3
                              Store 62 271
             272:   12(fvec4) Load 62
             273:   17(fvec3) VectorShuffle 272 272 0 1 2
             274:   12(fvec4) Load 62
             275:   17(fvec3) VectorShuffle 274 274 0 1 2
             276:    6(float) Dot 273 275
                              Store 223 276
             277:    6(float) Load 223
             278:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 277
                              Store 223 278
             279:    6(float) Load 223
             280:   17(fvec3) CompositeConstruct 279 279 279
             281:   12(fvec4) Load 62
             282:   17(fvec3) VectorShuffle 281 281 0 1 2
             283:   17(fvec3) FMul 280 282
             284:   12(fvec4) Load 62
             285:   12(fvec4) VectorShuffle 284 283 4 5 6 3
                              Store 62 285
             287:   12(fvec4) Load 62
             288:   17(fvec3) VectorShuffle 287 287 0 1 2
                              Store 286(vs_TEXCOORD5) 288
             291:   12(fvec4) Load 14
             292:   17(fvec3) VectorShuffle 291 291 2 0 1
             293:   12(fvec4) Load 62
             294:   17(fvec3) VectorShuffle 293 293 1 2 0
             295:   17(fvec3) FMul 292 294
                              Store 290 295
             296:   12(fvec4) Load 14
             297:   17(fvec3) VectorShuffle 296 296 1 2 0
             298:   12(fvec4) Load 62
             299:   17(fvec3) VectorShuffle 298 298 2 0 1
             300:   17(fvec3) FMul 297 299
             301:   17(fvec3) Load 290
             302:   17(fvec3) FNegate 301
             303:   17(fvec3) FAdd 300 302
             304:   12(fvec4) Load 14
             305:   12(fvec4) VectorShuffle 304 303 4 5 6 3
                              Store 14 305
             307:   12(fvec4) Load 14
             308:   17(fvec3) VectorShuffle 307 307 0 1 2
             309:   12(fvec4) Load 241
             310:   17(fvec3) VectorShuffle 309 309 3 3 3
             311:   17(fvec3) FMul 308 310
                              Store 306(vs_TEXCOORD6) 311
             314:   12(fvec4) Load 313
                              Store 312(vs_TEXCOORD8) 314
             316:    315(ptr) AccessChain 191 30 187
             317:    6(float) Load 316
             318:    6(float) FNegate 317
             319:    315(ptr) AccessChain 191 30 187
                              Store 319 318
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 13

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 9
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Output 7(fvec4)
               9:      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec4) ConstantComposite 10 10 10 10
               4:           2 Function None 3
               5:             Label
                              Store 9 11
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 35 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 1 {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 2 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 3 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// SV_POSITION              0   xyzw        1      POS   float   xyzw
// TEXCOORD                 3   xyz         2     NONE   float   xyz 
// TEXCOORD                 4   xyz         3     NONE   float   xyz 
// TEXCOORD                 5   xyz         4     NONE   float   xyz 
// TEXCOORD                 6   xyz         5     NONE   float   xyz 
// TEXCOORD                 7   xyz         6     NONE   float   xyz 
// TEXCOORD                 8   xyzw        7     NONE   float   xyzw
// SV_InstanceID            0   x           8     NONE    uint   x   
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[23], immediateIndexed
      dcl_constantbuffer CB2[1], immediateIndexed
      dcl_constantbuffer CB3[16], dynamicIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xyzw
      dcl_input_sgv v4.x, instance_id
      dcl_output o0.xy
      dcl_output_siv o1.xyzw, position
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_output o5.xyz
      dcl_output o6.xyz
      dcl_output o7.xyzw
      dcl_output o8.x
      dcl_temps 3
   0: mov o0.xy, l(0,0,0,0)
   1: iadd r0.x, v4.x, cb2[0].x
   2: ishl r0.x, r0.x, l(3)
   3: mul r0.yzw, v0.yyyy, cb3[r0.x + 1].xxyz
   4: mad r0.yzw, cb3[r0.x + 0].xxyz, v0.xxxx, r0.yyzw
   5: mad r0.yzw, cb3[r0.x + 2].xxyz, v0.zzzz, r0.yyzw
   6: mad r1.xyz, cb3[r0.x + 3].xyzx, v0.wwww, r0.yzwy
   7: add r0.yzw, r0.yyzw, cb3[r0.x + 3].xxyz
   8: add o6.xyz, -r0.yzwy, cb0[4].xyzx
   9: mul r0.yzw, r1.yyyy, cb3[r0.x + 5].xxyz
  10: mad r0.yzw, cb3[r0.x + 4].xxyz, r1.xxxx, r0.yyzw
  11: mad r0.yzw, cb3[r0.x + 6].xxyz, r1.zzzz, r0.yyzw
  12: mov o2.xyz, r1.xyzx
  13: add r0.yzw, r0.yyzw, cb3[r0.x + 7].xxyz
  14: mul r1.xyzw, r0.zzzz, cb3[r0.x + 1].xyzw
  15: mad r1.xyzw, cb3[r0.x + 0].xyzw, r0.yyyy, r1.xyzw
  16: mad r1.xyzw, cb3[r0.x + 2].xyzw, r0.wwww, r1.xyzw
  17: add r1.xyzw, r1.xyzw, cb3[r0.x + 3].xyzw
  18: mul r2.xyzw, r1.yyyy, cb1[20].xyzw
  19: mad r2.xyzw, cb1[19].xyzw, r1.xxxx, r2.xyzw
  20: mad r2.xyzw, cb1[21].xyzw, r1.zzzz, r2.xyzw
  21: mad o1.xyzw, cb1[22].xyzw, r1.wwww, r2.xyzw
  22: dp3 r1.x, v1.xyzx, cb3[r0.x + 4].xyzx
  23: dp3 r1.y, v1.xyzx, cb3[r0.x + 5].xyzx
  24: dp3 r1.z, v1.xyzx, cb3[r0.x + 6].xyzx
  25: dp3 r0.y, r1.xyzx, r1.xyzx
  26: rsq r0.y, r0.y
  27: mul r0.yzw, r0.yyyy, r1.xxyz
  28: mov o3.xyz, r0.yzwy
  29: mul r1.xyz, v2.yyyy, cb3[r0.x + 1].xyzx
  30: mad r1.xyz, cb3[r0.x + 0].xyzx, v2.xxxx, r1.xyzx
  31: mad r1.xyz, cb3[r0.x + 2].xyzx, v2.zzzz, r1.xyzx
  32: dp3 r0.x, r1.xyzx, r1.xyzx
  33: rsq r0.x, r0.x
  34: mul r1.xyz, r0.xxxx, r1.xyzx
  35: mov o4.xyz, r1.xyzx
  36: mul r2.xyz, r0.wyzw, r1.yzxy
  37: mad r0.xyz, r0.zwyz, r1.zxyz, -r2.xyzx
  38: mul o5.xyz, r0.xyzx, v2.wwww
  39: mov o7.xyzw, v3.xyzw
  40: mov o8.x, v4.x
  41: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float       
// SV_POSITION              0   xyzw        1      POS   float       
// TEXCOORD                 3   xyz         2     NONE   float       
// TEXCOORD                 4   xyz         3     NONE   float       
// TEXCOORD                 5   xyz         4     NONE   float       
// TEXCOORD                 6   xyz         5     NONE   float       
// TEXCOORD                 7   xyz         6     NONE   float       
// TEXCOORD                 8   xyzw        7     NONE   float       
// SV_InstanceID            0   x           8     NONE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_output o0.xyzw
   0: mov o0.xyzw, l(0,0,0,0)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 0 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    vs_TEXCOORD0.xy = vec2(0.0, 0.0);
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = int(u_xlati0 << 3);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat1.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[3].xyz;
    u_xlat1 = u_xlat3.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat3.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD1;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out highp vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "UnityPerCamera" (144 bytes) on slot 0 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on slot 1 {
  Matrix4x4 unity_MatrixVP at 304
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 2 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 3 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};

struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 unity_FogParams;
    float4 unity_FogColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_StereoScaleOffset;
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_Builtins0Array_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
    float4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};

struct UnityInstancing_PerDraw0_Type
{
    unity_Builtins0Array_Type unity_Builtins0Array[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(0) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(1) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(2) ]],
    const constant unity_Builtins0Array_Type* UnityInstancing_PerDraw0 [[ buffer(3) ]],
    uint mtl_InstanceID [[ instance_id ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float3 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    output.TEXCOORD0.xy = float2(0.0, 0.0);
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 0x3;
    u_xlat3.xyz = input.POSITION0.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, input.POSITION0.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, input.POSITION0.zzz, u_xlat3.xyz);
    u_xlat1.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz, input.POSITION0.www, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    output.TEXCOORD7.xyz = (-u_xlat3.xyz) + UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat3.xyz = u_xlat1.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz, u_xlat1.zzz, u_xlat3.xyz);
    output.TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[3].xyz;
    u_xlat1 = u_xlat3.yyyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0], u_xlat3.xxxx, u_xlat1);
    u_xlat1 = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2], u_xlat3.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.x = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
    output.TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat1.xyz = input.TANGENT0.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, input.TANGENT0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, input.TANGENT0.zzz, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat3.yzx, u_xlat1.zxy, (-u_xlat2.xyz));
    output.TEXCOORD6.xyz = u_xlat0.xyz * input.TANGENT0.www;
    output.TEXCOORD8 = input.TEXCOORD1;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_TARGET0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_TARGET0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 0 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec3 vs_TEXCOORD7;
out vec4 vs_TEXCOORD8;
flat out uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    vs_TEXCOORD0.xy = vec2(0.0, 0.0);
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    vs_TEXCOORD7.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat1.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[3].xyz;
    u_xlat1 = u_xlat3.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat3.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz * in_TANGENT0.www;
    vs_TEXCOORD8 = in_TEXCOORD1;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

layout(location = 0) out vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Specialization constant id: 0 name: "UNITY_RUNTIME_INSTANCING_ARRAY_SIZE", used in: Vertex 

Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 2, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on set: 1, binding: 3, used in: Vertex  {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}
Constant Buffer "UnityPerCamera" (144 bytes) on set: 1, binding: 0, used in: Vertex  {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityPerFrame" (416 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 304
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 359

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 9 16 34 99 138 211 222 265 267 322 341 346 347 350
                              Name 9  "vs_TEXCOORD0"
                              Name 99  "vs_TEXCOORD7"
                              Name 138  "vs_TEXCOORD3"
                              Name 265  "vs_TEXCOORD4"
                              Name 322  "vs_TEXCOORD5"
                              Name 341  "vs_TEXCOORD6"
                              Name 346  "vs_TEXCOORD8"
                              Decorate 9(vs_TEXCOORD0) Location 0
                              Decorate 16 BuiltIn InstanceIndex
                              MemberDecorate 18 0 Offset 0
                              MemberDecorate 18 1 Offset 4
                              Decorate 18 Block
                              Decorate 20 DescriptorSet 1
                              Decorate 20 Binding 2
                              Decorate 34 Location 0
                              Decorate 39 ArrayStride 16
                              Decorate 40 ArrayStride 16
                              MemberDecorate 41 0 Offset 0
                              MemberDecorate 41 1 Offset 64
                              Decorate 42 SpecId 0
                              Decorate 43 ArrayStride 128
                              MemberDecorate 44 0 Offset 0
                              Decorate 44 Block
                              Decorate 46 DescriptorSet 1
                              Decorate 46 Binding 3
                              Decorate 99(vs_TEXCOORD7) Location 5
                              MemberDecorate 102 0 Offset 0
                              MemberDecorate 102 1 Offset 16
                              MemberDecorate 102 2 Offset 32
                              MemberDecorate 102 3 Offset 48
                              MemberDecorate 102 4 Offset 64
                              MemberDecorate 102 5 Offset 80
                              MemberDecorate 102 6 Offset 96
                              MemberDecorate 102 7 Offset 112
                              MemberDecorate 102 8 Offset 128
                              Decorate 102 Block
                              Decorate 104 DescriptorSet 1
                              Decorate 104 Binding 0
                              Decorate 138(vs_TEXCOORD3) Location 1
                              Decorate 182 ArrayStride 16
                              Decorate 183 ArrayStride 16
                              Decorate 184 ArrayStride 16
                              Decorate 185 ArrayStride 16
                              MemberDecorate 186 0 Offset 0
                              MemberDecorate 186 1 Offset 16
                              MemberDecorate 186 2 Offset 32
                              MemberDecorate 186 3 Offset 48
                              MemberDecorate 186 4 Offset 64
                              MemberDecorate 186 5 Offset 80
                              MemberDecorate 186 6 Offset 96
                              MemberDecorate 186 7 Offset 112
                              MemberDecorate 186 8 Offset 176
                              MemberDecorate 186 9 Offset 240
                              MemberDecorate 186 10 Offset 304
                              MemberDecorate 186 11 Offset 368
                              MemberDecorate 186 12 Offset 384
                              MemberDecorate 186 13 Offset 400
                              Decorate 186 Block
                              Decorate 188 DescriptorSet 1
                              Decorate 188 Binding 1
                              MemberDecorate 209 0 BuiltIn Position
                              MemberDecorate 209 1 BuiltIn PointSize
                              MemberDecorate 209 2 BuiltIn ClipDistance
                              Decorate 209 Block
                              Decorate 222 Location 1
                              Decorate 265(vs_TEXCOORD4) Location 2
                              Decorate 267 Location 2
                              Decorate 322(vs_TEXCOORD5) Location 3
                              Decorate 341(vs_TEXCOORD6) Location 4
                              Decorate 346(vs_TEXCOORD8) Location 6
                              Decorate 347 Location 3
                              Decorate 350 Flat
                              Decorate 350 Location 7
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 2
               8:             TypePointer Output 7(fvec2)
 9(vs_TEXCOORD0):      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec2) ConstantComposite 10 10
              12:             TypeInt 32 1
              13:             TypePointer Private 12(int)
              14:     13(ptr) Variable Private
              15:             TypePointer Input 12(int)
              16:     15(ptr) Variable Input
              18:             TypeStruct 12(int) 12(int)
              19:             TypePointer Uniform 18(struct)
              20:     19(ptr) Variable Uniform
              21:     12(int) Constant 0
              22:             TypePointer Uniform 12(int)
              27:     12(int) Constant 3
              29:             TypeVector 6(float) 3
              30:             TypePointer Private 29(fvec3)
              31:     30(ptr) Variable Private
              32:             TypeVector 6(float) 4
              33:             TypePointer Input 32(fvec4)
              34:     33(ptr) Variable Input
              37:             TypeInt 32 0
              38:     37(int) Constant 4
              39:             TypeArray 32(fvec4) 38
              40:             TypeArray 32(fvec4) 38
              41:             TypeStruct 39 40
              42:     12(int) SpecConstant 2
              43:             TypeArray 41(struct) 42
              44:             TypeStruct 43
              45:             TypePointer Uniform 44(struct)
              46:     45(ptr) Variable Uniform
              48:     12(int) Constant 8
              50:     12(int) Constant 1
              51:             TypePointer Uniform 32(fvec4)
              68:     12(int) Constant 2
              77:             TypePointer Private 32(fvec4)
              78:     77(ptr) Variable Private
              98:             TypePointer Output 29(fvec3)
99(vs_TEXCOORD7):     98(ptr) Variable Output
             102:             TypeStruct 32(fvec4) 32(fvec4) 32(fvec4) 32(fvec4) 29(fvec3) 32(fvec4) 32(fvec4) 32(fvec4) 32(fvec4)
             103:             TypePointer Uniform 102(struct)
             104:    103(ptr) Variable Uniform
             105:     12(int) Constant 4
             106:             TypePointer Uniform 29(fvec3)
138(vs_TEXCOORD3):     98(ptr) Variable Output
             179:     77(ptr) Variable Private
             182:             TypeArray 32(fvec4) 38
             183:             TypeArray 32(fvec4) 38
             184:             TypeArray 32(fvec4) 38
             185:             TypeArray 32(fvec4) 38
             186:             TypeStruct 32(fvec4) 32(fvec4) 32(fvec4) 32(fvec4) 32(fvec4) 32(fvec4) 32(fvec4) 182 183 184 185 32(fvec4) 12(int) 32(fvec4)
             187:             TypePointer Uniform 186(struct)
             188:    187(ptr) Variable Uniform
             189:     12(int) Constant 10
             207:     37(int) Constant 1
             208:             TypeArray 6(float) 207
             209:             TypeStruct 32(fvec4) 6(float) 208
             210:             TypePointer Output 209(struct)
             211:    210(ptr) Variable Output
             219:             TypePointer Output 32(fvec4)
             221:             TypePointer Input 29(fvec3)
             222:    221(ptr) Variable Input
             230:     37(int) Constant 0
             231:             TypePointer Private 6(float)
             248:     37(int) Constant 2
265(vs_TEXCOORD4):     98(ptr) Variable Output
             267:     33(ptr) Variable Input
             304:     30(ptr) Variable Private
322(vs_TEXCOORD5):     98(ptr) Variable Output
341(vs_TEXCOORD6):     98(ptr) Variable Output
346(vs_TEXCOORD8):    219(ptr) Variable Output
             347:     33(ptr) Variable Input
             349:             TypePointer Output 37(int)
             350:    349(ptr) Variable Output
             353:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
                              Store 9(vs_TEXCOORD0) 11
              17:     12(int) Load 16
              23:     22(ptr) AccessChain 20 21
              24:     12(int) Load 23
              25:     12(int) IAdd 17 24
                              Store 14 25
              26:     12(int) Load 14
              28:     12(int) ShiftLeftLogical 26 27
                              Store 14 28
              35:   32(fvec4) Load 34
              36:   29(fvec3) VectorShuffle 35 35 1 1 1
              47:     12(int) Load 14
              49:     12(int) SDiv 47 48
              52:     51(ptr) AccessChain 46 21 49 21 50
              53:   32(fvec4) Load 52
              54:   29(fvec3) VectorShuffle 53 53 0 1 2
              55:   29(fvec3) FMul 36 54
                              Store 31 55
              56:     12(int) Load 14
              57:     12(int) SDiv 56 48
              58:     51(ptr) AccessChain 46 21 57 21 21
              59:   32(fvec4) Load 58
              60:   29(fvec3) VectorShuffle 59 59 0 1 2
              61:   32(fvec4) Load 34
              62:   29(fvec3) VectorShuffle 61 61 0 0 0
              63:   29(fvec3) FMul 60 62
              64:   29(fvec3) Load 31
              65:   29(fvec3) FAdd 63 64
                              Store 31 65
              66:     12(int) Load 14
              67:     12(int) SDiv 66 48
              69:     51(ptr) AccessChain 46 21 67 21 68
              70:   32(fvec4) Load 69
              71:   29(fvec3) VectorShuffle 70 70 0 1 2
              72:   32(fvec4) Load 34
              73:   29(fvec3) VectorShuffle 72 72 2 2 2
              74:   29(fvec3) FMul 71 73
              75:   29(fvec3) Load 31
              76:   29(fvec3) FAdd 74 75
                              Store 31 76
              79:     12(int) Load 14
              80:     12(int) SDiv 79 48
              81:     51(ptr) AccessChain 46 21 80 21 27
              82:   32(fvec4) Load 81
              83:   29(fvec3) VectorShuffle 82 82 0 1 2
              84:   32(fvec4) Load 34
              85:   29(fvec3) VectorShuffle 84 84 3 3 3
              86:   29(fvec3) FMul 83 85
              87:   29(fvec3) Load 31
              88:   29(fvec3) FAdd 86 87
              89:   32(fvec4) Load 78
              90:   32(fvec4) VectorShuffle 89 88 4 5 6 3
                              Store 78 90
              91:   29(fvec3) Load 31
              92:     12(int) Load 14
              93:     12(int) SDiv 92 48
              94:     51(ptr) AccessChain 46 21 93 21 27
              95:   32(fvec4) Load 94
              96:   29(fvec3) VectorShuffle 95 95 0 1 2
              97:   29(fvec3) FAdd 91 96
                              Store 31 97
             100:   29(fvec3) Load 31
             101:   29(fvec3) FNegate 100
             107:    106(ptr) AccessChain 104 105
             108:   29(fvec3) Load 107
             109:   29(fvec3) FAdd 101 108
                              Store 99(vs_TEXCOORD7) 109
             110:   32(fvec4) Load 78
             111:   29(fvec3) VectorShuffle 110 110 1 1 1
             112:     12(int) Load 14
             113:     12(int) SDiv 112 48
             114:     51(ptr) AccessChain 46 21 113 50 50
             115:   32(fvec4) Load 114
             116:   29(fvec3) VectorShuffle 115 115 0 1 2
             117:   29(fvec3) FMul 111 116
                              Store 31 117
             118:     12(int) Load 14
             119:     12(int) SDiv 118 48
             120:     51(ptr) AccessChain 46 21 119 50 21
             121:   32(fvec4) Load 120
             122:   29(fvec3) VectorShuffle 121 121 0 1 2
             123:   32(fvec4) Load 78
             124:   29(fvec3) VectorShuffle 123 123 0 0 0
             125:   29(fvec3) FMul 122 124
             126:   29(fvec3) Load 31
             127:   29(fvec3) FAdd 125 126
                              Store 31 127
             128:     12(int) Load 14
             129:     12(int) SDiv 128 48
             130:     51(ptr) AccessChain 46 21 129 50 68
             131:   32(fvec4) Load 130
             132:   29(fvec3) VectorShuffle 131 131 0 1 2
             133:   32(fvec4) Load 78
             134:   29(fvec3) VectorShuffle 133 133 2 2 2
             135:   29(fvec3) FMul 132 134
             136:   29(fvec3) Load 31
             137:   29(fvec3) FAdd 135 136
                              Store 31 137
             139:   32(fvec4) Load 78
             140:   29(fvec3) VectorShuffle 139 139 0 1 2
                              Store 138(vs_TEXCOORD3) 140
             141:   29(fvec3) Load 31
             142:     12(int) Load 14
             143:     12(int) SDiv 142 48
             144:     51(ptr) AccessChain 46 21 143 50 27
             145:   32(fvec4) Load 144
             146:   29(fvec3) VectorShuffle 145 145 0 1 2
             147:   29(fvec3) FAdd 141 146
                              Store 31 147
             148:   29(fvec3) Load 31
             149:   32(fvec4) VectorShuffle 148 148 1 1 1 1
             150:     12(int) Load 14
             151:     12(int) SDiv 150 48
             152:     51(ptr) AccessChain 46 21 151 21 50
             153:   32(fvec4) Load 152
             154:   32(fvec4) FMul 149 153
                              Store 78 154
             155:     12(int) Load 14
             156:     12(int) SDiv 155 48
             157:     51(ptr) AccessChain 46 21 156 21 21
             158:   32(fvec4) Load 157
             159:   29(fvec3) Load 31
             160:   32(fvec4) VectorShuffle 159 159 0 0 0 0
             161:   32(fvec4) FMul 158 160
             162:   32(fvec4) Load 78
             163:   32(fvec4) FAdd 161 162
                              Store 78 163
             164:     12(int) Load 14
             165:     12(int) SDiv 164 48
             166:     51(ptr) AccessChain 46 21 165 21 68
             167:   32(fvec4) Load 166
             168:   29(fvec3) Load 31
             169:   32(fvec4) VectorShuffle 168 168 2 2 2 2
             170:   32(fvec4) FMul 167 169
             171:   32(fvec4) Load 78
             172:   32(fvec4) FAdd 170 171
                              Store 78 172
             173:   32(fvec4) Load 78
             174:     12(int) Load 14
             175:     12(int) SDiv 174 48
             176:     51(ptr) AccessChain 46 21 175 21 27
             177:   32(fvec4) Load 176
             178:   32(fvec4) FAdd 173 177
                              Store 78 178
             180:   32(fvec4) Load 78
             181:   32(fvec4) VectorShuffle 180 180 1 1 1 1
             190:     51(ptr) AccessChain 188 189 50
             191:   32(fvec4) Load 190
             192:   32(fvec4) FMul 181 191
                              Store 179 192
             193:     51(ptr) AccessChain 188 189 21
             194:   32(fvec4) Load 193
             195:   32(fvec4) Load 78
             196:   32(fvec4) VectorShuffle 195 195 0 0 0 0
             197:   32(fvec4) FMul 194 196
             198:   32(fvec4) Load 179
             199:   32(fvec4) FAdd 197 198
                              Store 179 199
             200:     51(ptr) AccessChain 188 189 68
             201:   32(fvec4) Load 200
             202:   32(fvec4) Load 78
             203:   32(fvec4) VectorShuffle 202 202 2 2 2 2
             204:   32(fvec4) FMul 201 203
             205:   32(fvec4) Load 179
             206:   32(fvec4) FAdd 204 205
                              Store 179 206
             212:     51(ptr) AccessChain 188 189 27
             213:   32(fvec4) Load 212
             214:   32(fvec4) Load 78
             215:   32(fvec4) VectorShuffle 214 214 3 3 3 3
             216:   32(fvec4) FMul 213 215
             217:   32(fvec4) Load 179
             218:   32(fvec4) FAdd 216 217
             220:    219(ptr) AccessChain 211 21
                              Store 220 218
             223:   29(fvec3) Load 222
             224:     12(int) Load 14
             225:     12(int) SDiv 224 48
             226:     51(ptr) AccessChain 46 21 225 50 21
             227:   32(fvec4) Load 226
             228:   29(fvec3) VectorShuffle 227 227 0 1 2
             229:    6(float) Dot 223 228
             232:    231(ptr) AccessChain 78 230
                              Store 232 229
             233:   29(fvec3) Load 222
             234:     12(int) Load 14
             235:     12(int) SDiv 234 48
             236:     51(ptr) AccessChain 46 21 235 50 50
             237:   32(fvec4) Load 236
             238:   29(fvec3) VectorShuffle 237 237 0 1 2
             239:    6(float) Dot 233 238
             240:    231(ptr) AccessChain 78 207
                              Store 240 239
             241:   29(fvec3) Load 222
             242:     12(int) Load 14
             243:     12(int) SDiv 242 48
             244:     51(ptr) AccessChain 46 21 243 50 68
             245:   32(fvec4) Load 244
             246:   29(fvec3) VectorShuffle 245 245 0 1 2
             247:    6(float) Dot 241 246
             249:    231(ptr) AccessChain 78 248
                              Store 249 247
             250:   32(fvec4) Load 78
             251:   29(fvec3) VectorShuffle 250 250 0 1 2
             252:   32(fvec4) Load 78
             253:   29(fvec3) VectorShuffle 252 252 0 1 2
             254:    6(float) Dot 251 253
             255:    231(ptr) AccessChain 31 230
                              Store 255 254
             256:    231(ptr) AccessChain 31 230
             257:    6(float) Load 256
             258:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 257
             259:    231(ptr) AccessChain 31 230
                              Store 259 258
             260:   29(fvec3) Load 31
             261:   29(fvec3) VectorShuffle 260 260 0 0 0
             262:   32(fvec4) Load 78
             263:   29(fvec3) VectorShuffle 262 262 0 1 2
             264:   29(fvec3) FMul 261 263
                              Store 31 264
             266:   29(fvec3) Load 31
                              Store 265(vs_TEXCOORD4) 266
             268:   32(fvec4) Load 267
             269:   29(fvec3) VectorShuffle 268 268 1 1 1
             270:     12(int) Load 14
             271:     12(int) SDiv 270 48
             272:     51(ptr) AccessChain 46 21 271 21 50
             273:   32(fvec4) Load 272
             274:   29(fvec3) VectorShuffle 273 273 0 1 2
             275:   29(fvec3) FMul 269 274
             276:   32(fvec4) Load 78
             277:   32(fvec4) VectorShuffle 276 275 4 5 6 3
                              Store 78 277
             278:     12(int) Load 14
             279:     12(int) SDiv 278 48
             280:     51(ptr) AccessChain 46 21 279 21 21
             281:   32(fvec4) Load 280
             282:   29(fvec3) VectorShuffle 281 281 0 1 2
             283:   32(fvec4) Load 267
             284:   29(fvec3) VectorShuffle 283 283 0 0 0
             285:   29(fvec3) FMul 282 284
             286:   32(fvec4) Load 78
             287:   29(fvec3) VectorShuffle 286 286 0 1 2
             288:   29(fvec3) FAdd 285 287
             289:   32(fvec4) Load 78
             290:   32(fvec4) VectorShuffle 289 288 4 5 6 3
                              Store 78 290
             291:     12(int) Load 14
             292:     12(int) SDiv 291 48
             293:     51(ptr) AccessChain 46 21 292 21 68
             294:   32(fvec4) Load 293
             295:   29(fvec3) VectorShuffle 294 294 0 1 2
             296:   32(fvec4) Load 267
             297:   29(fvec3) VectorShuffle 296 296 2 2 2
             298:   29(fvec3) FMul 295 297
             299:   32(fvec4) Load 78
             300:   29(fvec3) VectorShuffle 299 299 0 1 2
             301:   29(fvec3) FAdd 298 300
             302:   32(fvec4) Load 78
             303:   32(fvec4) VectorShuffle 302 301 4 5 6 3
                              Store 78 303
             305:   32(fvec4) Load 78
             306:   29(fvec3) VectorShuffle 305 305 0 1 2
             307:   32(fvec4) Load 78
             308:   29(fvec3) VectorShuffle 307 307 0 1 2
             309:    6(float) Dot 306 308
             310:    231(ptr) AccessChain 304 230
                              Store 310 309
             311:    231(ptr) AccessChain 304 230
             312:    6(float) Load 311
             313:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 312
             314:    231(ptr) AccessChain 304 230
                              Store 314 313
             315:   29(fvec3) Load 304
             316:   29(fvec3) VectorShuffle 315 315 0 0 0
             317:   32(fvec4) Load 78
             318:   29(fvec3) VectorShuffle 317 317 0 1 2
             319:   29(fvec3) FMul 316 318
             320:   32(fvec4) Load 78
             321:   32(fvec4) VectorShuffle 320 319 4 5 6 3
                              Store 78 321
             323:   32(fvec4) Load 78
             324:   29(fvec3) VectorShuffle 323 323 0 1 2
                              Store 322(vs_TEXCOORD5) 324
             325:   29(fvec3) Load 31
             326:   29(fvec3) VectorShuffle 325 325 2 0 1
             327:   32(fvec4) Load 78
             328:   29(fvec3) VectorShuffle 327 327 1 2 0
             329:   29(fvec3) FMul 326 328
             330:   32(fvec4) Load 179
             331:   32(fvec4) VectorShuffle 330 329 4 5 6 3
                              Store 179 331
             332:   29(fvec3) Load 31
             333:   29(fvec3) VectorShuffle 332 332 1 2 0
             334:   32(fvec4) Load 78
             335:   29(fvec3) VectorShuffle 334 334 2 0 1
             336:   29(fvec3) FMul 333 335
             337:   32(fvec4) Load 179
             338:   29(fvec3) VectorShuffle 337 337 0 1 2
             339:   29(fvec3) FNegate 338
             340:   29(fvec3) FAdd 336 339
                              Store 304 340
             342:   29(fvec3) Load 304
             343:   32(fvec4) Load 267
             344:   29(fvec3) VectorShuffle 343 343 3 3 3
             345:   29(fvec3) FMul 342 344
                              Store 341(vs_TEXCOORD6) 345
             348:   32(fvec4) Load 347
                              Store 346(vs_TEXCOORD8) 348
             351:     12(int) Load 16
             352:     37(int) Bitcast 351
                              Store 350 352
             354:    353(ptr) AccessChain 211 21 207
             355:    6(float) Load 354
             356:    6(float) FNegate 355
             357:    353(ptr) AccessChain 211 21 207
                              Store 357 356
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 13

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 9
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Output 7(fvec4)
               9:      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec4) ConstantComposite 10 10 10 10
               4:           2 Function None 3
               5:             Label
                              Store 9 11
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }
}
Fallback "Hidden/InternalErrorShader"
}